
QUTMS_LCD_UI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068fc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08006ac8  08006ac8  00016ac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d08  08006d08  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006d08  08006d08  00016d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d10  08006d10  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d10  08006d10  00016d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001dc  08006ef4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20000428  08006ef4  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f83  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002501  00000000  00000000  0003318f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001228  00000000  00000000  00035690  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001100  00000000  00000000  000368b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000036f5  00000000  00000000  000379b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d605  00000000  00000000  0003b0ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd5e2  00000000  00000000  000486b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125c94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000559c  00000000  00000000  00125d10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001dc 	.word	0x200001dc
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006aac 	.word	0x08006aac

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e0 	.word	0x200001e0
 8000204:	08006aac 	.word	0x08006aac

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4615      	mov	r5, r2
 8000b82:	d967      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0720 	rsb	r7, r2, #32
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	fa20 f707 	lsr.w	r7, r0, r7
 8000b96:	4095      	lsls	r5, r2
 8000b98:	ea47 0803 	orr.w	r8, r7, r3
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba8:	fa1f fc85 	uxth.w	ip, r5
 8000bac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18eb      	adds	r3, r5, r3
 8000bbe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bc2:	f080 811b 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8118 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bcc:	3f02      	subs	r7, #2
 8000bce:	442b      	add	r3, r5
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	442c      	add	r4, r5
 8000bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	2700      	movs	r7, #0
 8000c06:	b11e      	cbz	r6, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xbe>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80eb 	beq.w	8000df6 <__udivmoddi4+0x286>
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9c6 0100 	strd	r0, r1, [r6]
 8000c26:	4638      	mov	r0, r7
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f783 	clz	r7, r3
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d147      	bne.n	8000cc6 <__udivmoddi4+0x156>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd0>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80fa 	bhi.w	8000e34 <__udivmoddi4+0x2c4>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000c4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xe8>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 808f 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c62:	1b49      	subs	r1, r1, r5
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	fa1f f885 	uxth.w	r8, r5
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	f200 80cd 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1a59      	subs	r1, r3, r1
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x14c>
 8000cac:	192c      	adds	r4, r5, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x14a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80b6 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e79f      	b.n	8000c06 <__udivmoddi4+0x96>
 8000cc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cca:	40bb      	lsls	r3, r7
 8000ccc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce4:	4325      	orrs	r5, r4
 8000ce6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf0:	fa1f fa8e 	uxth.w	sl, lr
 8000cf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000d02:	fa00 f107 	lsl.w	r1, r0, r7
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1e 0303 	adds.w	r3, lr, r3
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d10:	f080 8087 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f240 8084 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1e:	4473      	add	r3, lr
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1e 0404 	adds.w	r4, lr, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d40:	d26b      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d42:	45a2      	cmp	sl, r4
 8000d44:	d969      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4474      	add	r4, lr
 8000d4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	eba4 040a 	sub.w	r4, r4, sl
 8000d56:	454c      	cmp	r4, r9
 8000d58:	46c2      	mov	sl, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	d354      	bcc.n	8000e08 <__udivmoddi4+0x298>
 8000d5e:	d051      	beq.n	8000e04 <__udivmoddi4+0x294>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d069      	beq.n	8000e38 <__udivmoddi4+0x2c8>
 8000d64:	ebb1 050a 	subs.w	r5, r1, sl
 8000d68:	eb64 0403 	sbc.w	r4, r4, r3
 8000d6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d70:	40fd      	lsrs	r5, r7
 8000d72:	40fc      	lsrs	r4, r7
 8000d74:	ea4c 0505 	orr.w	r5, ip, r5
 8000d78:	e9c6 5400 	strd	r5, r4, [r6]
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f703 	lsr.w	r7, r0, r3
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	4338      	orrs	r0, r7
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9e:	fa1f f885 	uxth.w	r8, r5
 8000da2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb07 f308 	mul.w	r3, r7, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	fa04 f402 	lsl.w	r4, r4, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3f02      	subs	r7, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	b281      	uxth	r1, r0
 8000dca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb00 f308 	mul.w	r3, r0, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x27e>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de4:	d217      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d915      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df4:	e73b      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df6:	4637      	mov	r7, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e709      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	e6e7      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e04:	4541      	cmp	r1, r8
 8000e06:	d2ab      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e10:	3801      	subs	r0, #1
 8000e12:	4613      	mov	r3, r2
 8000e14:	e7a4      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e16:	4660      	mov	r0, ip
 8000e18:	e7e9      	b.n	8000dee <__udivmoddi4+0x27e>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e795      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e1e:	4667      	mov	r7, ip
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e77c      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e26:	3802      	subs	r0, #2
 8000e28:	442c      	add	r4, r5
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0x14c>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	442b      	add	r3, r5
 8000e32:	e72f      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e34:	4638      	mov	r0, r7
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xda>
 8000e38:	4637      	mov	r7, r6
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0xa0>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <_sbrk>:
		ITM_SendChar(*ptr++);
	return len;
}

void * _sbrk(int32_t incr)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <_sbrk+0x38>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x16>
		heap_end = & end;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <_sbrk+0x38>)
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <_sbrk+0x3c>)
 8000e54:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <_sbrk+0x38>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <_sbrk+0x38>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <_sbrk+0x38>)
 8000e66:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8000e68:	68fb      	ldr	r3, [r7, #12]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	200001f8 	.word	0x200001f8
 8000e7c:	20000428 	.word	0x20000428

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
int main(void)
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8c:	f000 fd82 	bl	8001994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e90:	f000 f814 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e94:	f000 f9dc 	bl	8001250 <MX_GPIO_Init>
  MX_RTC_Init();
 8000e98:	f000 f8a4 	bl	8000fe4 <MX_RTC_Init>
  MX_SPI1_Init();
 8000e9c:	f000 f8ee 	bl	800107c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000ea0:	f000 f922 	bl	80010e8 <MX_SPI2_Init>
  MX_SDIO_SD_Init();
 8000ea4:	f000 f8c4 	bl	8001030 <MX_SDIO_SD_Init>
  MX_USART2_UART_Init();
 8000ea8:	f000 f9a8 	bl	80011fc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000eac:	f000 f952 	bl	8001154 <MX_TIM2_Init>
 8000eb0:	2300      	movs	r3, #0
      	}
      	HAL_Delay(100);
      }
  }
  /* USER CODE END 3 */
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b0ac      	sub	sp, #176	; 0xb0
 8000ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ec6:	2234      	movs	r2, #52	; 0x34
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f004 f8ca 	bl	8005064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	225c      	movs	r2, #92	; 0x5c
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f004 f8bb 	bl	8005064 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <SystemClock_Config+0x120>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	4a39      	ldr	r2, [pc, #228]	; (8000fdc <SystemClock_Config+0x120>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <SystemClock_Config+0x120>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <SystemClock_Config+0x124>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f16:	4a32      	ldr	r2, [pc, #200]	; (8000fe0 <SystemClock_Config+0x124>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <SystemClock_Config+0x124>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f34:	2301      	movs	r3, #1
 8000f36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f40:	2302      	movs	r3, #2
 8000f42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f4c:	2308      	movs	r3, #8
 8000f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f52:	2348      	movs	r3, #72	; 0x48
 8000f54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 fe18 	bl	8002ba4 <HAL_RCC_OscConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f7a:	f000 fa2d 	bl	80013d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7e:	230f      	movs	r3, #15
 8000f80:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f82:	2302      	movs	r3, #2
 8000f84:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f94:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f96:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 ffeb 	bl	8001f78 <HAL_RCC_ClockConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000fa8:	f000 fa16 	bl	80013d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_SDIO
 8000fac:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000fb0:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f001 f923 	bl	8002210 <HAL_RCCEx_PeriphCLKConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000fd0:	f000 fa02 	bl	80013d8 <Error_Handler>
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	37b0      	adds	r7, #176	; 0xb0
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40007000 	.word	0x40007000

08000fe4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_RTC_Init+0x44>)
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <MX_RTC_Init+0x48>)
 8000fec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_RTC_Init+0x44>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_RTC_Init+0x44>)
 8000ff6:	227f      	movs	r2, #127	; 0x7f
 8000ff8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <MX_RTC_Init+0x44>)
 8000ffc:	22ff      	movs	r2, #255	; 0xff
 8000ffe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_RTC_Init+0x44>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <MX_RTC_Init+0x44>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_RTC_Init+0x44>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_RTC_Init+0x44>)
 8001014:	f002 f820 	bl	8003058 <HAL_RTC_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800101e:	f000 f9db 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000025c 	.word	0x2000025c
 800102c:	40002800 	.word	0x40002800

08001030 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_SDIO_SD_Init+0x44>)
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <MX_SDIO_SD_Init+0x48>)
 8001038:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_SDIO_SD_Init+0x44>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_SDIO_SD_Init+0x44>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_SDIO_SD_Init+0x44>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_SDIO_SD_Init+0x44>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <MX_SDIO_SD_Init+0x44>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_SDIO_SD_Init+0x44>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_SDIO_SD_Init+0x44>)
 8001060:	f002 f8df 	bl	8003222 <HAL_SD_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800106a:	f000 f9b5 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000280 	.word	0x20000280
 8001078:	40012c00 	.word	0x40012c00

0800107c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_SPI1_Init+0x64>)
 8001082:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <MX_SPI1_Init+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_SPI1_Init+0x64>)
 8001088:	f44f 7282 	mov.w	r2, #260	; 0x104
 800108c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_SPI1_Init+0x64>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_SPI1_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_SPI1_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_SPI1_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_SPI1_Init+0x64>)
 80010a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_SPI1_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MX_SPI1_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_SPI1_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <MX_SPI1_Init+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_SPI1_Init+0x64>)
 80010c8:	220a      	movs	r2, #10
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_SPI1_Init+0x64>)
 80010ce:	f002 fc39 	bl	8003944 <HAL_SPI_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010d8:	f000 f97e 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000304 	.word	0x20000304
 80010e4:	40013000 	.word	0x40013000

080010e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_SPI2_Init+0x64>)
 80010ee:	4a18      	ldr	r2, [pc, #96]	; (8001150 <MX_SPI2_Init+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_SPI2_Init+0x64>)
 80010f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_SPI2_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_SPI2_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_SPI2_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_SPI2_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_SPI2_Init+0x64>)
 8001114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001118:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_SPI2_Init+0x64>)
 800111c:	2210      	movs	r2, #16
 800111e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <MX_SPI2_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_SPI2_Init+0x64>)
 8001128:	2200      	movs	r2, #0
 800112a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <MX_SPI2_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_SPI2_Init+0x64>)
 8001134:	220a      	movs	r2, #10
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_SPI2_Init+0x64>)
 800113a:	f002 fc03 	bl	8003944 <HAL_SPI_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001144:	f000 f948 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000204 	.word	0x20000204
 8001150:	40003800 	.word	0x40003800

08001154 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2224      	movs	r2, #36	; 0x24
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f003 ff7e 	bl	8005064 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <MX_TIM2_Init+0xa4>)
 8001172:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001176:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <MX_TIM2_Init+0xa4>)
 800117a:	2200      	movs	r2, #0
 800117c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_TIM2_Init+0xa4>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_TIM2_Init+0xa4>)
 8001186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800118a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_TIM2_Init+0xa4>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_TIM2_Init+0xa4>)
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001198:	2303      	movs	r3, #3
 800119a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011a0:	2301      	movs	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80011a8:	230a      	movs	r3, #10
 80011aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011b0:	2301      	movs	r3, #1
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	4619      	mov	r1, r3
 80011c2:	480d      	ldr	r0, [pc, #52]	; (80011f8 <MX_TIM2_Init+0xa4>)
 80011c4:	f002 fc7b 	bl	8003abe <HAL_TIM_Encoder_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011ce:	f000 f903 	bl	80013d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <MX_TIM2_Init+0xa4>)
 80011e0:	f002 fed0 	bl	8003f84 <HAL_TIMEx_MasterConfigSynchronization>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80011ea:	f000 f8f5 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3730      	adds	r7, #48	; 0x30
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000035c 	.word	0x2000035c

080011fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <MX_USART2_UART_Init+0x50>)
 8001204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800120c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001234:	f002 ff36 	bl	80040a4 <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800123e:	f000 f8cb 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000039c 	.word	0x2000039c
 800124c:	40004400 	.word	0x40004400

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b4e      	ldr	r3, [pc, #312]	; (80013a4 <MX_GPIO_Init+0x154>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a4d      	ldr	r2, [pc, #308]	; (80013a4 <MX_GPIO_Init+0x154>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b4b      	ldr	r3, [pc, #300]	; (80013a4 <MX_GPIO_Init+0x154>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <MX_GPIO_Init+0x154>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a46      	ldr	r2, [pc, #280]	; (80013a4 <MX_GPIO_Init+0x154>)
 800128c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <MX_GPIO_Init+0x154>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b40      	ldr	r3, [pc, #256]	; (80013a4 <MX_GPIO_Init+0x154>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a3f      	ldr	r2, [pc, #252]	; (80013a4 <MX_GPIO_Init+0x154>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <MX_GPIO_Init+0x154>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <MX_GPIO_Init+0x154>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a38      	ldr	r2, [pc, #224]	; (80013a4 <MX_GPIO_Init+0x154>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <MX_GPIO_Init+0x154>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <MX_GPIO_Init+0x154>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a31      	ldr	r2, [pc, #196]	; (80013a4 <MX_GPIO_Init+0x154>)
 80012e0:	f043 0308 	orr.w	r3, r3, #8
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <MX_GPIO_Init+0x154>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f244 0140 	movw	r1, #16448	; 0x4040
 80012f8:	482b      	ldr	r0, [pc, #172]	; (80013a8 <MX_GPIO_Init+0x158>)
 80012fa:	f000 fe23 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	482a      	ldr	r0, [pc, #168]	; (80013ac <MX_GPIO_Init+0x15c>)
 8001304:	f000 fe1e 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800130e:	4828      	ldr	r0, [pc, #160]	; (80013b0 <MX_GPIO_Init+0x160>)
 8001310:	f000 fe18 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Encoder_Switch_Pin */
  GPIO_InitStruct.Pin = Encoder_Switch_Pin;
 8001314:	2310      	movs	r3, #16
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encoder_Switch_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4822      	ldr	r0, [pc, #136]	; (80013b0 <MX_GPIO_Init+0x160>)
 8001328:	f000 fc7a 	bl	8001c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800132c:	2330      	movs	r3, #48	; 0x30
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	481b      	ldr	r0, [pc, #108]	; (80013ac <MX_GPIO_Init+0x15c>)
 8001340:	f000 fc6e 	bl	8001c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LCD_CS_Pin;
 8001344:	f244 0340 	movw	r3, #16448	; 0x4040
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4812      	ldr	r0, [pc, #72]	; (80013a8 <MX_GPIO_Init+0x158>)
 800135e:	f000 fc5f 	bl	8001c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <MX_GPIO_Init+0x15c>)
 800137a:	f000 fc51 	bl	8001c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RST_Pin;
 800137e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4806      	ldr	r0, [pc, #24]	; (80013b0 <MX_GPIO_Init+0x160>)
 8001398:	f000 fc42 	bl	8001c20 <HAL_GPIO_Init>

}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020000 	.word	0x40020000

080013b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013c6:	f000 fb07 	bl	80019d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40000800 	.word	0x40000800

080013d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <HAL_MspInit+0x4c>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_MspInit+0x4c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001426:	2007      	movs	r0, #7
 8001428:	f000 fbc5 	bl	8001bb6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a05      	ldr	r2, [pc, #20]	; (800145c <HAL_RTC_MspInit+0x24>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d102      	bne.n	8001450 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_RTC_MspInit+0x28>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	40002800 	.word	0x40002800
 8001460:	42470e3c 	.word	0x42470e3c

08001464 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a37      	ldr	r2, [pc, #220]	; (8001560 <HAL_SD_MspInit+0xfc>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d168      	bne.n	8001558 <HAL_SD_MspInit+0xf4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	4b36      	ldr	r3, [pc, #216]	; (8001564 <HAL_SD_MspInit+0x100>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	4a35      	ldr	r2, [pc, #212]	; (8001564 <HAL_SD_MspInit+0x100>)
 8001490:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001494:	6453      	str	r3, [r2, #68]	; 0x44
 8001496:	4b33      	ldr	r3, [pc, #204]	; (8001564 <HAL_SD_MspInit+0x100>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <HAL_SD_MspInit+0x100>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a2e      	ldr	r2, [pc, #184]	; (8001564 <HAL_SD_MspInit+0x100>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <HAL_SD_MspInit+0x100>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	4b28      	ldr	r3, [pc, #160]	; (8001564 <HAL_SD_MspInit+0x100>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a27      	ldr	r2, [pc, #156]	; (8001564 <HAL_SD_MspInit+0x100>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b25      	ldr	r3, [pc, #148]	; (8001564 <HAL_SD_MspInit+0x100>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <HAL_SD_MspInit+0x100>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a20      	ldr	r2, [pc, #128]	; (8001564 <HAL_SD_MspInit+0x100>)
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <HAL_SD_MspInit+0x100>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014f6:	2304      	movs	r3, #4
 80014f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001506:	230c      	movs	r3, #12
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	4619      	mov	r1, r3
 8001510:	4815      	ldr	r0, [pc, #84]	; (8001568 <HAL_SD_MspInit+0x104>)
 8001512:	f000 fb85 	bl	8001c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001528:	230c      	movs	r3, #12
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4619      	mov	r1, r3
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <HAL_SD_MspInit+0x108>)
 8001534:	f000 fb74 	bl	8001c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001538:	2304      	movs	r3, #4
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001548:	230c      	movs	r3, #12
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	4807      	ldr	r0, [pc, #28]	; (8001570 <HAL_SD_MspInit+0x10c>)
 8001554:	f000 fb64 	bl	8001c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001558:	bf00      	nop
 800155a:	3730      	adds	r7, #48	; 0x30
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40012c00 	.word	0x40012c00
 8001564:	40023800 	.word	0x40023800
 8001568:	40020400 	.word	0x40020400
 800156c:	40020800 	.word	0x40020800
 8001570:	40020c00 	.word	0x40020c00

08001574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	; 0x30
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a49      	ldr	r2, [pc, #292]	; (80016b8 <HAL_SPI_MspInit+0x144>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d12c      	bne.n	80015f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	4b48      	ldr	r3, [pc, #288]	; (80016bc <HAL_SPI_MspInit+0x148>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a47      	ldr	r2, [pc, #284]	; (80016bc <HAL_SPI_MspInit+0x148>)
 80015a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b45      	ldr	r3, [pc, #276]	; (80016bc <HAL_SPI_MspInit+0x148>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	4b41      	ldr	r3, [pc, #260]	; (80016bc <HAL_SPI_MspInit+0x148>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a40      	ldr	r2, [pc, #256]	; (80016bc <HAL_SPI_MspInit+0x148>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <HAL_SPI_MspInit+0x148>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015ce:	23e0      	movs	r3, #224	; 0xe0
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015de:	2305      	movs	r3, #5
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	4835      	ldr	r0, [pc, #212]	; (80016c0 <HAL_SPI_MspInit+0x14c>)
 80015ea:	f000 fb19 	bl	8001c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015ee:	e05f      	b.n	80016b0 <HAL_SPI_MspInit+0x13c>
  else if(hspi->Instance==SPI2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a33      	ldr	r2, [pc, #204]	; (80016c4 <HAL_SPI_MspInit+0x150>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d15a      	bne.n	80016b0 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <HAL_SPI_MspInit+0x148>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a2e      	ldr	r2, [pc, #184]	; (80016bc <HAL_SPI_MspInit+0x148>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <HAL_SPI_MspInit+0x148>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b28      	ldr	r3, [pc, #160]	; (80016bc <HAL_SPI_MspInit+0x148>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a27      	ldr	r2, [pc, #156]	; (80016bc <HAL_SPI_MspInit+0x148>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b25      	ldr	r3, [pc, #148]	; (80016bc <HAL_SPI_MspInit+0x148>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HAL_SPI_MspInit+0x148>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a20      	ldr	r2, [pc, #128]	; (80016bc <HAL_SPI_MspInit+0x148>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <HAL_SPI_MspInit+0x148>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800164e:	2302      	movs	r3, #2
 8001650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800165e:	2307      	movs	r3, #7
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	4619      	mov	r1, r3
 8001668:	4817      	ldr	r0, [pc, #92]	; (80016c8 <HAL_SPI_MspInit+0x154>)
 800166a:	f000 fad9 	bl	8001c20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800166e:	2304      	movs	r3, #4
 8001670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800167e:	2305      	movs	r3, #5
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	4619      	mov	r1, r3
 8001688:	480f      	ldr	r0, [pc, #60]	; (80016c8 <HAL_SPI_MspInit+0x154>)
 800168a:	f000 fac9 	bl	8001c20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800168e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016a0:	2305      	movs	r3, #5
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	4808      	ldr	r0, [pc, #32]	; (80016cc <HAL_SPI_MspInit+0x158>)
 80016ac:	f000 fab8 	bl	8001c20 <HAL_GPIO_Init>
}
 80016b0:	bf00      	nop
 80016b2:	3730      	adds	r7, #48	; 0x30
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40013000 	.word	0x40013000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40003800 	.word	0x40003800
 80016c8:	40020800 	.word	0x40020800
 80016cc:	40020400 	.word	0x40020400

080016d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f0:	d12b      	bne.n	800174a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_TIM_Encoder_MspInit+0x84>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a16      	ldr	r2, [pc, #88]	; (8001754 <HAL_TIM_Encoder_MspInit+0x84>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <HAL_TIM_Encoder_MspInit+0x84>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <HAL_TIM_Encoder_MspInit+0x84>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <HAL_TIM_Encoder_MspInit+0x84>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <HAL_TIM_Encoder_MspInit+0x84>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800172a:	2303      	movs	r3, #3
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800173a:	2301      	movs	r3, #1
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	4804      	ldr	r0, [pc, #16]	; (8001758 <HAL_TIM_Encoder_MspInit+0x88>)
 8001746:	f000 fa6b 	bl	8001c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	; 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40020000 	.word	0x40020000

0800175c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a19      	ldr	r2, [pc, #100]	; (80017e0 <HAL_UART_MspInit+0x84>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d12b      	bne.n	80017d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_UART_MspInit+0x88>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <HAL_UART_MspInit+0x88>)
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_UART_MspInit+0x88>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_UART_MspInit+0x88>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a10      	ldr	r2, [pc, #64]	; (80017e4 <HAL_UART_MspInit+0x88>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <HAL_UART_MspInit+0x88>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017b6:	230c      	movs	r3, #12
 80017b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c6:	2307      	movs	r3, #7
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <HAL_UART_MspInit+0x8c>)
 80017d2:	f000 fa25 	bl	8001c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	; 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40004400 	.word	0x40004400
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020000 	.word	0x40020000

080017ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	; 0x30
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	201e      	movs	r0, #30
 8001802:	f000 f9e3 	bl	8001bcc <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001806:	201e      	movs	r0, #30
 8001808:	f000 f9fc 	bl	8001c04 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <HAL_InitTick+0xa4>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a1e      	ldr	r2, [pc, #120]	; (8001890 <HAL_InitTick+0xa4>)
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
 800181c:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <HAL_InitTick+0xa4>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001828:	f107 0210 	add.w	r2, r7, #16
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4611      	mov	r1, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fcba 	bl	80021ac <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001838:	f000 fc90 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 800183c:	4603      	mov	r3, r0
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001844:	4a13      	ldr	r2, [pc, #76]	; (8001894 <HAL_InitTick+0xa8>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	0c9b      	lsrs	r3, r3, #18
 800184c:	3b01      	subs	r3, #1
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_InitTick+0xac>)
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <HAL_InitTick+0xb0>)
 8001854:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_InitTick+0xac>)
 8001858:	f240 32e7 	movw	r2, #999	; 0x3e7
 800185c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800185e:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <HAL_InitTick+0xac>)
 8001860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001862:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_InitTick+0xac>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_InitTick+0xac>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001870:	4809      	ldr	r0, [pc, #36]	; (8001898 <HAL_InitTick+0xac>)
 8001872:	f002 f8cb 	bl	8003a0c <HAL_TIM_Base_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d104      	bne.n	8001886 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800187c:	4806      	ldr	r0, [pc, #24]	; (8001898 <HAL_InitTick+0xac>)
 800187e:	f002 f8fa 	bl	8003a76 <HAL_TIM_Base_Start_IT>
 8001882:	4603      	mov	r3, r0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3730      	adds	r7, #48	; 0x30
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800
 8001894:	431bde83 	.word	0x431bde83
 8001898:	200003e0 	.word	0x200003e0
 800189c:	40000800 	.word	0x40000800

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <HardFault_Handler+0x4>

080018b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <MemManage_Handler+0x4>

080018ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <BusFault_Handler+0x4>

080018c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <UsageFault_Handler+0x4>

080018c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <TIM4_IRQHandler+0x10>)
 8001906:	f002 f96c 	bl	8003be2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200003e0 	.word	0x200003e0

08001914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <SystemInit+0x28>)
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191e:	4a07      	ldr	r2, [pc, #28]	; (800193c <SystemInit+0x28>)
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <SystemInit+0x28>)
 800192a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800192e:	609a      	str	r2, [r3, #8]
#endif
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001978 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001944:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001946:	e003      	b.n	8001950 <LoopCopyDataInit>

08001948 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800194a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800194c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800194e:	3104      	adds	r1, #4

08001950 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001950:	480b      	ldr	r0, [pc, #44]	; (8001980 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001954:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001956:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001958:	d3f6      	bcc.n	8001948 <CopyDataInit>
  ldr  r2, =_sbss
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800195c:	e002      	b.n	8001964 <LoopFillZerobss>

0800195e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800195e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001960:	f842 3b04 	str.w	r3, [r2], #4

08001964 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001966:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001968:	d3f9      	bcc.n	800195e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800196a:	f7ff ffd3 	bl	8001914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196e:	f003 fb4d 	bl	800500c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001972:	f7ff fa85 	bl	8000e80 <main>
  bx  lr    
 8001976:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001978:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800197c:	08006d18 	.word	0x08006d18
  ldr  r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001984:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001988:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800198c:	20000428 	.word	0x20000428

08001990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC_IRQHandler>
	...

08001994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001998:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0d      	ldr	r2, [pc, #52]	; (80019d4 <HAL_Init+0x40>)
 800199e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <HAL_Init+0x40>)
 80019aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_Init+0x40>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <HAL_Init+0x40>)
 80019b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019bc:	2003      	movs	r0, #3
 80019be:	f000 f8fa 	bl	8001bb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff ff12 	bl	80017ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c8:	f7ff fd0e 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023c00 	.word	0x40023c00

080019d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_IncTick+0x20>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_IncTick+0x24>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a04      	ldr	r2, [pc, #16]	; (80019fc <HAL_IncTick+0x24>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000008 	.word	0x20000008
 80019fc:	20000420 	.word	0x20000420

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <HAL_GetTick+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000420 	.word	0x20000420

08001a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff ffee 	bl	8001a00 <HAL_GetTick>
 8001a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a30:	d005      	beq.n	8001a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_Delay+0x40>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a3e:	bf00      	nop
 8001a40:	f7ff ffde 	bl	8001a00 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d8f7      	bhi.n	8001a40 <HAL_Delay+0x28>
  {
  }
}
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000008 	.word	0x20000008

08001a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60d3      	str	r3, [r2, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <__NVIC_GetPriorityGrouping+0x18>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 0307 	and.w	r3, r3, #7
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	db0b      	blt.n	8001aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	4907      	ldr	r1, [pc, #28]	; (8001af8 <__NVIC_EnableIRQ+0x38>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000e100 	.word	0xe000e100

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	; (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	; (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
         );
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ff4c 	bl	8001a5c <__NVIC_SetPriorityGrouping>
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
 8001bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bde:	f7ff ff61 	bl	8001aa4 <__NVIC_GetPriorityGrouping>
 8001be2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	68b9      	ldr	r1, [r7, #8]
 8001be8:	6978      	ldr	r0, [r7, #20]
 8001bea:	f7ff ffb1 	bl	8001b50 <NVIC_EncodePriority>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff80 	bl	8001afc <__NVIC_SetPriority>
}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff54 	bl	8001ac0 <__NVIC_EnableIRQ>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	e165      	b.n	8001f08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	f040 8154 	bne.w	8001f02 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d00b      	beq.n	8001c7a <HAL_GPIO_Init+0x5a>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d007      	beq.n	8001c7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c6e:	2b11      	cmp	r3, #17
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b12      	cmp	r3, #18
 8001c78:	d130      	bne.n	8001cdc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 0201 	and.w	r2, r3, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0xfc>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b12      	cmp	r3, #18
 8001d1a:	d123      	bne.n	8001d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	08da      	lsrs	r2, r3, #3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3208      	adds	r2, #8
 8001d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	220f      	movs	r2, #15
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	08da      	lsrs	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3208      	adds	r2, #8
 8001d5e:	69b9      	ldr	r1, [r7, #24]
 8001d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0203 	and.w	r2, r3, #3
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80ae 	beq.w	8001f02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b5c      	ldr	r3, [pc, #368]	; (8001f1c <HAL_GPIO_Init+0x2fc>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	4a5b      	ldr	r2, [pc, #364]	; (8001f1c <HAL_GPIO_Init+0x2fc>)
 8001db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db4:	6453      	str	r3, [r2, #68]	; 0x44
 8001db6:	4b59      	ldr	r3, [pc, #356]	; (8001f1c <HAL_GPIO_Init+0x2fc>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc2:	4a57      	ldr	r2, [pc, #348]	; (8001f20 <HAL_GPIO_Init+0x300>)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	3302      	adds	r3, #2
 8001dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	220f      	movs	r2, #15
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4e      	ldr	r2, [pc, #312]	; (8001f24 <HAL_GPIO_Init+0x304>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d025      	beq.n	8001e3a <HAL_GPIO_Init+0x21a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4d      	ldr	r2, [pc, #308]	; (8001f28 <HAL_GPIO_Init+0x308>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d01f      	beq.n	8001e36 <HAL_GPIO_Init+0x216>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4c      	ldr	r2, [pc, #304]	; (8001f2c <HAL_GPIO_Init+0x30c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d019      	beq.n	8001e32 <HAL_GPIO_Init+0x212>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4b      	ldr	r2, [pc, #300]	; (8001f30 <HAL_GPIO_Init+0x310>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0x20e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4a      	ldr	r2, [pc, #296]	; (8001f34 <HAL_GPIO_Init+0x314>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00d      	beq.n	8001e2a <HAL_GPIO_Init+0x20a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a49      	ldr	r2, [pc, #292]	; (8001f38 <HAL_GPIO_Init+0x318>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d007      	beq.n	8001e26 <HAL_GPIO_Init+0x206>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a48      	ldr	r2, [pc, #288]	; (8001f3c <HAL_GPIO_Init+0x31c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_GPIO_Init+0x202>
 8001e1e:	2306      	movs	r3, #6
 8001e20:	e00c      	b.n	8001e3c <HAL_GPIO_Init+0x21c>
 8001e22:	2307      	movs	r3, #7
 8001e24:	e00a      	b.n	8001e3c <HAL_GPIO_Init+0x21c>
 8001e26:	2305      	movs	r3, #5
 8001e28:	e008      	b.n	8001e3c <HAL_GPIO_Init+0x21c>
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	e006      	b.n	8001e3c <HAL_GPIO_Init+0x21c>
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e004      	b.n	8001e3c <HAL_GPIO_Init+0x21c>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e002      	b.n	8001e3c <HAL_GPIO_Init+0x21c>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_GPIO_Init+0x21c>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	69fa      	ldr	r2, [r7, #28]
 8001e3e:	f002 0203 	and.w	r2, r2, #3
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	4093      	lsls	r3, r2
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e4c:	4934      	ldr	r1, [pc, #208]	; (8001f20 <HAL_GPIO_Init+0x300>)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	3302      	adds	r3, #2
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e5a:	4b39      	ldr	r3, [pc, #228]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e7e:	4a30      	ldr	r2, [pc, #192]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e84:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea8:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed2:	4a1b      	ldr	r2, [pc, #108]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001efc:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3301      	adds	r3, #1
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	2b0f      	cmp	r3, #15
 8001f0c:	f67f ae96 	bls.w	8001c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f10:	bf00      	nop
 8001f12:	3724      	adds	r7, #36	; 0x24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40013800 	.word	0x40013800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40021400 	.word	0x40021400
 8001f3c:	40021800 	.word	0x40021800
 8001f40:	40013c00 	.word	0x40013c00

08001f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
 8001f50:	4613      	mov	r3, r2
 8001f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f54:	787b      	ldrb	r3, [r7, #1]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f60:	e003      	b.n	8001f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f62:	887b      	ldrh	r3, [r7, #2]
 8001f64:	041a      	lsls	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	619a      	str	r2, [r3, #24]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0cc      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b68      	ldr	r3, [pc, #416]	; (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d90c      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b65      	ldr	r3, [pc, #404]	; (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b63      	ldr	r3, [pc, #396]	; (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0b8      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fcc:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4a58      	ldr	r2, [pc, #352]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe4:	4b53      	ldr	r3, [pc, #332]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4a52      	ldr	r2, [pc, #328]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff0:	4b50      	ldr	r3, [pc, #320]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	494d      	ldr	r1, [pc, #308]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d044      	beq.n	8002098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d119      	bne.n	8002056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e07f      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d003      	beq.n	8002036 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002032:	2b03      	cmp	r3, #3
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002036:	4b3f      	ldr	r3, [pc, #252]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d109      	bne.n	8002056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e06f      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002046:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e067      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002056:	4b37      	ldr	r3, [pc, #220]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f023 0203 	bic.w	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4934      	ldr	r1, [pc, #208]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002064:	4313      	orrs	r3, r2
 8002066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002068:	f7ff fcca 	bl	8001a00 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206e:	e00a      	b.n	8002086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002070:	f7ff fcc6 	bl	8001a00 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e04f      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 020c 	and.w	r2, r3, #12
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	429a      	cmp	r2, r3
 8002096:	d1eb      	bne.n	8002070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002098:	4b25      	ldr	r3, [pc, #148]	; (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d20c      	bcs.n	80020c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	4b22      	ldr	r3, [pc, #136]	; (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e032      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4916      	ldr	r1, [pc, #88]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	490e      	ldr	r1, [pc, #56]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020fe:	f000 fbb1 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 8002102:	4601      	mov	r1, r0
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	5cd3      	ldrb	r3, [r2, r3]
 8002112:	fa21 f303 	lsr.w	r3, r1, r3
 8002116:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_ClockConfig+0x1c8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fb64 	bl	80017ec <HAL_InitTick>

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023c00 	.word	0x40023c00
 8002134:	40023800 	.word	0x40023800
 8002138:	08006ac8 	.word	0x08006ac8
 800213c:	20000000 	.word	0x20000000
 8002140:	20000004 	.word	0x20000004

08002144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <HAL_RCC_GetHCLKFreq+0x14>)
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000000 	.word	0x20000000

0800215c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002160:	f7ff fff0 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 8002164:	4601      	mov	r1, r0
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	0a9b      	lsrs	r3, r3, #10
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	4a03      	ldr	r2, [pc, #12]	; (8002180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40023800 	.word	0x40023800
 8002180:	08006ad8 	.word	0x08006ad8

08002184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002188:	f7ff ffdc 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 800218c:	4601      	mov	r1, r0
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	0b5b      	lsrs	r3, r3, #13
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4a03      	ldr	r2, [pc, #12]	; (80021a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40023800 	.word	0x40023800
 80021a8:	08006ad8 	.word	0x08006ad8

080021ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	220f      	movs	r2, #15
 80021ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_RCC_GetClockConfig+0x5c>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0203 	and.w	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_RCC_GetClockConfig+0x5c>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_RCC_GetClockConfig+0x5c>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_GetClockConfig+0x5c>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	08db      	lsrs	r3, r3, #3
 80021e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_RCC_GetClockConfig+0x60>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 020f 	and.w	r2, r3, #15
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	601a      	str	r2, [r3, #0]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	40023c00 	.word	0x40023c00

08002210 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	; 0x30
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d010      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002248:	4b6f      	ldr	r3, [pc, #444]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800224a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800224e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002256:	496c      	ldr	r1, [pc, #432]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002266:	2301      	movs	r3, #1
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d010      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002276:	4b64      	ldr	r3, [pc, #400]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800227c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002284:	4960      	ldr	r1, [pc, #384]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002294:	2301      	movs	r3, #1
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d017      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022a4:	4b58      	ldr	r3, [pc, #352]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4955      	ldr	r1, [pc, #340]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022c2:	d101      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80022c4:	2301      	movs	r3, #1
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80022d0:	2301      	movs	r3, #1
 80022d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d017      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022e0:	4b49      	ldr	r3, [pc, #292]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ee:	4946      	ldr	r1, [pc, #280]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022fe:	d101      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002300:	2301      	movs	r3, #1
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800230c:	2301      	movs	r3, #1
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 808a 	beq.w	8002432 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	4b39      	ldr	r3, [pc, #228]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a38      	ldr	r2, [pc, #224]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b36      	ldr	r3, [pc, #216]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800233a:	4b34      	ldr	r3, [pc, #208]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a33      	ldr	r2, [pc, #204]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002344:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002346:	f7ff fb5b 	bl	8001a00 <HAL_GetTick>
 800234a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800234e:	f7ff fb57 	bl	8001a00 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e278      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002360:	4b2a      	ldr	r3, [pc, #168]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800236c:	4b26      	ldr	r3, [pc, #152]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002374:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d02f      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002384:	6a3a      	ldr	r2, [r7, #32]
 8002386:	429a      	cmp	r2, r3
 8002388:	d028      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800238a:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002392:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80023a0:	4a19      	ldr	r2, [pc, #100]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d114      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80023b2:	f7ff fb25 	bl	8001a00 <HAL_GetTick>
 80023b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7ff fb21 	bl	8001a00 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e240      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d0:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ee      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023e8:	d114      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80023fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fe:	4902      	ldr	r1, [pc, #8]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002400:	4313      	orrs	r3, r2
 8002402:	608b      	str	r3, [r1, #8]
 8002404:	e00c      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
 800240c:	40007000 	.word	0x40007000
 8002410:	42470e40 	.word	0x42470e40
 8002414:	4b4a      	ldr	r3, [pc, #296]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a49      	ldr	r2, [pc, #292]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800241a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800241e:	6093      	str	r3, [r2, #8]
 8002420:	4b47      	ldr	r3, [pc, #284]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002422:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242c:	4944      	ldr	r1, [pc, #272]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800242e:	4313      	orrs	r3, r2
 8002430:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	d004      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002444:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002446:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002454:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	4937      	ldr	r1, [pc, #220]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002476:	4b32      	ldr	r3, [pc, #200]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002484:	492e      	ldr	r1, [pc, #184]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d011      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002498:	4b29      	ldr	r3, [pc, #164]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800249a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800249e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	4926      	ldr	r1, [pc, #152]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024b6:	d101      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80024b8:	2301      	movs	r3, #1
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00a      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	491a      	ldr	r1, [pc, #104]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d011      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f8:	4911      	ldr	r1, [pc, #68]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002508:	d101      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800250a:	2301      	movs	r3, #1
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002510:	2b01      	cmp	r3, #1
 8002512:	d005      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800251c:	f040 80ff 	bne.w	800271e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002526:	f7ff fa6b 	bl	8001a00 <HAL_GetTick>
 800252a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800252c:	e00e      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800252e:	f7ff fa67 	bl	8001a00 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d907      	bls.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e188      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002540:	40023800 	.word	0x40023800
 8002544:	424711e0 	.word	0x424711e0
 8002548:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800254c:	4b7e      	ldr	r3, [pc, #504]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1ea      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	2b00      	cmp	r3, #0
 800256a:	d009      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002574:	2b00      	cmp	r3, #0
 8002576:	d028      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d124      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002580:	4b71      	ldr	r3, [pc, #452]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002586:	0c1b      	lsrs	r3, r3, #16
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	3301      	adds	r3, #1
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002592:	4b6d      	ldr	r3, [pc, #436]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002598:	0e1b      	lsrs	r3, r3, #24
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	019b      	lsls	r3, r3, #6
 80025aa:	431a      	orrs	r2, r3
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	085b      	lsrs	r3, r3, #1
 80025b0:	3b01      	subs	r3, #1
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	431a      	orrs	r2, r3
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	061b      	lsls	r3, r3, #24
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	071b      	lsls	r3, r3, #28
 80025c2:	4961      	ldr	r1, [pc, #388]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d004      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d035      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f4:	d130      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80025f6:	4b54      	ldr	r3, [pc, #336]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025fc:	0c1b      	lsrs	r3, r3, #16
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	3301      	adds	r3, #1
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002608:	4b4f      	ldr	r3, [pc, #316]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800260a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800260e:	0f1b      	lsrs	r3, r3, #28
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	019b      	lsls	r3, r3, #6
 8002620:	431a      	orrs	r2, r3
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	3b01      	subs	r3, #1
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	061b      	lsls	r3, r3, #24
 8002632:	431a      	orrs	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	071b      	lsls	r3, r3, #28
 8002638:	4943      	ldr	r1, [pc, #268]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002640:	4b41      	ldr	r3, [pc, #260]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002646:	f023 021f 	bic.w	r2, r3, #31
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	3b01      	subs	r3, #1
 8002650:	493d      	ldr	r1, [pc, #244]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d029      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800266c:	d124      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002680:	4b31      	ldr	r3, [pc, #196]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002686:	0f1b      	lsrs	r3, r3, #28
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	019b      	lsls	r3, r3, #6
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	085b      	lsrs	r3, r3, #1
 80026a0:	3b01      	subs	r3, #1
 80026a2:	041b      	lsls	r3, r3, #16
 80026a4:	431a      	orrs	r2, r3
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	061b      	lsls	r3, r3, #24
 80026aa:	431a      	orrs	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	071b      	lsls	r3, r3, #28
 80026b0:	4925      	ldr	r1, [pc, #148]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d016      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	019b      	lsls	r3, r3, #6
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	3b01      	subs	r3, #1
 80026d8:	041b      	lsls	r3, r3, #16
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	061b      	lsls	r3, r3, #24
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	071b      	lsls	r3, r3, #28
 80026ea:	4917      	ldr	r1, [pc, #92]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026f8:	f7ff f982 	bl	8001a00 <HAL_GetTick>
 80026fc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002700:	f7ff f97e 	bl	8001a00 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e09f      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800271e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002720:	2b01      	cmp	r3, #1
 8002722:	f040 8095 	bne.w	8002850 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800272c:	f7ff f968 	bl	8001a00 <HAL_GetTick>
 8002730:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002732:	e00f      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002734:	f7ff f964 	bl	8001a00 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d908      	bls.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e085      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	42470068 	.word	0x42470068
 8002750:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002754:	4b41      	ldr	r3, [pc, #260]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800275c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002760:	d0e8      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800277e:	2b00      	cmp	r3, #0
 8002780:	d02b      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002786:	2b00      	cmp	r3, #0
 8002788:	d127      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800278a:	4b34      	ldr	r3, [pc, #208]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002790:	0c1b      	lsrs	r3, r3, #16
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	3301      	adds	r3, #1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699a      	ldr	r2, [r3, #24]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	019b      	lsls	r3, r3, #6
 80027a6:	431a      	orrs	r2, r3
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	085b      	lsrs	r3, r3, #1
 80027ac:	3b01      	subs	r3, #1
 80027ae:	041b      	lsls	r3, r3, #16
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	061b      	lsls	r3, r3, #24
 80027b8:	4928      	ldr	r1, [pc, #160]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027c0:	4b26      	ldr	r3, [pc, #152]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027c6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	3b01      	subs	r3, #1
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	4922      	ldr	r1, [pc, #136]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d01d      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ee:	d118      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027f0:	4b1a      	ldr	r3, [pc, #104]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f6:	0e1b      	lsrs	r3, r3, #24
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	019b      	lsls	r3, r3, #6
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	3b01      	subs	r3, #1
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	431a      	orrs	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	4910      	ldr	r1, [pc, #64]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002828:	f7ff f8ea 	bl	8001a00 <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002830:	f7ff f8e6 	bl	8001a00 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e007      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800284a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800284e:	d1ef      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3730      	adds	r7, #48	; 0x30
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	42470070 	.word	0x42470070

08002864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800287e:	4bc6      	ldr	r3, [pc, #792]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x334>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b0c      	cmp	r3, #12
 8002888:	f200 817e 	bhi.w	8002b88 <HAL_RCC_GetSysClockFreq+0x324>
 800288c:	a201      	add	r2, pc, #4	; (adr r2, 8002894 <HAL_RCC_GetSysClockFreq+0x30>)
 800288e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002892:	bf00      	nop
 8002894:	080028c9 	.word	0x080028c9
 8002898:	08002b89 	.word	0x08002b89
 800289c:	08002b89 	.word	0x08002b89
 80028a0:	08002b89 	.word	0x08002b89
 80028a4:	080028cf 	.word	0x080028cf
 80028a8:	08002b89 	.word	0x08002b89
 80028ac:	08002b89 	.word	0x08002b89
 80028b0:	08002b89 	.word	0x08002b89
 80028b4:	080028d5 	.word	0x080028d5
 80028b8:	08002b89 	.word	0x08002b89
 80028bc:	08002b89 	.word	0x08002b89
 80028c0:	08002b89 	.word	0x08002b89
 80028c4:	08002a31 	.word	0x08002a31
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028c8:	4bb4      	ldr	r3, [pc, #720]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x338>)
 80028ca:	613b      	str	r3, [r7, #16]
       break;
 80028cc:	e15f      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ce:	4bb4      	ldr	r3, [pc, #720]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x33c>)
 80028d0:	613b      	str	r3, [r7, #16]
      break;
 80028d2:	e15c      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d4:	4bb0      	ldr	r3, [pc, #704]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x334>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028dc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028de:	4bae      	ldr	r3, [pc, #696]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x334>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d04a      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ea:	4bab      	ldr	r3, [pc, #684]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x334>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	099b      	lsrs	r3, r3, #6
 80028f0:	f04f 0400 	mov.w	r4, #0
 80028f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	ea03 0501 	and.w	r5, r3, r1
 8002900:	ea04 0602 	and.w	r6, r4, r2
 8002904:	4629      	mov	r1, r5
 8002906:	4632      	mov	r2, r6
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	f04f 0400 	mov.w	r4, #0
 8002910:	0154      	lsls	r4, r2, #5
 8002912:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002916:	014b      	lsls	r3, r1, #5
 8002918:	4619      	mov	r1, r3
 800291a:	4622      	mov	r2, r4
 800291c:	1b49      	subs	r1, r1, r5
 800291e:	eb62 0206 	sbc.w	r2, r2, r6
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	f04f 0400 	mov.w	r4, #0
 800292a:	0194      	lsls	r4, r2, #6
 800292c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002930:	018b      	lsls	r3, r1, #6
 8002932:	1a5b      	subs	r3, r3, r1
 8002934:	eb64 0402 	sbc.w	r4, r4, r2
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	00e2      	lsls	r2, r4, #3
 8002942:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002946:	00d9      	lsls	r1, r3, #3
 8002948:	460b      	mov	r3, r1
 800294a:	4614      	mov	r4, r2
 800294c:	195b      	adds	r3, r3, r5
 800294e:	eb44 0406 	adc.w	r4, r4, r6
 8002952:	f04f 0100 	mov.w	r1, #0
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	0262      	lsls	r2, r4, #9
 800295c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002960:	0259      	lsls	r1, r3, #9
 8002962:	460b      	mov	r3, r1
 8002964:	4614      	mov	r4, r2
 8002966:	4618      	mov	r0, r3
 8002968:	4621      	mov	r1, r4
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f04f 0400 	mov.w	r4, #0
 8002970:	461a      	mov	r2, r3
 8002972:	4623      	mov	r3, r4
 8002974:	f7fe f8e4 	bl	8000b40 <__aeabi_uldivmod>
 8002978:	4603      	mov	r3, r0
 800297a:	460c      	mov	r4, r1
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	e049      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002980:	4b85      	ldr	r3, [pc, #532]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x334>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	099b      	lsrs	r3, r3, #6
 8002986:	f04f 0400 	mov.w	r4, #0
 800298a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	ea03 0501 	and.w	r5, r3, r1
 8002996:	ea04 0602 	and.w	r6, r4, r2
 800299a:	4629      	mov	r1, r5
 800299c:	4632      	mov	r2, r6
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	f04f 0400 	mov.w	r4, #0
 80029a6:	0154      	lsls	r4, r2, #5
 80029a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029ac:	014b      	lsls	r3, r1, #5
 80029ae:	4619      	mov	r1, r3
 80029b0:	4622      	mov	r2, r4
 80029b2:	1b49      	subs	r1, r1, r5
 80029b4:	eb62 0206 	sbc.w	r2, r2, r6
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	f04f 0400 	mov.w	r4, #0
 80029c0:	0194      	lsls	r4, r2, #6
 80029c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029c6:	018b      	lsls	r3, r1, #6
 80029c8:	1a5b      	subs	r3, r3, r1
 80029ca:	eb64 0402 	sbc.w	r4, r4, r2
 80029ce:	f04f 0100 	mov.w	r1, #0
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	00e2      	lsls	r2, r4, #3
 80029d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029dc:	00d9      	lsls	r1, r3, #3
 80029de:	460b      	mov	r3, r1
 80029e0:	4614      	mov	r4, r2
 80029e2:	195b      	adds	r3, r3, r5
 80029e4:	eb44 0406 	adc.w	r4, r4, r6
 80029e8:	f04f 0100 	mov.w	r1, #0
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	02a2      	lsls	r2, r4, #10
 80029f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029f6:	0299      	lsls	r1, r3, #10
 80029f8:	460b      	mov	r3, r1
 80029fa:	4614      	mov	r4, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	4621      	mov	r1, r4
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4623      	mov	r3, r4
 8002a0a:	f7fe f899 	bl	8000b40 <__aeabi_uldivmod>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a14:	4b60      	ldr	r3, [pc, #384]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2c:	613b      	str	r3, [r7, #16]
      break;
 8002a2e:	e0ae      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a30:	4b59      	ldr	r3, [pc, #356]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a38:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a3a:	4b57      	ldr	r3, [pc, #348]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d04a      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a46:	4b54      	ldr	r3, [pc, #336]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	099b      	lsrs	r3, r3, #6
 8002a4c:	f04f 0400 	mov.w	r4, #0
 8002a50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	ea03 0501 	and.w	r5, r3, r1
 8002a5c:	ea04 0602 	and.w	r6, r4, r2
 8002a60:	4629      	mov	r1, r5
 8002a62:	4632      	mov	r2, r6
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	f04f 0400 	mov.w	r4, #0
 8002a6c:	0154      	lsls	r4, r2, #5
 8002a6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a72:	014b      	lsls	r3, r1, #5
 8002a74:	4619      	mov	r1, r3
 8002a76:	4622      	mov	r2, r4
 8002a78:	1b49      	subs	r1, r1, r5
 8002a7a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	f04f 0400 	mov.w	r4, #0
 8002a86:	0194      	lsls	r4, r2, #6
 8002a88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a8c:	018b      	lsls	r3, r1, #6
 8002a8e:	1a5b      	subs	r3, r3, r1
 8002a90:	eb64 0402 	sbc.w	r4, r4, r2
 8002a94:	f04f 0100 	mov.w	r1, #0
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	00e2      	lsls	r2, r4, #3
 8002a9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002aa2:	00d9      	lsls	r1, r3, #3
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4614      	mov	r4, r2
 8002aa8:	195b      	adds	r3, r3, r5
 8002aaa:	eb44 0406 	adc.w	r4, r4, r6
 8002aae:	f04f 0100 	mov.w	r1, #0
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	0262      	lsls	r2, r4, #9
 8002ab8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002abc:	0259      	lsls	r1, r3, #9
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4614      	mov	r4, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f04f 0400 	mov.w	r4, #0
 8002acc:	461a      	mov	r2, r3
 8002ace:	4623      	mov	r3, r4
 8002ad0:	f7fe f836 	bl	8000b40 <__aeabi_uldivmod>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	e049      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002adc:	4b2e      	ldr	r3, [pc, #184]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	099b      	lsrs	r3, r3, #6
 8002ae2:	f04f 0400 	mov.w	r4, #0
 8002ae6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	ea03 0501 	and.w	r5, r3, r1
 8002af2:	ea04 0602 	and.w	r6, r4, r2
 8002af6:	4629      	mov	r1, r5
 8002af8:	4632      	mov	r2, r6
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	f04f 0400 	mov.w	r4, #0
 8002b02:	0154      	lsls	r4, r2, #5
 8002b04:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b08:	014b      	lsls	r3, r1, #5
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4622      	mov	r2, r4
 8002b0e:	1b49      	subs	r1, r1, r5
 8002b10:	eb62 0206 	sbc.w	r2, r2, r6
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	f04f 0400 	mov.w	r4, #0
 8002b1c:	0194      	lsls	r4, r2, #6
 8002b1e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b22:	018b      	lsls	r3, r1, #6
 8002b24:	1a5b      	subs	r3, r3, r1
 8002b26:	eb64 0402 	sbc.w	r4, r4, r2
 8002b2a:	f04f 0100 	mov.w	r1, #0
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	00e2      	lsls	r2, r4, #3
 8002b34:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b38:	00d9      	lsls	r1, r3, #3
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4614      	mov	r4, r2
 8002b3e:	195b      	adds	r3, r3, r5
 8002b40:	eb44 0406 	adc.w	r4, r4, r6
 8002b44:	f04f 0100 	mov.w	r1, #0
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	02a2      	lsls	r2, r4, #10
 8002b4e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b52:	0299      	lsls	r1, r3, #10
 8002b54:	460b      	mov	r3, r1
 8002b56:	4614      	mov	r4, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f04f 0400 	mov.w	r4, #0
 8002b62:	461a      	mov	r2, r3
 8002b64:	4623      	mov	r3, r4
 8002b66:	f7fd ffeb 	bl	8000b40 <__aeabi_uldivmod>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	460c      	mov	r4, r1
 8002b6e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	0f1b      	lsrs	r3, r3, #28
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	613b      	str	r3, [r7, #16]
      break;
 8002b86:	e002      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x338>)
 8002b8a:	613b      	str	r3, [r7, #16]
      break;
 8002b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b8e:	693b      	ldr	r3, [r7, #16]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	00f42400 	.word	0x00f42400
 8002ba0:	007a1200 	.word	0x007a1200

08002ba4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8083 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bbe:	4b95      	ldr	r3, [pc, #596]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d019      	beq.n	8002bfe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bca:	4b92      	ldr	r3, [pc, #584]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bd6:	4b8f      	ldr	r3, [pc, #572]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be2:	d00c      	beq.n	8002bfe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be4:	4b8b      	ldr	r3, [pc, #556]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	d112      	bne.n	8002c16 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf0:	4b88      	ldr	r3, [pc, #544]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bfc:	d10b      	bne.n	8002c16 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfe:	4b85      	ldr	r3, [pc, #532]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d05b      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x11e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d157      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e216      	b.n	8003044 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x8a>
 8002c20:	4b7c      	ldr	r3, [pc, #496]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a7b      	ldr	r2, [pc, #492]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	e01d      	b.n	8002c6a <HAL_RCC_OscConfig+0xc6>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c36:	d10c      	bne.n	8002c52 <HAL_RCC_OscConfig+0xae>
 8002c38:	4b76      	ldr	r3, [pc, #472]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a75      	ldr	r2, [pc, #468]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b73      	ldr	r3, [pc, #460]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a72      	ldr	r2, [pc, #456]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	e00b      	b.n	8002c6a <HAL_RCC_OscConfig+0xc6>
 8002c52:	4b70      	ldr	r3, [pc, #448]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6f      	ldr	r2, [pc, #444]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b6d      	ldr	r3, [pc, #436]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a6c      	ldr	r2, [pc, #432]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d013      	beq.n	8002c9a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c72:	f7fe fec5 	bl	8001a00 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7a:	f7fe fec1 	bl	8001a00 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b64      	cmp	r3, #100	; 0x64
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e1db      	b.n	8003044 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8c:	4b61      	ldr	r3, [pc, #388]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f0      	beq.n	8002c7a <HAL_RCC_OscConfig+0xd6>
 8002c98:	e014      	b.n	8002cc4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9a:	f7fe feb1 	bl	8001a00 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca2:	f7fe fead 	bl	8001a00 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b64      	cmp	r3, #100	; 0x64
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e1c7      	b.n	8003044 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb4:	4b57      	ldr	r3, [pc, #348]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f0      	bne.n	8002ca2 <HAL_RCC_OscConfig+0xfe>
 8002cc0:	e000      	b.n	8002cc4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d06f      	beq.n	8002db0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cd0:	4b50      	ldr	r3, [pc, #320]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d017      	beq.n	8002d0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cdc:	4b4d      	ldr	r3, [pc, #308]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ce8:	4b4a      	ldr	r3, [pc, #296]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00b      	beq.n	8002d0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf4:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cfc:	2b0c      	cmp	r3, #12
 8002cfe:	d11c      	bne.n	8002d3a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d00:	4b44      	ldr	r3, [pc, #272]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d116      	bne.n	8002d3a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0c:	4b41      	ldr	r3, [pc, #260]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_OscConfig+0x180>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e18f      	b.n	8003044 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	4b3b      	ldr	r3, [pc, #236]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4938      	ldr	r1, [pc, #224]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d38:	e03a      	b.n	8002db0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d020      	beq.n	8002d84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d42:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <HAL_RCC_OscConfig+0x274>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe fe5a 	bl	8001a00 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d50:	f7fe fe56 	bl	8001a00 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e170      	b.n	8003044 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d62:	4b2c      	ldr	r3, [pc, #176]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6e:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4925      	ldr	r1, [pc, #148]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]
 8002d82:	e015      	b.n	8002db0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d84:	4b24      	ldr	r3, [pc, #144]	; (8002e18 <HAL_RCC_OscConfig+0x274>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fe39 	bl	8001a00 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d92:	f7fe fe35 	bl	8001a00 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e14f      	b.n	8003044 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d037      	beq.n	8002e2c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d016      	beq.n	8002df2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc4:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <HAL_RCC_OscConfig+0x278>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dca:	f7fe fe19 	bl	8001a00 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd2:	f7fe fe15 	bl	8001a00 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e12f      	b.n	8003044 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_RCC_OscConfig+0x270>)
 8002de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x22e>
 8002df0:	e01c      	b.n	8002e2c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <HAL_RCC_OscConfig+0x278>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df8:	f7fe fe02 	bl	8001a00 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfe:	e00f      	b.n	8002e20 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e00:	f7fe fdfe 	bl	8001a00 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d908      	bls.n	8002e20 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e118      	b.n	8003044 <HAL_RCC_OscConfig+0x4a0>
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	42470000 	.word	0x42470000
 8002e1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e20:	4b8a      	ldr	r3, [pc, #552]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e9      	bne.n	8002e00 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8097 	beq.w	8002f68 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3e:	4b83      	ldr	r3, [pc, #524]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10f      	bne.n	8002e6a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	4b7f      	ldr	r3, [pc, #508]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	4a7e      	ldr	r2, [pc, #504]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e58:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5a:	4b7c      	ldr	r3, [pc, #496]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e66:	2301      	movs	r3, #1
 8002e68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6a:	4b79      	ldr	r3, [pc, #484]	; (8003050 <HAL_RCC_OscConfig+0x4ac>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d118      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e76:	4b76      	ldr	r3, [pc, #472]	; (8003050 <HAL_RCC_OscConfig+0x4ac>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a75      	ldr	r2, [pc, #468]	; (8003050 <HAL_RCC_OscConfig+0x4ac>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e82:	f7fe fdbd 	bl	8001a00 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8a:	f7fe fdb9 	bl	8001a00 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0d3      	b.n	8003044 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	4b6c      	ldr	r3, [pc, #432]	; (8003050 <HAL_RCC_OscConfig+0x4ac>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x31a>
 8002eb0:	4b66      	ldr	r3, [pc, #408]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	4a65      	ldr	r2, [pc, #404]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6713      	str	r3, [r2, #112]	; 0x70
 8002ebc:	e01c      	b.n	8002ef8 <HAL_RCC_OscConfig+0x354>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b05      	cmp	r3, #5
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x33c>
 8002ec6:	4b61      	ldr	r3, [pc, #388]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a60      	ldr	r2, [pc, #384]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002ecc:	f043 0304 	orr.w	r3, r3, #4
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed2:	4b5e      	ldr	r3, [pc, #376]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a5d      	ldr	r2, [pc, #372]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ede:	e00b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x354>
 8002ee0:	4b5a      	ldr	r3, [pc, #360]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a59      	ldr	r2, [pc, #356]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002ee6:	f023 0301 	bic.w	r3, r3, #1
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
 8002eec:	4b57      	ldr	r3, [pc, #348]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a56      	ldr	r2, [pc, #344]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002ef2:	f023 0304 	bic.w	r3, r3, #4
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d015      	beq.n	8002f2c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe fd7e 	bl	8001a00 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7fe fd7a 	bl	8001a00 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e092      	b.n	8003044 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1e:	4b4b      	ldr	r3, [pc, #300]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0ee      	beq.n	8002f08 <HAL_RCC_OscConfig+0x364>
 8002f2a:	e014      	b.n	8002f56 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7fe fd68 	bl	8001a00 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7fe fd64 	bl	8001a00 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e07c      	b.n	8003044 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4a:	4b40      	ldr	r3, [pc, #256]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1ee      	bne.n	8002f34 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d105      	bne.n	8002f68 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5c:	4b3b      	ldr	r3, [pc, #236]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	4a3a      	ldr	r2, [pc, #232]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d068      	beq.n	8003042 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f70:	4b36      	ldr	r3, [pc, #216]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 030c 	and.w	r3, r3, #12
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d060      	beq.n	800303e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d145      	bne.n	8003010 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f84:	4b33      	ldr	r3, [pc, #204]	; (8003054 <HAL_RCC_OscConfig+0x4b0>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8a:	f7fe fd39 	bl	8001a00 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f92:	f7fe fd35 	bl	8001a00 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e04f      	b.n	8003044 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa4:	4b29      	ldr	r3, [pc, #164]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	019b      	lsls	r3, r3, #6
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	085b      	lsrs	r3, r3, #1
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	041b      	lsls	r3, r3, #16
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	061b      	lsls	r3, r3, #24
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	071b      	lsls	r3, r3, #28
 8002fdc:	491b      	ldr	r1, [pc, #108]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe2:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <HAL_RCC_OscConfig+0x4b0>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fd0a 	bl	8001a00 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fe fd06 	bl	8001a00 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e020      	b.n	8003044 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x44c>
 800300e:	e018      	b.n	8003042 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003010:	4b10      	ldr	r3, [pc, #64]	; (8003054 <HAL_RCC_OscConfig+0x4b0>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003016:	f7fe fcf3 	bl	8001a00 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301e:	f7fe fcef 	bl	8001a00 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e009      	b.n	8003044 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_RCC_OscConfig+0x4a8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f0      	bne.n	800301e <HAL_RCC_OscConfig+0x47a>
 800303c:	e001      	b.n	8003042 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40023800 	.word	0x40023800
 8003050:	40007000 	.word	0x40007000
 8003054:	42470060 	.word	0x42470060

08003058 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e083      	b.n	8003172 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7f5b      	ldrb	r3, [r3, #29]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d105      	bne.n	8003080 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fe f9dc 	bl	8001438 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	22ca      	movs	r2, #202	; 0xca
 800308c:	625a      	str	r2, [r3, #36]	; 0x24
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2253      	movs	r2, #83	; 0x53
 8003094:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f897 	bl	80031ca <RTC_EnterInitMode>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	22ff      	movs	r2, #255	; 0xff
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2204      	movs	r2, #4
 80030ae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e05e      	b.n	8003172 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80030c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030c6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6899      	ldr	r1, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68d2      	ldr	r2, [r2, #12]
 80030ee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6919      	ldr	r1, [r3, #16]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	041a      	lsls	r2, r3, #16
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003112:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10e      	bne.n	8003140 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f829 	bl	800317a <HAL_RTC_WaitForSynchro>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	22ff      	movs	r2, #255	; 0xff
 8003134:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2204      	movs	r2, #4
 800313a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e018      	b.n	8003172 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800314e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	22ff      	movs	r2, #255	; 0xff
 8003168:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003170:	2300      	movs	r3, #0
  }
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003194:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003196:	f7fe fc33 	bl	8001a00 <HAL_GetTick>
 800319a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800319c:	e009      	b.n	80031b2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800319e:	f7fe fc2f 	bl	8001a00 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ac:	d901      	bls.n	80031b2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e007      	b.n	80031c2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0ee      	beq.n	800319e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d119      	bne.n	8003218 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f04f 32ff 	mov.w	r2, #4294967295
 80031ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031ee:	f7fe fc07 	bl	8001a00 <HAL_GetTick>
 80031f2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80031f4:	e009      	b.n	800320a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80031f6:	f7fe fc03 	bl	8001a00 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003204:	d901      	bls.n	800320a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e007      	b.n	800321a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0ee      	beq.n	80031f6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e022      	b.n	800327a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d105      	bne.n	800324c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fe f90c 	bl	8001464 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2203      	movs	r2, #3
 8003250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f815 	bl	8003284 <HAL_SD_InitCard>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e00a      	b.n	800327a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003284:	b5b0      	push	{r4, r5, r7, lr}
 8003286:	b08e      	sub	sp, #56	; 0x38
 8003288:	af04      	add	r7, sp, #16
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800328c:	2300      	movs	r3, #0
 800328e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800329c:	2300      	movs	r3, #0
 800329e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80032a0:	2376      	movs	r3, #118	; 0x76
 80032a2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681d      	ldr	r5, [r3, #0]
 80032a8:	466c      	mov	r4, sp
 80032aa:	f107 0314 	add.w	r3, r7, #20
 80032ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80032b6:	f107 0308 	add.w	r3, r7, #8
 80032ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032bc:	4628      	mov	r0, r5
 80032be:	f001 fabb 	bl	8004838 <SDIO_Init>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80032c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e031      	b.n	8003338 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80032d4:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <HAL_SD_InitCard+0xbc>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f001 fad5 	bl	800488e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80032e4:	4b16      	ldr	r3, [pc, #88]	; (8003340 <HAL_SD_InitCard+0xbc>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fa9c 	bl	8003828 <SD_PowerON>
 80032f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00b      	beq.n	8003310 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e013      	b.n	8003338 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f9bb 	bl	800368c <SD_InitCard>
 8003316:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00b      	beq.n	8003336 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3728      	adds	r7, #40	; 0x28
 800333c:	46bd      	mov	sp, r7
 800333e:	bdb0      	pop	{r4, r5, r7, pc}
 8003340:	422580a0 	.word	0x422580a0

08003344 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003352:	0f9b      	lsrs	r3, r3, #30
 8003354:	b2da      	uxtb	r2, r3
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800335e:	0e9b      	lsrs	r3, r3, #26
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	b2da      	uxtb	r2, r3
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003370:	0e1b      	lsrs	r3, r3, #24
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	b2da      	uxtb	r2, r3
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003382:	0c1b      	lsrs	r3, r3, #16
 8003384:	b2da      	uxtb	r2, r3
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800338e:	0a1b      	lsrs	r3, r3, #8
 8003390:	b2da      	uxtb	r2, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800339a:	b2da      	uxtb	r2, r3
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033a4:	0d1b      	lsrs	r3, r3, #20
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c2:	0bdb      	lsrs	r3, r3, #15
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d4:	0b9b      	lsrs	r3, r3, #14
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033e6:	0b5b      	lsrs	r3, r3, #13
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033f8:	0b1b      	lsrs	r3, r3, #12
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	b2da      	uxtb	r2, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2200      	movs	r2, #0
 800340a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	2b00      	cmp	r3, #0
 8003412:	d163      	bne.n	80034dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003418:	009a      	lsls	r2, r3, #2
 800341a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800341e:	4013      	ands	r3, r2
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003424:	0f92      	lsrs	r2, r2, #30
 8003426:	431a      	orrs	r2, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003430:	0edb      	lsrs	r3, r3, #27
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	b2da      	uxtb	r2, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003442:	0e1b      	lsrs	r3, r3, #24
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	b2da      	uxtb	r2, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003454:	0d5b      	lsrs	r3, r3, #21
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	b2da      	uxtb	r2, r3
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003466:	0c9b      	lsrs	r3, r3, #18
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	b2da      	uxtb	r2, r3
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003478:	0bdb      	lsrs	r3, r3, #15
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	b2da      	uxtb	r2, r3
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	7e1b      	ldrb	r3, [r3, #24]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	3302      	adds	r3, #2
 800349c:	2201      	movs	r2, #1
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80034a6:	fb02 f203 	mul.w	r2, r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	7a1b      	ldrb	r3, [r3, #8]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	2201      	movs	r2, #1
 80034ba:	409a      	lsls	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80034c8:	0a52      	lsrs	r2, r2, #9
 80034ca:	fb02 f203 	mul.w	r2, r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034d8:	661a      	str	r2, [r3, #96]	; 0x60
 80034da:	e031      	b.n	8003540 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d11d      	bne.n	8003520 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e8:	041b      	lsls	r3, r3, #16
 80034ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f2:	0c1b      	lsrs	r3, r3, #16
 80034f4:	431a      	orrs	r2, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	3301      	adds	r3, #1
 8003500:	029a      	lsls	r2, r3, #10
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003514:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	661a      	str	r2, [r3, #96]	; 0x60
 800351e:	e00f      	b.n	8003540 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a58      	ldr	r2, [pc, #352]	; (8003688 <HAL_SD_GetCardCSD+0x344>)
 8003526:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e09d      	b.n	800367c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003544:	0b9b      	lsrs	r3, r3, #14
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	b2da      	uxtb	r2, r3
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003556:	09db      	lsrs	r3, r3, #7
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800355e:	b2da      	uxtb	r2, r3
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800356e:	b2da      	uxtb	r2, r3
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	0fdb      	lsrs	r3, r3, #31
 800357a:	b2da      	uxtb	r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	0f5b      	lsrs	r3, r3, #29
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	b2da      	uxtb	r2, r3
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	0e9b      	lsrs	r3, r3, #26
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	0d9b      	lsrs	r3, r3, #22
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	0d5b      	lsrs	r3, r3, #21
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	0c1b      	lsrs	r3, r3, #16
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	0bdb      	lsrs	r3, r3, #15
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	0b9b      	lsrs	r3, r3, #14
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	0b5b      	lsrs	r3, r3, #13
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	b2da      	uxtb	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	0b1b      	lsrs	r3, r3, #12
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	b2da      	uxtb	r2, r3
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	0a9b      	lsrs	r3, r3, #10
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	b2da      	uxtb	r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	b2da      	uxtb	r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800366a:	b2da      	uxtb	r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	004005ff 	.word	0x004005ff

0800368c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800368c:	b5b0      	push	{r4, r5, r7, lr}
 800368e:	b094      	sub	sp, #80	; 0x50
 8003690:	af04      	add	r7, sp, #16
 8003692:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003694:	2301      	movs	r3, #1
 8003696:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f001 f905 	bl	80048ac <SDIO_GetPowerState>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d102      	bne.n	80036ae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80036a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80036ac:	e0b7      	b.n	800381e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d02f      	beq.n	8003716 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f001 f9f3 	bl	8004aa6 <SDMMC_CmdSendCID>
 80036c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80036c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <SD_InitCard+0x40>
    {
      return errorstate;
 80036c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ca:	e0a8      	b.n	800381e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f001 f92f 	bl	8004936 <SDIO_GetResponse>
 80036d8:	4602      	mov	r2, r0
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2104      	movs	r1, #4
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 f926 	bl	8004936 <SDIO_GetResponse>
 80036ea:	4602      	mov	r2, r0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2108      	movs	r1, #8
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 f91d 	bl	8004936 <SDIO_GetResponse>
 80036fc:	4602      	mov	r2, r0
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	210c      	movs	r1, #12
 8003708:	4618      	mov	r0, r3
 800370a:	f001 f914 	bl	8004936 <SDIO_GetResponse>
 800370e:	4602      	mov	r2, r0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	2b03      	cmp	r3, #3
 800371c:	d00d      	beq.n	800373a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f107 020e 	add.w	r2, r7, #14
 8003726:	4611      	mov	r1, r2
 8003728:	4618      	mov	r0, r3
 800372a:	f001 f9f9 	bl	8004b20 <SDMMC_CmdSetRelAdd>
 800372e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <SD_InitCard+0xae>
    {
      return errorstate;
 8003736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003738:	e071      	b.n	800381e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	2b03      	cmp	r3, #3
 8003740:	d036      	beq.n	80037b0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003742:	89fb      	ldrh	r3, [r7, #14]
 8003744:	461a      	mov	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003752:	041b      	lsls	r3, r3, #16
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f001 f9c3 	bl	8004ae2 <SDMMC_CmdSendCSD>
 800375c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800375e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003766:	e05a      	b.n	800381e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f001 f8e1 	bl	8004936 <SDIO_GetResponse>
 8003774:	4602      	mov	r2, r0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2104      	movs	r1, #4
 8003780:	4618      	mov	r0, r3
 8003782:	f001 f8d8 	bl	8004936 <SDIO_GetResponse>
 8003786:	4602      	mov	r2, r0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2108      	movs	r1, #8
 8003792:	4618      	mov	r0, r3
 8003794:	f001 f8cf 	bl	8004936 <SDIO_GetResponse>
 8003798:	4602      	mov	r2, r0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	210c      	movs	r1, #12
 80037a4:	4618      	mov	r0, r3
 80037a6:	f001 f8c6 	bl	8004936 <SDIO_GetResponse>
 80037aa:	4602      	mov	r2, r0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2104      	movs	r1, #4
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 f8bd 	bl	8004936 <SDIO_GetResponse>
 80037bc:	4603      	mov	r3, r0
 80037be:	0d1a      	lsrs	r2, r3, #20
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80037c4:	f107 0310 	add.w	r3, r7, #16
 80037c8:	4619      	mov	r1, r3
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff fdba 	bl	8003344 <HAL_SD_GetCardCSD>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80037da:	e020      	b.n	800381e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6819      	ldr	r1, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e4:	041b      	lsls	r3, r3, #16
 80037e6:	f04f 0400 	mov.w	r4, #0
 80037ea:	461a      	mov	r2, r3
 80037ec:	4623      	mov	r3, r4
 80037ee:	4608      	mov	r0, r1
 80037f0:	f001 f8b4 	bl	800495c <SDMMC_CmdSelDesel>
 80037f4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80037f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <SD_InitCard+0x174>
  {
    return errorstate;
 80037fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037fe:	e00e      	b.n	800381e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681d      	ldr	r5, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	466c      	mov	r4, sp
 8003808:	f103 0210 	add.w	r2, r3, #16
 800380c:	ca07      	ldmia	r2, {r0, r1, r2}
 800380e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003812:	3304      	adds	r3, #4
 8003814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003816:	4628      	mov	r0, r5
 8003818:	f001 f80e 	bl	8004838 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3740      	adds	r7, #64	; 0x40
 8003822:	46bd      	mov	sp, r7
 8003824:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003828 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	2300      	movs	r3, #0
 800383a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f001 f8ae 	bl	80049a2 <SDMMC_CmdGoIdleState>
 8003846:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <SD_PowerON+0x2a>
  {
    return errorstate;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	e072      	b.n	8003938 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f001 f8c1 	bl	80049de <SDMMC_CmdOperCond>
 800385c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00d      	beq.n	8003880 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f001 f897 	bl	80049a2 <SDMMC_CmdGoIdleState>
 8003874:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <SD_PowerON+0x5e>
    {
      return errorstate;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	e05b      	b.n	8003938 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388a:	2b01      	cmp	r3, #1
 800388c:	d137      	bne.n	80038fe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f001 f8c1 	bl	8004a1c <SDMMC_CmdAppCommand>
 800389a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d02d      	beq.n	80038fe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80038a6:	e047      	b.n	8003938 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2100      	movs	r1, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 f8b4 	bl	8004a1c <SDMMC_CmdAppCommand>
 80038b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <SD_PowerON+0x98>
    {
      return errorstate;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	e03b      	b.n	8003938 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	491e      	ldr	r1, [pc, #120]	; (8003940 <SD_PowerON+0x118>)
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 f8ca 	bl	8004a60 <SDMMC_CmdAppOperCommand>
 80038cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80038d8:	e02e      	b.n	8003938 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 f828 	bl	8004936 <SDIO_GetResponse>
 80038e6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	0fdb      	lsrs	r3, r3, #31
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <SD_PowerON+0xcc>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <SD_PowerON+0xce>
 80038f4:	2300      	movs	r3, #0
 80038f6:	613b      	str	r3, [r7, #16]

    count++;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	3301      	adds	r3, #1
 80038fc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003904:	4293      	cmp	r3, r2
 8003906:	d802      	bhi.n	800390e <SD_PowerON+0xe6>
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0cc      	beq.n	80038a8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003914:	4293      	cmp	r3, r2
 8003916:	d902      	bls.n	800391e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800391c:	e00c      	b.n	8003938 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	645a      	str	r2, [r3, #68]	; 0x44
 800392e:	e002      	b.n	8003936 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	c1100000 	.word	0xc1100000

08003944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e056      	b.n	8003a04 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7fd fdff 	bl	8001574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2202      	movs	r2, #2
 800397a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800398c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	ea42 0103 	orr.w	r1, r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	0c1b      	lsrs	r3, r3, #16
 80039d4:	f003 0104 	and.w	r1, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e01d      	b.n	8003a5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f815 	bl	8003a62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f000 f9fa 	bl	8003e44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b085      	sub	sp, #20
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b06      	cmp	r3, #6
 8003a9e:	d007      	beq.n	8003ab0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e083      	b.n	8003bda <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fd fdf2 	bl	80016d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b02:	f023 0307 	bic.w	r3, r3, #7
 8003b06:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	4619      	mov	r1, r3
 8003b12:	4610      	mov	r0, r2
 8003b14:	f000 f996 	bl	8003e44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b40:	f023 0303 	bic.w	r3, r3, #3
 8003b44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	021b      	lsls	r3, r3, #8
 8003b50:	4313      	orrs	r3, r2
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b5e:	f023 030c 	bic.w	r3, r3, #12
 8003b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	021b      	lsls	r3, r3, #8
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	011a      	lsls	r2, r3, #4
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	031b      	lsls	r3, r3, #12
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003b9c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003ba4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d122      	bne.n	8003c3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d11b      	bne.n	8003c3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f06f 0202 	mvn.w	r2, #2
 8003c0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f8ee 	bl	8003e06 <HAL_TIM_IC_CaptureCallback>
 8003c2a:	e005      	b.n	8003c38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f8e0 	bl	8003df2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8f1 	bl	8003e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d122      	bne.n	8003c92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d11b      	bne.n	8003c92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f06f 0204 	mvn.w	r2, #4
 8003c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f8c4 	bl	8003e06 <HAL_TIM_IC_CaptureCallback>
 8003c7e:	e005      	b.n	8003c8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f8b6 	bl	8003df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f8c7 	bl	8003e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d122      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d11b      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f06f 0208 	mvn.w	r2, #8
 8003cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2204      	movs	r2, #4
 8003cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f89a 	bl	8003e06 <HAL_TIM_IC_CaptureCallback>
 8003cd2:	e005      	b.n	8003ce0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f88c 	bl	8003df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f89d 	bl	8003e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d122      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f003 0310 	and.w	r3, r3, #16
 8003cfe:	2b10      	cmp	r3, #16
 8003d00:	d11b      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f06f 0210 	mvn.w	r2, #16
 8003d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2208      	movs	r2, #8
 8003d10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f870 	bl	8003e06 <HAL_TIM_IC_CaptureCallback>
 8003d26:	e005      	b.n	8003d34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f862 	bl	8003df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f873 	bl	8003e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d10e      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d107      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f06f 0201 	mvn.w	r2, #1
 8003d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7fd fb27 	bl	80013b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	d10e      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	2b80      	cmp	r3, #128	; 0x80
 8003d80:	d107      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f97f 	bl	8004090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d10e      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d107      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f838 	bl	8003e2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d10e      	bne.n	8003dea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d107      	bne.n	8003dea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f06f 0220 	mvn.w	r2, #32
 8003de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f949 	bl	800407c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a40      	ldr	r2, [pc, #256]	; (8003f58 <TIM_Base_SetConfig+0x114>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d013      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e62:	d00f      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3d      	ldr	r2, [pc, #244]	; (8003f5c <TIM_Base_SetConfig+0x118>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00b      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a3c      	ldr	r2, [pc, #240]	; (8003f60 <TIM_Base_SetConfig+0x11c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d007      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a3b      	ldr	r2, [pc, #236]	; (8003f64 <TIM_Base_SetConfig+0x120>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a3a      	ldr	r2, [pc, #232]	; (8003f68 <TIM_Base_SetConfig+0x124>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d108      	bne.n	8003e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2f      	ldr	r2, [pc, #188]	; (8003f58 <TIM_Base_SetConfig+0x114>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d02b      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d027      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a2c      	ldr	r2, [pc, #176]	; (8003f5c <TIM_Base_SetConfig+0x118>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d023      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a2b      	ldr	r2, [pc, #172]	; (8003f60 <TIM_Base_SetConfig+0x11c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d01f      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <TIM_Base_SetConfig+0x120>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d01b      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a29      	ldr	r2, [pc, #164]	; (8003f68 <TIM_Base_SetConfig+0x124>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d017      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a28      	ldr	r2, [pc, #160]	; (8003f6c <TIM_Base_SetConfig+0x128>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d013      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a27      	ldr	r2, [pc, #156]	; (8003f70 <TIM_Base_SetConfig+0x12c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00f      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <TIM_Base_SetConfig+0x130>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00b      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a25      	ldr	r2, [pc, #148]	; (8003f78 <TIM_Base_SetConfig+0x134>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d007      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a24      	ldr	r2, [pc, #144]	; (8003f7c <TIM_Base_SetConfig+0x138>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a23      	ldr	r2, [pc, #140]	; (8003f80 <TIM_Base_SetConfig+0x13c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d108      	bne.n	8003f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a0a      	ldr	r2, [pc, #40]	; (8003f58 <TIM_Base_SetConfig+0x114>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_Base_SetConfig+0xf8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a0c      	ldr	r2, [pc, #48]	; (8003f68 <TIM_Base_SetConfig+0x124>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d103      	bne.n	8003f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	615a      	str	r2, [r3, #20]
}
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40010000 	.word	0x40010000
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40000800 	.word	0x40000800
 8003f64:	40000c00 	.word	0x40000c00
 8003f68:	40010400 	.word	0x40010400
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800
 8003f78:	40001800 	.word	0x40001800
 8003f7c:	40001c00 	.word	0x40001c00
 8003f80:	40002000 	.word	0x40002000

08003f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e05a      	b.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a21      	ldr	r2, [pc, #132]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d022      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe8:	d01d      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d018      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1b      	ldr	r2, [pc, #108]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1a      	ldr	r2, [pc, #104]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00e      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a18      	ldr	r2, [pc, #96]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d009      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a17      	ldr	r2, [pc, #92]	; (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d004      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a15      	ldr	r2, [pc, #84]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d10c      	bne.n	8004040 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800402c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	4313      	orrs	r3, r2
 8004036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40010000 	.word	0x40010000
 8004064:	40000400 	.word	0x40000400
 8004068:	40000800 	.word	0x40000800
 800406c:	40000c00 	.word	0x40000c00
 8004070:	40010400 	.word	0x40010400
 8004074:	40014000 	.word	0x40014000
 8004078:	40001800 	.word	0x40001800

0800407c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e03f      	b.n	8004136 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fd fb46 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2224      	movs	r2, #36	; 0x24
 80040d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f829 	bl	8004140 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800410c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800411c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004144:	b085      	sub	sp, #20
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004182:	f023 030c 	bic.w	r3, r3, #12
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6812      	ldr	r2, [r2, #0]
 800418a:	68f9      	ldr	r1, [r7, #12]
 800418c:	430b      	orrs	r3, r1
 800418e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ae:	f040 818b 	bne.w	80044c8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4ac1      	ldr	r2, [pc, #772]	; (80044bc <UART_SetConfig+0x37c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d005      	beq.n	80041c8 <UART_SetConfig+0x88>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4abf      	ldr	r2, [pc, #764]	; (80044c0 <UART_SetConfig+0x380>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	f040 80bd 	bne.w	8004342 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041c8:	f7fd ffdc 	bl	8002184 <HAL_RCC_GetPCLK2Freq>
 80041cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	461d      	mov	r5, r3
 80041d2:	f04f 0600 	mov.w	r6, #0
 80041d6:	46a8      	mov	r8, r5
 80041d8:	46b1      	mov	r9, r6
 80041da:	eb18 0308 	adds.w	r3, r8, r8
 80041de:	eb49 0409 	adc.w	r4, r9, r9
 80041e2:	4698      	mov	r8, r3
 80041e4:	46a1      	mov	r9, r4
 80041e6:	eb18 0805 	adds.w	r8, r8, r5
 80041ea:	eb49 0906 	adc.w	r9, r9, r6
 80041ee:	f04f 0100 	mov.w	r1, #0
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004202:	4688      	mov	r8, r1
 8004204:	4691      	mov	r9, r2
 8004206:	eb18 0005 	adds.w	r0, r8, r5
 800420a:	eb49 0106 	adc.w	r1, r9, r6
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	461d      	mov	r5, r3
 8004214:	f04f 0600 	mov.w	r6, #0
 8004218:	196b      	adds	r3, r5, r5
 800421a:	eb46 0406 	adc.w	r4, r6, r6
 800421e:	461a      	mov	r2, r3
 8004220:	4623      	mov	r3, r4
 8004222:	f7fc fc8d 	bl	8000b40 <__aeabi_uldivmod>
 8004226:	4603      	mov	r3, r0
 8004228:	460c      	mov	r4, r1
 800422a:	461a      	mov	r2, r3
 800422c:	4ba5      	ldr	r3, [pc, #660]	; (80044c4 <UART_SetConfig+0x384>)
 800422e:	fba3 2302 	umull	r2, r3, r3, r2
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	461d      	mov	r5, r3
 800423c:	f04f 0600 	mov.w	r6, #0
 8004240:	46a9      	mov	r9, r5
 8004242:	46b2      	mov	sl, r6
 8004244:	eb19 0309 	adds.w	r3, r9, r9
 8004248:	eb4a 040a 	adc.w	r4, sl, sl
 800424c:	4699      	mov	r9, r3
 800424e:	46a2      	mov	sl, r4
 8004250:	eb19 0905 	adds.w	r9, r9, r5
 8004254:	eb4a 0a06 	adc.w	sl, sl, r6
 8004258:	f04f 0100 	mov.w	r1, #0
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004264:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004268:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800426c:	4689      	mov	r9, r1
 800426e:	4692      	mov	sl, r2
 8004270:	eb19 0005 	adds.w	r0, r9, r5
 8004274:	eb4a 0106 	adc.w	r1, sl, r6
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	461d      	mov	r5, r3
 800427e:	f04f 0600 	mov.w	r6, #0
 8004282:	196b      	adds	r3, r5, r5
 8004284:	eb46 0406 	adc.w	r4, r6, r6
 8004288:	461a      	mov	r2, r3
 800428a:	4623      	mov	r3, r4
 800428c:	f7fc fc58 	bl	8000b40 <__aeabi_uldivmod>
 8004290:	4603      	mov	r3, r0
 8004292:	460c      	mov	r4, r1
 8004294:	461a      	mov	r2, r3
 8004296:	4b8b      	ldr	r3, [pc, #556]	; (80044c4 <UART_SetConfig+0x384>)
 8004298:	fba3 1302 	umull	r1, r3, r3, r2
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	2164      	movs	r1, #100	; 0x64
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	3332      	adds	r3, #50	; 0x32
 80042aa:	4a86      	ldr	r2, [pc, #536]	; (80044c4 <UART_SetConfig+0x384>)
 80042ac:	fba2 2303 	umull	r2, r3, r2, r3
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042b8:	4498      	add	r8, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	461d      	mov	r5, r3
 80042be:	f04f 0600 	mov.w	r6, #0
 80042c2:	46a9      	mov	r9, r5
 80042c4:	46b2      	mov	sl, r6
 80042c6:	eb19 0309 	adds.w	r3, r9, r9
 80042ca:	eb4a 040a 	adc.w	r4, sl, sl
 80042ce:	4699      	mov	r9, r3
 80042d0:	46a2      	mov	sl, r4
 80042d2:	eb19 0905 	adds.w	r9, r9, r5
 80042d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80042da:	f04f 0100 	mov.w	r1, #0
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042ee:	4689      	mov	r9, r1
 80042f0:	4692      	mov	sl, r2
 80042f2:	eb19 0005 	adds.w	r0, r9, r5
 80042f6:	eb4a 0106 	adc.w	r1, sl, r6
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	461d      	mov	r5, r3
 8004300:	f04f 0600 	mov.w	r6, #0
 8004304:	196b      	adds	r3, r5, r5
 8004306:	eb46 0406 	adc.w	r4, r6, r6
 800430a:	461a      	mov	r2, r3
 800430c:	4623      	mov	r3, r4
 800430e:	f7fc fc17 	bl	8000b40 <__aeabi_uldivmod>
 8004312:	4603      	mov	r3, r0
 8004314:	460c      	mov	r4, r1
 8004316:	461a      	mov	r2, r3
 8004318:	4b6a      	ldr	r3, [pc, #424]	; (80044c4 <UART_SetConfig+0x384>)
 800431a:	fba3 1302 	umull	r1, r3, r3, r2
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	2164      	movs	r1, #100	; 0x64
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	3332      	adds	r3, #50	; 0x32
 800432c:	4a65      	ldr	r2, [pc, #404]	; (80044c4 <UART_SetConfig+0x384>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	f003 0207 	and.w	r2, r3, #7
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4442      	add	r2, r8
 800433e:	609a      	str	r2, [r3, #8]
 8004340:	e26f      	b.n	8004822 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004342:	f7fd ff0b 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8004346:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	461d      	mov	r5, r3
 800434c:	f04f 0600 	mov.w	r6, #0
 8004350:	46a8      	mov	r8, r5
 8004352:	46b1      	mov	r9, r6
 8004354:	eb18 0308 	adds.w	r3, r8, r8
 8004358:	eb49 0409 	adc.w	r4, r9, r9
 800435c:	4698      	mov	r8, r3
 800435e:	46a1      	mov	r9, r4
 8004360:	eb18 0805 	adds.w	r8, r8, r5
 8004364:	eb49 0906 	adc.w	r9, r9, r6
 8004368:	f04f 0100 	mov.w	r1, #0
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004374:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004378:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800437c:	4688      	mov	r8, r1
 800437e:	4691      	mov	r9, r2
 8004380:	eb18 0005 	adds.w	r0, r8, r5
 8004384:	eb49 0106 	adc.w	r1, r9, r6
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	461d      	mov	r5, r3
 800438e:	f04f 0600 	mov.w	r6, #0
 8004392:	196b      	adds	r3, r5, r5
 8004394:	eb46 0406 	adc.w	r4, r6, r6
 8004398:	461a      	mov	r2, r3
 800439a:	4623      	mov	r3, r4
 800439c:	f7fc fbd0 	bl	8000b40 <__aeabi_uldivmod>
 80043a0:	4603      	mov	r3, r0
 80043a2:	460c      	mov	r4, r1
 80043a4:	461a      	mov	r2, r3
 80043a6:	4b47      	ldr	r3, [pc, #284]	; (80044c4 <UART_SetConfig+0x384>)
 80043a8:	fba3 2302 	umull	r2, r3, r3, r2
 80043ac:	095b      	lsrs	r3, r3, #5
 80043ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	461d      	mov	r5, r3
 80043b6:	f04f 0600 	mov.w	r6, #0
 80043ba:	46a9      	mov	r9, r5
 80043bc:	46b2      	mov	sl, r6
 80043be:	eb19 0309 	adds.w	r3, r9, r9
 80043c2:	eb4a 040a 	adc.w	r4, sl, sl
 80043c6:	4699      	mov	r9, r3
 80043c8:	46a2      	mov	sl, r4
 80043ca:	eb19 0905 	adds.w	r9, r9, r5
 80043ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80043d2:	f04f 0100 	mov.w	r1, #0
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043e6:	4689      	mov	r9, r1
 80043e8:	4692      	mov	sl, r2
 80043ea:	eb19 0005 	adds.w	r0, r9, r5
 80043ee:	eb4a 0106 	adc.w	r1, sl, r6
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	461d      	mov	r5, r3
 80043f8:	f04f 0600 	mov.w	r6, #0
 80043fc:	196b      	adds	r3, r5, r5
 80043fe:	eb46 0406 	adc.w	r4, r6, r6
 8004402:	461a      	mov	r2, r3
 8004404:	4623      	mov	r3, r4
 8004406:	f7fc fb9b 	bl	8000b40 <__aeabi_uldivmod>
 800440a:	4603      	mov	r3, r0
 800440c:	460c      	mov	r4, r1
 800440e:	461a      	mov	r2, r3
 8004410:	4b2c      	ldr	r3, [pc, #176]	; (80044c4 <UART_SetConfig+0x384>)
 8004412:	fba3 1302 	umull	r1, r3, r3, r2
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	2164      	movs	r1, #100	; 0x64
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	3332      	adds	r3, #50	; 0x32
 8004424:	4a27      	ldr	r2, [pc, #156]	; (80044c4 <UART_SetConfig+0x384>)
 8004426:	fba2 2303 	umull	r2, r3, r2, r3
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004432:	4498      	add	r8, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	461d      	mov	r5, r3
 8004438:	f04f 0600 	mov.w	r6, #0
 800443c:	46a9      	mov	r9, r5
 800443e:	46b2      	mov	sl, r6
 8004440:	eb19 0309 	adds.w	r3, r9, r9
 8004444:	eb4a 040a 	adc.w	r4, sl, sl
 8004448:	4699      	mov	r9, r3
 800444a:	46a2      	mov	sl, r4
 800444c:	eb19 0905 	adds.w	r9, r9, r5
 8004450:	eb4a 0a06 	adc.w	sl, sl, r6
 8004454:	f04f 0100 	mov.w	r1, #0
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004460:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004464:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004468:	4689      	mov	r9, r1
 800446a:	4692      	mov	sl, r2
 800446c:	eb19 0005 	adds.w	r0, r9, r5
 8004470:	eb4a 0106 	adc.w	r1, sl, r6
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	461d      	mov	r5, r3
 800447a:	f04f 0600 	mov.w	r6, #0
 800447e:	196b      	adds	r3, r5, r5
 8004480:	eb46 0406 	adc.w	r4, r6, r6
 8004484:	461a      	mov	r2, r3
 8004486:	4623      	mov	r3, r4
 8004488:	f7fc fb5a 	bl	8000b40 <__aeabi_uldivmod>
 800448c:	4603      	mov	r3, r0
 800448e:	460c      	mov	r4, r1
 8004490:	461a      	mov	r2, r3
 8004492:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <UART_SetConfig+0x384>)
 8004494:	fba3 1302 	umull	r1, r3, r3, r2
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	2164      	movs	r1, #100	; 0x64
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	3332      	adds	r3, #50	; 0x32
 80044a6:	4a07      	ldr	r2, [pc, #28]	; (80044c4 <UART_SetConfig+0x384>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	f003 0207 	and.w	r2, r3, #7
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4442      	add	r2, r8
 80044b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80044ba:	e1b2      	b.n	8004822 <UART_SetConfig+0x6e2>
 80044bc:	40011000 	.word	0x40011000
 80044c0:	40011400 	.word	0x40011400
 80044c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4ad7      	ldr	r2, [pc, #860]	; (800482c <UART_SetConfig+0x6ec>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d005      	beq.n	80044de <UART_SetConfig+0x39e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4ad6      	ldr	r2, [pc, #856]	; (8004830 <UART_SetConfig+0x6f0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	f040 80d1 	bne.w	8004680 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80044de:	f7fd fe51 	bl	8002184 <HAL_RCC_GetPCLK2Freq>
 80044e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	469a      	mov	sl, r3
 80044e8:	f04f 0b00 	mov.w	fp, #0
 80044ec:	46d0      	mov	r8, sl
 80044ee:	46d9      	mov	r9, fp
 80044f0:	eb18 0308 	adds.w	r3, r8, r8
 80044f4:	eb49 0409 	adc.w	r4, r9, r9
 80044f8:	4698      	mov	r8, r3
 80044fa:	46a1      	mov	r9, r4
 80044fc:	eb18 080a 	adds.w	r8, r8, sl
 8004500:	eb49 090b 	adc.w	r9, r9, fp
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004510:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004514:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004518:	4688      	mov	r8, r1
 800451a:	4691      	mov	r9, r2
 800451c:	eb1a 0508 	adds.w	r5, sl, r8
 8004520:	eb4b 0609 	adc.w	r6, fp, r9
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	4619      	mov	r1, r3
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	f04f 0400 	mov.w	r4, #0
 8004536:	0094      	lsls	r4, r2, #2
 8004538:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800453c:	008b      	lsls	r3, r1, #2
 800453e:	461a      	mov	r2, r3
 8004540:	4623      	mov	r3, r4
 8004542:	4628      	mov	r0, r5
 8004544:	4631      	mov	r1, r6
 8004546:	f7fc fafb 	bl	8000b40 <__aeabi_uldivmod>
 800454a:	4603      	mov	r3, r0
 800454c:	460c      	mov	r4, r1
 800454e:	461a      	mov	r2, r3
 8004550:	4bb8      	ldr	r3, [pc, #736]	; (8004834 <UART_SetConfig+0x6f4>)
 8004552:	fba3 2302 	umull	r2, r3, r3, r2
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	469b      	mov	fp, r3
 8004560:	f04f 0c00 	mov.w	ip, #0
 8004564:	46d9      	mov	r9, fp
 8004566:	46e2      	mov	sl, ip
 8004568:	eb19 0309 	adds.w	r3, r9, r9
 800456c:	eb4a 040a 	adc.w	r4, sl, sl
 8004570:	4699      	mov	r9, r3
 8004572:	46a2      	mov	sl, r4
 8004574:	eb19 090b 	adds.w	r9, r9, fp
 8004578:	eb4a 0a0c 	adc.w	sl, sl, ip
 800457c:	f04f 0100 	mov.w	r1, #0
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004588:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800458c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004590:	4689      	mov	r9, r1
 8004592:	4692      	mov	sl, r2
 8004594:	eb1b 0509 	adds.w	r5, fp, r9
 8004598:	eb4c 060a 	adc.w	r6, ip, sl
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4619      	mov	r1, r3
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	f04f 0400 	mov.w	r4, #0
 80045ae:	0094      	lsls	r4, r2, #2
 80045b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045b4:	008b      	lsls	r3, r1, #2
 80045b6:	461a      	mov	r2, r3
 80045b8:	4623      	mov	r3, r4
 80045ba:	4628      	mov	r0, r5
 80045bc:	4631      	mov	r1, r6
 80045be:	f7fc fabf 	bl	8000b40 <__aeabi_uldivmod>
 80045c2:	4603      	mov	r3, r0
 80045c4:	460c      	mov	r4, r1
 80045c6:	461a      	mov	r2, r3
 80045c8:	4b9a      	ldr	r3, [pc, #616]	; (8004834 <UART_SetConfig+0x6f4>)
 80045ca:	fba3 1302 	umull	r1, r3, r3, r2
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	2164      	movs	r1, #100	; 0x64
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	3332      	adds	r3, #50	; 0x32
 80045dc:	4a95      	ldr	r2, [pc, #596]	; (8004834 <UART_SetConfig+0x6f4>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e8:	4498      	add	r8, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	469b      	mov	fp, r3
 80045ee:	f04f 0c00 	mov.w	ip, #0
 80045f2:	46d9      	mov	r9, fp
 80045f4:	46e2      	mov	sl, ip
 80045f6:	eb19 0309 	adds.w	r3, r9, r9
 80045fa:	eb4a 040a 	adc.w	r4, sl, sl
 80045fe:	4699      	mov	r9, r3
 8004600:	46a2      	mov	sl, r4
 8004602:	eb19 090b 	adds.w	r9, r9, fp
 8004606:	eb4a 0a0c 	adc.w	sl, sl, ip
 800460a:	f04f 0100 	mov.w	r1, #0
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004616:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800461a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800461e:	4689      	mov	r9, r1
 8004620:	4692      	mov	sl, r2
 8004622:	eb1b 0509 	adds.w	r5, fp, r9
 8004626:	eb4c 060a 	adc.w	r6, ip, sl
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4619      	mov	r1, r3
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	f04f 0400 	mov.w	r4, #0
 800463c:	0094      	lsls	r4, r2, #2
 800463e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004642:	008b      	lsls	r3, r1, #2
 8004644:	461a      	mov	r2, r3
 8004646:	4623      	mov	r3, r4
 8004648:	4628      	mov	r0, r5
 800464a:	4631      	mov	r1, r6
 800464c:	f7fc fa78 	bl	8000b40 <__aeabi_uldivmod>
 8004650:	4603      	mov	r3, r0
 8004652:	460c      	mov	r4, r1
 8004654:	461a      	mov	r2, r3
 8004656:	4b77      	ldr	r3, [pc, #476]	; (8004834 <UART_SetConfig+0x6f4>)
 8004658:	fba3 1302 	umull	r1, r3, r3, r2
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	2164      	movs	r1, #100	; 0x64
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	3332      	adds	r3, #50	; 0x32
 800466a:	4a72      	ldr	r2, [pc, #456]	; (8004834 <UART_SetConfig+0x6f4>)
 800466c:	fba2 2303 	umull	r2, r3, r2, r3
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	f003 020f 	and.w	r2, r3, #15
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4442      	add	r2, r8
 800467c:	609a      	str	r2, [r3, #8]
 800467e:	e0d0      	b.n	8004822 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004680:	f7fd fd6c 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8004684:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	469a      	mov	sl, r3
 800468a:	f04f 0b00 	mov.w	fp, #0
 800468e:	46d0      	mov	r8, sl
 8004690:	46d9      	mov	r9, fp
 8004692:	eb18 0308 	adds.w	r3, r8, r8
 8004696:	eb49 0409 	adc.w	r4, r9, r9
 800469a:	4698      	mov	r8, r3
 800469c:	46a1      	mov	r9, r4
 800469e:	eb18 080a 	adds.w	r8, r8, sl
 80046a2:	eb49 090b 	adc.w	r9, r9, fp
 80046a6:	f04f 0100 	mov.w	r1, #0
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046ba:	4688      	mov	r8, r1
 80046bc:	4691      	mov	r9, r2
 80046be:	eb1a 0508 	adds.w	r5, sl, r8
 80046c2:	eb4b 0609 	adc.w	r6, fp, r9
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4619      	mov	r1, r3
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	f04f 0400 	mov.w	r4, #0
 80046d8:	0094      	lsls	r4, r2, #2
 80046da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046de:	008b      	lsls	r3, r1, #2
 80046e0:	461a      	mov	r2, r3
 80046e2:	4623      	mov	r3, r4
 80046e4:	4628      	mov	r0, r5
 80046e6:	4631      	mov	r1, r6
 80046e8:	f7fc fa2a 	bl	8000b40 <__aeabi_uldivmod>
 80046ec:	4603      	mov	r3, r0
 80046ee:	460c      	mov	r4, r1
 80046f0:	461a      	mov	r2, r3
 80046f2:	4b50      	ldr	r3, [pc, #320]	; (8004834 <UART_SetConfig+0x6f4>)
 80046f4:	fba3 2302 	umull	r2, r3, r3, r2
 80046f8:	095b      	lsrs	r3, r3, #5
 80046fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	469b      	mov	fp, r3
 8004702:	f04f 0c00 	mov.w	ip, #0
 8004706:	46d9      	mov	r9, fp
 8004708:	46e2      	mov	sl, ip
 800470a:	eb19 0309 	adds.w	r3, r9, r9
 800470e:	eb4a 040a 	adc.w	r4, sl, sl
 8004712:	4699      	mov	r9, r3
 8004714:	46a2      	mov	sl, r4
 8004716:	eb19 090b 	adds.w	r9, r9, fp
 800471a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800471e:	f04f 0100 	mov.w	r1, #0
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800472a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800472e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004732:	4689      	mov	r9, r1
 8004734:	4692      	mov	sl, r2
 8004736:	eb1b 0509 	adds.w	r5, fp, r9
 800473a:	eb4c 060a 	adc.w	r6, ip, sl
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	4619      	mov	r1, r3
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	f04f 0400 	mov.w	r4, #0
 8004750:	0094      	lsls	r4, r2, #2
 8004752:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004756:	008b      	lsls	r3, r1, #2
 8004758:	461a      	mov	r2, r3
 800475a:	4623      	mov	r3, r4
 800475c:	4628      	mov	r0, r5
 800475e:	4631      	mov	r1, r6
 8004760:	f7fc f9ee 	bl	8000b40 <__aeabi_uldivmod>
 8004764:	4603      	mov	r3, r0
 8004766:	460c      	mov	r4, r1
 8004768:	461a      	mov	r2, r3
 800476a:	4b32      	ldr	r3, [pc, #200]	; (8004834 <UART_SetConfig+0x6f4>)
 800476c:	fba3 1302 	umull	r1, r3, r3, r2
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	2164      	movs	r1, #100	; 0x64
 8004774:	fb01 f303 	mul.w	r3, r1, r3
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	3332      	adds	r3, #50	; 0x32
 800477e:	4a2d      	ldr	r2, [pc, #180]	; (8004834 <UART_SetConfig+0x6f4>)
 8004780:	fba2 2303 	umull	r2, r3, r2, r3
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800478a:	4498      	add	r8, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	469b      	mov	fp, r3
 8004790:	f04f 0c00 	mov.w	ip, #0
 8004794:	46d9      	mov	r9, fp
 8004796:	46e2      	mov	sl, ip
 8004798:	eb19 0309 	adds.w	r3, r9, r9
 800479c:	eb4a 040a 	adc.w	r4, sl, sl
 80047a0:	4699      	mov	r9, r3
 80047a2:	46a2      	mov	sl, r4
 80047a4:	eb19 090b 	adds.w	r9, r9, fp
 80047a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047ac:	f04f 0100 	mov.w	r1, #0
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047c0:	4689      	mov	r9, r1
 80047c2:	4692      	mov	sl, r2
 80047c4:	eb1b 0509 	adds.w	r5, fp, r9
 80047c8:	eb4c 060a 	adc.w	r6, ip, sl
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	4619      	mov	r1, r3
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	f04f 0400 	mov.w	r4, #0
 80047de:	0094      	lsls	r4, r2, #2
 80047e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047e4:	008b      	lsls	r3, r1, #2
 80047e6:	461a      	mov	r2, r3
 80047e8:	4623      	mov	r3, r4
 80047ea:	4628      	mov	r0, r5
 80047ec:	4631      	mov	r1, r6
 80047ee:	f7fc f9a7 	bl	8000b40 <__aeabi_uldivmod>
 80047f2:	4603      	mov	r3, r0
 80047f4:	460c      	mov	r4, r1
 80047f6:	461a      	mov	r2, r3
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <UART_SetConfig+0x6f4>)
 80047fa:	fba3 1302 	umull	r1, r3, r3, r2
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	2164      	movs	r1, #100	; 0x64
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	3332      	adds	r3, #50	; 0x32
 800480c:	4a09      	ldr	r2, [pc, #36]	; (8004834 <UART_SetConfig+0x6f4>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	f003 020f 	and.w	r2, r3, #15
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4442      	add	r2, r8
 800481e:	609a      	str	r2, [r3, #8]
}
 8004820:	e7ff      	b.n	8004822 <UART_SetConfig+0x6e2>
 8004822:	bf00      	nop
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482c:	40011000 	.word	0x40011000
 8004830:	40011400 	.word	0x40011400
 8004834:	51eb851f 	.word	0x51eb851f

08004838 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004838:	b084      	sub	sp, #16
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	f107 001c 	add.w	r0, r7, #28
 8004846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800484e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004850:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004852:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004856:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800485a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800485c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800485e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004862:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004872:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	b004      	add	sp, #16
 800488c:	4770      	bx	lr

0800488e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800488e:	b580      	push	{r7, lr}
 8004890:	b082      	sub	sp, #8
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2203      	movs	r2, #3
 800489a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800489c:	2002      	movs	r0, #2
 800489e:	f7fd f8bb 	bl	8001a18 <HAL_Delay>
  
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0303 	and.w	r3, r3, #3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80048e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80048ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80048f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004902:	f023 030f 	bic.w	r3, r3, #15
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	b2db      	uxtb	r3, r3
}
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3314      	adds	r3, #20
 8004944:	461a      	mov	r2, r3
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	4413      	add	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
}  
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	; 0x28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800496c:	2307      	movs	r3, #7
 800496e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004970:	2340      	movs	r3, #64	; 0x40
 8004972:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004974:	2300      	movs	r3, #0
 8004976:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800497c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800497e:	f107 0310 	add.w	r3, r7, #16
 8004982:	4619      	mov	r1, r3
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7ff ff9f 	bl	80048c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800498a:	f241 3288 	movw	r2, #5000	; 0x1388
 800498e:	2107      	movs	r1, #7
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f90f 	bl	8004bb4 <SDMMC_GetCmdResp1>
 8004996:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800499a:	4618      	mov	r0, r3
 800499c:	3728      	adds	r7, #40	; 0x28
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b088      	sub	sp, #32
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80049b2:	2300      	movs	r3, #0
 80049b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049c0:	f107 0308 	add.w	r3, r7, #8
 80049c4:	4619      	mov	r1, r3
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff ff7e 	bl	80048c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f8c9 	bl	8004b64 <SDMMC_GetCmdError>
 80049d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049d4:	69fb      	ldr	r3, [r7, #28]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3720      	adds	r7, #32
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b088      	sub	sp, #32
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80049e6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80049ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80049ec:	2308      	movs	r3, #8
 80049ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049f0:	2340      	movs	r3, #64	; 0x40
 80049f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049fe:	f107 0308 	add.w	r3, r7, #8
 8004a02:	4619      	mov	r1, r3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7ff ff5f 	bl	80048c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fab2 	bl	8004f74 <SDMMC_GetCmdResp7>
 8004a10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a12:	69fb      	ldr	r3, [r7, #28]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3720      	adds	r7, #32
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004a2a:	2337      	movs	r3, #55	; 0x37
 8004a2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a2e:	2340      	movs	r3, #64	; 0x40
 8004a30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a3c:	f107 0308 	add.w	r3, r7, #8
 8004a40:	4619      	mov	r1, r3
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7ff ff40 	bl	80048c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4c:	2137      	movs	r1, #55	; 0x37
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f8b0 	bl	8004bb4 <SDMMC_GetCmdResp1>
 8004a54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a56:	69fb      	ldr	r3, [r7, #28]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004a76:	2329      	movs	r3, #41	; 0x29
 8004a78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a7a:	2340      	movs	r3, #64	; 0x40
 8004a7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a88:	f107 0308 	add.w	r3, r7, #8
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff ff1a 	bl	80048c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f9bf 	bl	8004e18 <SDMMC_GetCmdResp3>
 8004a9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a9c:	69fb      	ldr	r3, [r7, #28]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b088      	sub	sp, #32
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004ab6:	23c0      	movs	r3, #192	; 0xc0
 8004ab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ac4:	f107 0308 	add.w	r3, r7, #8
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff fefc 	bl	80048c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f95b 	bl	8004d8c <SDMMC_GetCmdResp2>
 8004ad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b088      	sub	sp, #32
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004af0:	2309      	movs	r3, #9
 8004af2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004af4:	23c0      	movs	r3, #192	; 0xc0
 8004af6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b02:	f107 0308 	add.w	r3, r7, #8
 8004b06:	4619      	mov	r1, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fedd 	bl	80048c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f93c 	bl	8004d8c <SDMMC_GetCmdResp2>
 8004b14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b16:	69fb      	ldr	r3, [r7, #28]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3720      	adds	r7, #32
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b32:	2340      	movs	r3, #64	; 0x40
 8004b34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b40:	f107 0308 	add.w	r3, r7, #8
 8004b44:	4619      	mov	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff febe 	bl	80048c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	2103      	movs	r1, #3
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f99b 	bl	8004e8c <SDMMC_GetCmdResp6>
 8004b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b58:	69fb      	ldr	r3, [r7, #28]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3720      	adds	r7, #32
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004b64:	b490      	push	{r4, r7}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <SDMMC_GetCmdError+0x48>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a0f      	ldr	r2, [pc, #60]	; (8004bb0 <SDMMC_GetCmdError+0x4c>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	0a5b      	lsrs	r3, r3, #9
 8004b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004b80:	4623      	mov	r3, r4
 8004b82:	1e5c      	subs	r4, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d102      	bne.n	8004b8e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b8c:	e009      	b.n	8004ba2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f2      	beq.n	8004b80 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	22c5      	movs	r2, #197	; 0xc5
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc90      	pop	{r4, r7}
 8004baa:	4770      	bx	lr
 8004bac:	20000000 	.word	0x20000000
 8004bb0:	10624dd3 	.word	0x10624dd3

08004bb4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004bc2:	4b6f      	ldr	r3, [pc, #444]	; (8004d80 <SDMMC_GetCmdResp1+0x1cc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a6f      	ldr	r2, [pc, #444]	; (8004d84 <SDMMC_GetCmdResp1+0x1d0>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	0a5b      	lsrs	r3, r3, #9
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004bd4:	4623      	mov	r3, r4
 8004bd6:	1e5c      	subs	r4, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d102      	bne.n	8004be2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004bdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004be0:	e0c9      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <SDMMC_GetCmdResp1+0x20>
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1eb      	bne.n	8004bd4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d004      	beq.n	8004c12 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2204      	movs	r2, #4
 8004c0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c0e:	2304      	movs	r3, #4
 8004c10:	e0b1      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d004      	beq.n	8004c28 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0a6      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	22c5      	movs	r2, #197	; 0xc5
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7ff fe74 	bl	800491c <SDIO_GetCommandResponse>
 8004c34:	4603      	mov	r3, r0
 8004c36:	461a      	mov	r2, r3
 8004c38:	7afb      	ldrb	r3, [r7, #11]
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d001      	beq.n	8004c42 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e099      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004c42:	2100      	movs	r1, #0
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f7ff fe76 	bl	8004936 <SDIO_GetResponse>
 8004c4a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4b4e      	ldr	r3, [pc, #312]	; (8004d88 <SDMMC_GetCmdResp1+0x1d4>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004c56:	2300      	movs	r3, #0
 8004c58:	e08d      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	da02      	bge.n	8004c66 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004c60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c64:	e087      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004c70:	2340      	movs	r3, #64	; 0x40
 8004c72:	e080      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004c7e:	2380      	movs	r3, #128	; 0x80
 8004c80:	e079      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c90:	e071      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ca0:	e069      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cb0:	e061      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004cbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cc0:	e059      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cd0:	e051      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ce0:	e049      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004cec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cf0:	e041      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d00:	e039      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d10:	e031      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004d1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d20:	e029      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004d2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004d30:	e021      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004d3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d40:	e019      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004d4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d50:	e011      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004d5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d60:	e009      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004d6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004d70:	e001      	b.n	8004d76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004d72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd90      	pop	{r4, r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20000000 	.word	0x20000000
 8004d84:	10624dd3 	.word	0x10624dd3
 8004d88:	fdffe008 	.word	0xfdffe008

08004d8c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004d8c:	b490      	push	{r4, r7}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d94:	4b1e      	ldr	r3, [pc, #120]	; (8004e10 <SDMMC_GetCmdResp2+0x84>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1e      	ldr	r2, [pc, #120]	; (8004e14 <SDMMC_GetCmdResp2+0x88>)
 8004d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9e:	0a5b      	lsrs	r3, r3, #9
 8004da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004da8:	4623      	mov	r3, r4
 8004daa:	1e5c      	subs	r4, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004db0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004db4:	e026      	b.n	8004e04 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0f0      	beq.n	8004da8 <SDMMC_GetCmdResp2+0x1c>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1eb      	bne.n	8004da8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d004      	beq.n	8004de6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2204      	movs	r2, #4
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004de2:	2304      	movs	r3, #4
 8004de4:	e00e      	b.n	8004e04 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d004      	beq.n	8004dfc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e003      	b.n	8004e04 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	22c5      	movs	r2, #197	; 0xc5
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bc90      	pop	{r4, r7}
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000000 	.word	0x20000000
 8004e14:	10624dd3 	.word	0x10624dd3

08004e18 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004e18:	b490      	push	{r4, r7}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e20:	4b18      	ldr	r3, [pc, #96]	; (8004e84 <SDMMC_GetCmdResp3+0x6c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <SDMMC_GetCmdResp3+0x70>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	0a5b      	lsrs	r3, r3, #9
 8004e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004e34:	4623      	mov	r3, r4
 8004e36:	1e5c      	subs	r4, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d102      	bne.n	8004e42 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e40:	e01b      	b.n	8004e7a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e46:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <SDMMC_GetCmdResp3+0x1c>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1eb      	bne.n	8004e34 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d004      	beq.n	8004e72 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2204      	movs	r2, #4
 8004e6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e6e:	2304      	movs	r3, #4
 8004e70:	e003      	b.n	8004e7a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	22c5      	movs	r2, #197	; 0xc5
 8004e76:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc90      	pop	{r4, r7}
 8004e82:	4770      	bx	lr
 8004e84:	20000000 	.word	0x20000000
 8004e88:	10624dd3 	.word	0x10624dd3

08004e8c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004e8c:	b590      	push	{r4, r7, lr}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	460b      	mov	r3, r1
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e9a:	4b34      	ldr	r3, [pc, #208]	; (8004f6c <SDMMC_GetCmdResp6+0xe0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a34      	ldr	r2, [pc, #208]	; (8004f70 <SDMMC_GetCmdResp6+0xe4>)
 8004ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea4:	0a5b      	lsrs	r3, r3, #9
 8004ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eaa:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004eae:	4623      	mov	r3, r4
 8004eb0:	1e5c      	subs	r4, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d102      	bne.n	8004ebc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004eb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004eba:	e052      	b.n	8004f62 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0f0      	beq.n	8004eae <SDMMC_GetCmdResp6+0x22>
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1eb      	bne.n	8004eae <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d004      	beq.n	8004eec <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2204      	movs	r2, #4
 8004ee6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ee8:	2304      	movs	r3, #4
 8004eea:	e03a      	b.n	8004f62 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d004      	beq.n	8004f02 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e02f      	b.n	8004f62 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f7ff fd0a 	bl	800491c <SDIO_GetCommandResponse>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	7afb      	ldrb	r3, [r7, #11]
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d001      	beq.n	8004f16 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e025      	b.n	8004f62 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	22c5      	movs	r2, #197	; 0xc5
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f7ff fd09 	bl	8004936 <SDIO_GetResponse>
 8004f24:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d106      	bne.n	8004f3e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	0c1b      	lsrs	r3, r3, #16
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e011      	b.n	8004f62 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f4c:	e009      	b.n	8004f62 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f5c:	e001      	b.n	8004f62 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd90      	pop	{r4, r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20000000 	.word	0x20000000
 8004f70:	10624dd3 	.word	0x10624dd3

08004f74 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004f74:	b490      	push	{r4, r7}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f7c:	4b21      	ldr	r3, [pc, #132]	; (8005004 <SDMMC_GetCmdResp7+0x90>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a21      	ldr	r2, [pc, #132]	; (8005008 <SDMMC_GetCmdResp7+0x94>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	0a5b      	lsrs	r3, r3, #9
 8004f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004f90:	4623      	mov	r3, r4
 8004f92:	1e5c      	subs	r4, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f9c:	e02c      	b.n	8004ff8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f0      	beq.n	8004f90 <SDMMC_GetCmdResp7+0x1c>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1eb      	bne.n	8004f90 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d004      	beq.n	8004fce <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2204      	movs	r2, #4
 8004fc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fca:	2304      	movs	r3, #4
 8004fcc:	e014      	b.n	8004ff8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d004      	beq.n	8004fe4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e009      	b.n	8004ff8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2240      	movs	r2, #64	; 0x40
 8004ff4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004ff6:	2300      	movs	r3, #0
  
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc90      	pop	{r4, r7}
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000000 	.word	0x20000000
 8005008:	10624dd3 	.word	0x10624dd3

0800500c <__libc_init_array>:
 800500c:	b570      	push	{r4, r5, r6, lr}
 800500e:	4e0d      	ldr	r6, [pc, #52]	; (8005044 <__libc_init_array+0x38>)
 8005010:	4c0d      	ldr	r4, [pc, #52]	; (8005048 <__libc_init_array+0x3c>)
 8005012:	1ba4      	subs	r4, r4, r6
 8005014:	10a4      	asrs	r4, r4, #2
 8005016:	2500      	movs	r5, #0
 8005018:	42a5      	cmp	r5, r4
 800501a:	d109      	bne.n	8005030 <__libc_init_array+0x24>
 800501c:	4e0b      	ldr	r6, [pc, #44]	; (800504c <__libc_init_array+0x40>)
 800501e:	4c0c      	ldr	r4, [pc, #48]	; (8005050 <__libc_init_array+0x44>)
 8005020:	f001 fd44 	bl	8006aac <_init>
 8005024:	1ba4      	subs	r4, r4, r6
 8005026:	10a4      	asrs	r4, r4, #2
 8005028:	2500      	movs	r5, #0
 800502a:	42a5      	cmp	r5, r4
 800502c:	d105      	bne.n	800503a <__libc_init_array+0x2e>
 800502e:	bd70      	pop	{r4, r5, r6, pc}
 8005030:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005034:	4798      	blx	r3
 8005036:	3501      	adds	r5, #1
 8005038:	e7ee      	b.n	8005018 <__libc_init_array+0xc>
 800503a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800503e:	4798      	blx	r3
 8005040:	3501      	adds	r5, #1
 8005042:	e7f2      	b.n	800502a <__libc_init_array+0x1e>
 8005044:	08006d10 	.word	0x08006d10
 8005048:	08006d10 	.word	0x08006d10
 800504c:	08006d10 	.word	0x08006d10
 8005050:	08006d14 	.word	0x08006d14

08005054 <malloc>:
 8005054:	4b02      	ldr	r3, [pc, #8]	; (8005060 <malloc+0xc>)
 8005056:	4601      	mov	r1, r0
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	f000 b819 	b.w	8005090 <_malloc_r>
 800505e:	bf00      	nop
 8005060:	2000000c 	.word	0x2000000c

08005064 <memset>:
 8005064:	4402      	add	r2, r0
 8005066:	4603      	mov	r3, r0
 8005068:	4293      	cmp	r3, r2
 800506a:	d100      	bne.n	800506e <memset+0xa>
 800506c:	4770      	bx	lr
 800506e:	f803 1b01 	strb.w	r1, [r3], #1
 8005072:	e7f9      	b.n	8005068 <memset+0x4>

08005074 <_calloc_r>:
 8005074:	b538      	push	{r3, r4, r5, lr}
 8005076:	fb02 f401 	mul.w	r4, r2, r1
 800507a:	4621      	mov	r1, r4
 800507c:	f000 f808 	bl	8005090 <_malloc_r>
 8005080:	4605      	mov	r5, r0
 8005082:	b118      	cbz	r0, 800508c <_calloc_r+0x18>
 8005084:	4622      	mov	r2, r4
 8005086:	2100      	movs	r1, #0
 8005088:	f7ff ffec 	bl	8005064 <memset>
 800508c:	4628      	mov	r0, r5
 800508e:	bd38      	pop	{r3, r4, r5, pc}

08005090 <_malloc_r>:
 8005090:	b570      	push	{r4, r5, r6, lr}
 8005092:	1ccd      	adds	r5, r1, #3
 8005094:	f025 0503 	bic.w	r5, r5, #3
 8005098:	3508      	adds	r5, #8
 800509a:	2d0c      	cmp	r5, #12
 800509c:	bf38      	it	cc
 800509e:	250c      	movcc	r5, #12
 80050a0:	2d00      	cmp	r5, #0
 80050a2:	4606      	mov	r6, r0
 80050a4:	db01      	blt.n	80050aa <_malloc_r+0x1a>
 80050a6:	42a9      	cmp	r1, r5
 80050a8:	d903      	bls.n	80050b2 <_malloc_r+0x22>
 80050aa:	230c      	movs	r3, #12
 80050ac:	6033      	str	r3, [r6, #0]
 80050ae:	2000      	movs	r0, #0
 80050b0:	bd70      	pop	{r4, r5, r6, pc}
 80050b2:	f001 f9fe 	bl	80064b2 <__malloc_lock>
 80050b6:	4a21      	ldr	r2, [pc, #132]	; (800513c <_malloc_r+0xac>)
 80050b8:	6814      	ldr	r4, [r2, #0]
 80050ba:	4621      	mov	r1, r4
 80050bc:	b991      	cbnz	r1, 80050e4 <_malloc_r+0x54>
 80050be:	4c20      	ldr	r4, [pc, #128]	; (8005140 <_malloc_r+0xb0>)
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	b91b      	cbnz	r3, 80050cc <_malloc_r+0x3c>
 80050c4:	4630      	mov	r0, r6
 80050c6:	f000 fb87 	bl	80057d8 <_sbrk_r>
 80050ca:	6020      	str	r0, [r4, #0]
 80050cc:	4629      	mov	r1, r5
 80050ce:	4630      	mov	r0, r6
 80050d0:	f000 fb82 	bl	80057d8 <_sbrk_r>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	d124      	bne.n	8005122 <_malloc_r+0x92>
 80050d8:	230c      	movs	r3, #12
 80050da:	6033      	str	r3, [r6, #0]
 80050dc:	4630      	mov	r0, r6
 80050de:	f001 f9e9 	bl	80064b4 <__malloc_unlock>
 80050e2:	e7e4      	b.n	80050ae <_malloc_r+0x1e>
 80050e4:	680b      	ldr	r3, [r1, #0]
 80050e6:	1b5b      	subs	r3, r3, r5
 80050e8:	d418      	bmi.n	800511c <_malloc_r+0x8c>
 80050ea:	2b0b      	cmp	r3, #11
 80050ec:	d90f      	bls.n	800510e <_malloc_r+0x7e>
 80050ee:	600b      	str	r3, [r1, #0]
 80050f0:	50cd      	str	r5, [r1, r3]
 80050f2:	18cc      	adds	r4, r1, r3
 80050f4:	4630      	mov	r0, r6
 80050f6:	f001 f9dd 	bl	80064b4 <__malloc_unlock>
 80050fa:	f104 000b 	add.w	r0, r4, #11
 80050fe:	1d23      	adds	r3, r4, #4
 8005100:	f020 0007 	bic.w	r0, r0, #7
 8005104:	1ac3      	subs	r3, r0, r3
 8005106:	d0d3      	beq.n	80050b0 <_malloc_r+0x20>
 8005108:	425a      	negs	r2, r3
 800510a:	50e2      	str	r2, [r4, r3]
 800510c:	e7d0      	b.n	80050b0 <_malloc_r+0x20>
 800510e:	428c      	cmp	r4, r1
 8005110:	684b      	ldr	r3, [r1, #4]
 8005112:	bf16      	itet	ne
 8005114:	6063      	strne	r3, [r4, #4]
 8005116:	6013      	streq	r3, [r2, #0]
 8005118:	460c      	movne	r4, r1
 800511a:	e7eb      	b.n	80050f4 <_malloc_r+0x64>
 800511c:	460c      	mov	r4, r1
 800511e:	6849      	ldr	r1, [r1, #4]
 8005120:	e7cc      	b.n	80050bc <_malloc_r+0x2c>
 8005122:	1cc4      	adds	r4, r0, #3
 8005124:	f024 0403 	bic.w	r4, r4, #3
 8005128:	42a0      	cmp	r0, r4
 800512a:	d005      	beq.n	8005138 <_malloc_r+0xa8>
 800512c:	1a21      	subs	r1, r4, r0
 800512e:	4630      	mov	r0, r6
 8005130:	f000 fb52 	bl	80057d8 <_sbrk_r>
 8005134:	3001      	adds	r0, #1
 8005136:	d0cf      	beq.n	80050d8 <_malloc_r+0x48>
 8005138:	6025      	str	r5, [r4, #0]
 800513a:	e7db      	b.n	80050f4 <_malloc_r+0x64>
 800513c:	200001fc 	.word	0x200001fc
 8005140:	20000200 	.word	0x20000200

08005144 <__cvt>:
 8005144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005148:	ec55 4b10 	vmov	r4, r5, d0
 800514c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800514e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005152:	2d00      	cmp	r5, #0
 8005154:	460e      	mov	r6, r1
 8005156:	4691      	mov	r9, r2
 8005158:	4619      	mov	r1, r3
 800515a:	bfb8      	it	lt
 800515c:	4622      	movlt	r2, r4
 800515e:	462b      	mov	r3, r5
 8005160:	f027 0720 	bic.w	r7, r7, #32
 8005164:	bfbb      	ittet	lt
 8005166:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800516a:	461d      	movlt	r5, r3
 800516c:	2300      	movge	r3, #0
 800516e:	232d      	movlt	r3, #45	; 0x2d
 8005170:	bfb8      	it	lt
 8005172:	4614      	movlt	r4, r2
 8005174:	2f46      	cmp	r7, #70	; 0x46
 8005176:	700b      	strb	r3, [r1, #0]
 8005178:	d004      	beq.n	8005184 <__cvt+0x40>
 800517a:	2f45      	cmp	r7, #69	; 0x45
 800517c:	d100      	bne.n	8005180 <__cvt+0x3c>
 800517e:	3601      	adds	r6, #1
 8005180:	2102      	movs	r1, #2
 8005182:	e000      	b.n	8005186 <__cvt+0x42>
 8005184:	2103      	movs	r1, #3
 8005186:	ab03      	add	r3, sp, #12
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	ab02      	add	r3, sp, #8
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	4632      	mov	r2, r6
 8005190:	4653      	mov	r3, sl
 8005192:	ec45 4b10 	vmov	d0, r4, r5
 8005196:	f000 fbbb 	bl	8005910 <_dtoa_r>
 800519a:	2f47      	cmp	r7, #71	; 0x47
 800519c:	4680      	mov	r8, r0
 800519e:	d102      	bne.n	80051a6 <__cvt+0x62>
 80051a0:	f019 0f01 	tst.w	r9, #1
 80051a4:	d026      	beq.n	80051f4 <__cvt+0xb0>
 80051a6:	2f46      	cmp	r7, #70	; 0x46
 80051a8:	eb08 0906 	add.w	r9, r8, r6
 80051ac:	d111      	bne.n	80051d2 <__cvt+0x8e>
 80051ae:	f898 3000 	ldrb.w	r3, [r8]
 80051b2:	2b30      	cmp	r3, #48	; 0x30
 80051b4:	d10a      	bne.n	80051cc <__cvt+0x88>
 80051b6:	2200      	movs	r2, #0
 80051b8:	2300      	movs	r3, #0
 80051ba:	4620      	mov	r0, r4
 80051bc:	4629      	mov	r1, r5
 80051be:	f7fb fc4f 	bl	8000a60 <__aeabi_dcmpeq>
 80051c2:	b918      	cbnz	r0, 80051cc <__cvt+0x88>
 80051c4:	f1c6 0601 	rsb	r6, r6, #1
 80051c8:	f8ca 6000 	str.w	r6, [sl]
 80051cc:	f8da 3000 	ldr.w	r3, [sl]
 80051d0:	4499      	add	r9, r3
 80051d2:	2200      	movs	r2, #0
 80051d4:	2300      	movs	r3, #0
 80051d6:	4620      	mov	r0, r4
 80051d8:	4629      	mov	r1, r5
 80051da:	f7fb fc41 	bl	8000a60 <__aeabi_dcmpeq>
 80051de:	b938      	cbnz	r0, 80051f0 <__cvt+0xac>
 80051e0:	2230      	movs	r2, #48	; 0x30
 80051e2:	9b03      	ldr	r3, [sp, #12]
 80051e4:	454b      	cmp	r3, r9
 80051e6:	d205      	bcs.n	80051f4 <__cvt+0xb0>
 80051e8:	1c59      	adds	r1, r3, #1
 80051ea:	9103      	str	r1, [sp, #12]
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	e7f8      	b.n	80051e2 <__cvt+0x9e>
 80051f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80051f4:	9b03      	ldr	r3, [sp, #12]
 80051f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051f8:	eba3 0308 	sub.w	r3, r3, r8
 80051fc:	4640      	mov	r0, r8
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	b004      	add	sp, #16
 8005202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005206 <__exponent>:
 8005206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005208:	2900      	cmp	r1, #0
 800520a:	4604      	mov	r4, r0
 800520c:	bfba      	itte	lt
 800520e:	4249      	neglt	r1, r1
 8005210:	232d      	movlt	r3, #45	; 0x2d
 8005212:	232b      	movge	r3, #43	; 0x2b
 8005214:	2909      	cmp	r1, #9
 8005216:	f804 2b02 	strb.w	r2, [r4], #2
 800521a:	7043      	strb	r3, [r0, #1]
 800521c:	dd20      	ble.n	8005260 <__exponent+0x5a>
 800521e:	f10d 0307 	add.w	r3, sp, #7
 8005222:	461f      	mov	r7, r3
 8005224:	260a      	movs	r6, #10
 8005226:	fb91 f5f6 	sdiv	r5, r1, r6
 800522a:	fb06 1115 	mls	r1, r6, r5, r1
 800522e:	3130      	adds	r1, #48	; 0x30
 8005230:	2d09      	cmp	r5, #9
 8005232:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005236:	f103 32ff 	add.w	r2, r3, #4294967295
 800523a:	4629      	mov	r1, r5
 800523c:	dc09      	bgt.n	8005252 <__exponent+0x4c>
 800523e:	3130      	adds	r1, #48	; 0x30
 8005240:	3b02      	subs	r3, #2
 8005242:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005246:	42bb      	cmp	r3, r7
 8005248:	4622      	mov	r2, r4
 800524a:	d304      	bcc.n	8005256 <__exponent+0x50>
 800524c:	1a10      	subs	r0, r2, r0
 800524e:	b003      	add	sp, #12
 8005250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005252:	4613      	mov	r3, r2
 8005254:	e7e7      	b.n	8005226 <__exponent+0x20>
 8005256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800525a:	f804 2b01 	strb.w	r2, [r4], #1
 800525e:	e7f2      	b.n	8005246 <__exponent+0x40>
 8005260:	2330      	movs	r3, #48	; 0x30
 8005262:	4419      	add	r1, r3
 8005264:	7083      	strb	r3, [r0, #2]
 8005266:	1d02      	adds	r2, r0, #4
 8005268:	70c1      	strb	r1, [r0, #3]
 800526a:	e7ef      	b.n	800524c <__exponent+0x46>

0800526c <_printf_float>:
 800526c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005270:	b08d      	sub	sp, #52	; 0x34
 8005272:	460c      	mov	r4, r1
 8005274:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005278:	4616      	mov	r6, r2
 800527a:	461f      	mov	r7, r3
 800527c:	4605      	mov	r5, r0
 800527e:	f001 f8ff 	bl	8006480 <_localeconv_r>
 8005282:	6803      	ldr	r3, [r0, #0]
 8005284:	9304      	str	r3, [sp, #16]
 8005286:	4618      	mov	r0, r3
 8005288:	f7fa ffbe 	bl	8000208 <strlen>
 800528c:	2300      	movs	r3, #0
 800528e:	930a      	str	r3, [sp, #40]	; 0x28
 8005290:	f8d8 3000 	ldr.w	r3, [r8]
 8005294:	9005      	str	r0, [sp, #20]
 8005296:	3307      	adds	r3, #7
 8005298:	f023 0307 	bic.w	r3, r3, #7
 800529c:	f103 0208 	add.w	r2, r3, #8
 80052a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80052a4:	f8d4 b000 	ldr.w	fp, [r4]
 80052a8:	f8c8 2000 	str.w	r2, [r8]
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80052b4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80052b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80052bc:	9307      	str	r3, [sp, #28]
 80052be:	f8cd 8018 	str.w	r8, [sp, #24]
 80052c2:	f04f 32ff 	mov.w	r2, #4294967295
 80052c6:	4ba7      	ldr	r3, [pc, #668]	; (8005564 <_printf_float+0x2f8>)
 80052c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052cc:	f7fb fbfa 	bl	8000ac4 <__aeabi_dcmpun>
 80052d0:	bb70      	cbnz	r0, 8005330 <_printf_float+0xc4>
 80052d2:	f04f 32ff 	mov.w	r2, #4294967295
 80052d6:	4ba3      	ldr	r3, [pc, #652]	; (8005564 <_printf_float+0x2f8>)
 80052d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052dc:	f7fb fbd4 	bl	8000a88 <__aeabi_dcmple>
 80052e0:	bb30      	cbnz	r0, 8005330 <_printf_float+0xc4>
 80052e2:	2200      	movs	r2, #0
 80052e4:	2300      	movs	r3, #0
 80052e6:	4640      	mov	r0, r8
 80052e8:	4649      	mov	r1, r9
 80052ea:	f7fb fbc3 	bl	8000a74 <__aeabi_dcmplt>
 80052ee:	b110      	cbz	r0, 80052f6 <_printf_float+0x8a>
 80052f0:	232d      	movs	r3, #45	; 0x2d
 80052f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052f6:	4a9c      	ldr	r2, [pc, #624]	; (8005568 <_printf_float+0x2fc>)
 80052f8:	4b9c      	ldr	r3, [pc, #624]	; (800556c <_printf_float+0x300>)
 80052fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80052fe:	bf8c      	ite	hi
 8005300:	4690      	movhi	r8, r2
 8005302:	4698      	movls	r8, r3
 8005304:	2303      	movs	r3, #3
 8005306:	f02b 0204 	bic.w	r2, fp, #4
 800530a:	6123      	str	r3, [r4, #16]
 800530c:	6022      	str	r2, [r4, #0]
 800530e:	f04f 0900 	mov.w	r9, #0
 8005312:	9700      	str	r7, [sp, #0]
 8005314:	4633      	mov	r3, r6
 8005316:	aa0b      	add	r2, sp, #44	; 0x2c
 8005318:	4621      	mov	r1, r4
 800531a:	4628      	mov	r0, r5
 800531c:	f000 f9e6 	bl	80056ec <_printf_common>
 8005320:	3001      	adds	r0, #1
 8005322:	f040 808d 	bne.w	8005440 <_printf_float+0x1d4>
 8005326:	f04f 30ff 	mov.w	r0, #4294967295
 800532a:	b00d      	add	sp, #52	; 0x34
 800532c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005330:	4642      	mov	r2, r8
 8005332:	464b      	mov	r3, r9
 8005334:	4640      	mov	r0, r8
 8005336:	4649      	mov	r1, r9
 8005338:	f7fb fbc4 	bl	8000ac4 <__aeabi_dcmpun>
 800533c:	b110      	cbz	r0, 8005344 <_printf_float+0xd8>
 800533e:	4a8c      	ldr	r2, [pc, #560]	; (8005570 <_printf_float+0x304>)
 8005340:	4b8c      	ldr	r3, [pc, #560]	; (8005574 <_printf_float+0x308>)
 8005342:	e7da      	b.n	80052fa <_printf_float+0x8e>
 8005344:	6861      	ldr	r1, [r4, #4]
 8005346:	1c4b      	adds	r3, r1, #1
 8005348:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800534c:	a80a      	add	r0, sp, #40	; 0x28
 800534e:	d13e      	bne.n	80053ce <_printf_float+0x162>
 8005350:	2306      	movs	r3, #6
 8005352:	6063      	str	r3, [r4, #4]
 8005354:	2300      	movs	r3, #0
 8005356:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800535a:	ab09      	add	r3, sp, #36	; 0x24
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	ec49 8b10 	vmov	d0, r8, r9
 8005362:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005366:	6022      	str	r2, [r4, #0]
 8005368:	f8cd a004 	str.w	sl, [sp, #4]
 800536c:	6861      	ldr	r1, [r4, #4]
 800536e:	4628      	mov	r0, r5
 8005370:	f7ff fee8 	bl	8005144 <__cvt>
 8005374:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005378:	2b47      	cmp	r3, #71	; 0x47
 800537a:	4680      	mov	r8, r0
 800537c:	d109      	bne.n	8005392 <_printf_float+0x126>
 800537e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005380:	1cd8      	adds	r0, r3, #3
 8005382:	db02      	blt.n	800538a <_printf_float+0x11e>
 8005384:	6862      	ldr	r2, [r4, #4]
 8005386:	4293      	cmp	r3, r2
 8005388:	dd47      	ble.n	800541a <_printf_float+0x1ae>
 800538a:	f1aa 0a02 	sub.w	sl, sl, #2
 800538e:	fa5f fa8a 	uxtb.w	sl, sl
 8005392:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005396:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005398:	d824      	bhi.n	80053e4 <_printf_float+0x178>
 800539a:	3901      	subs	r1, #1
 800539c:	4652      	mov	r2, sl
 800539e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80053a2:	9109      	str	r1, [sp, #36]	; 0x24
 80053a4:	f7ff ff2f 	bl	8005206 <__exponent>
 80053a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053aa:	1813      	adds	r3, r2, r0
 80053ac:	2a01      	cmp	r2, #1
 80053ae:	4681      	mov	r9, r0
 80053b0:	6123      	str	r3, [r4, #16]
 80053b2:	dc02      	bgt.n	80053ba <_printf_float+0x14e>
 80053b4:	6822      	ldr	r2, [r4, #0]
 80053b6:	07d1      	lsls	r1, r2, #31
 80053b8:	d501      	bpl.n	80053be <_printf_float+0x152>
 80053ba:	3301      	adds	r3, #1
 80053bc:	6123      	str	r3, [r4, #16]
 80053be:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0a5      	beq.n	8005312 <_printf_float+0xa6>
 80053c6:	232d      	movs	r3, #45	; 0x2d
 80053c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053cc:	e7a1      	b.n	8005312 <_printf_float+0xa6>
 80053ce:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80053d2:	f000 8177 	beq.w	80056c4 <_printf_float+0x458>
 80053d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80053da:	d1bb      	bne.n	8005354 <_printf_float+0xe8>
 80053dc:	2900      	cmp	r1, #0
 80053de:	d1b9      	bne.n	8005354 <_printf_float+0xe8>
 80053e0:	2301      	movs	r3, #1
 80053e2:	e7b6      	b.n	8005352 <_printf_float+0xe6>
 80053e4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80053e8:	d119      	bne.n	800541e <_printf_float+0x1b2>
 80053ea:	2900      	cmp	r1, #0
 80053ec:	6863      	ldr	r3, [r4, #4]
 80053ee:	dd0c      	ble.n	800540a <_printf_float+0x19e>
 80053f0:	6121      	str	r1, [r4, #16]
 80053f2:	b913      	cbnz	r3, 80053fa <_printf_float+0x18e>
 80053f4:	6822      	ldr	r2, [r4, #0]
 80053f6:	07d2      	lsls	r2, r2, #31
 80053f8:	d502      	bpl.n	8005400 <_printf_float+0x194>
 80053fa:	3301      	adds	r3, #1
 80053fc:	440b      	add	r3, r1
 80053fe:	6123      	str	r3, [r4, #16]
 8005400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005402:	65a3      	str	r3, [r4, #88]	; 0x58
 8005404:	f04f 0900 	mov.w	r9, #0
 8005408:	e7d9      	b.n	80053be <_printf_float+0x152>
 800540a:	b913      	cbnz	r3, 8005412 <_printf_float+0x1a6>
 800540c:	6822      	ldr	r2, [r4, #0]
 800540e:	07d0      	lsls	r0, r2, #31
 8005410:	d501      	bpl.n	8005416 <_printf_float+0x1aa>
 8005412:	3302      	adds	r3, #2
 8005414:	e7f3      	b.n	80053fe <_printf_float+0x192>
 8005416:	2301      	movs	r3, #1
 8005418:	e7f1      	b.n	80053fe <_printf_float+0x192>
 800541a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800541e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005422:	4293      	cmp	r3, r2
 8005424:	db05      	blt.n	8005432 <_printf_float+0x1c6>
 8005426:	6822      	ldr	r2, [r4, #0]
 8005428:	6123      	str	r3, [r4, #16]
 800542a:	07d1      	lsls	r1, r2, #31
 800542c:	d5e8      	bpl.n	8005400 <_printf_float+0x194>
 800542e:	3301      	adds	r3, #1
 8005430:	e7e5      	b.n	80053fe <_printf_float+0x192>
 8005432:	2b00      	cmp	r3, #0
 8005434:	bfd4      	ite	le
 8005436:	f1c3 0302 	rsble	r3, r3, #2
 800543a:	2301      	movgt	r3, #1
 800543c:	4413      	add	r3, r2
 800543e:	e7de      	b.n	80053fe <_printf_float+0x192>
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	055a      	lsls	r2, r3, #21
 8005444:	d407      	bmi.n	8005456 <_printf_float+0x1ea>
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	4642      	mov	r2, r8
 800544a:	4631      	mov	r1, r6
 800544c:	4628      	mov	r0, r5
 800544e:	47b8      	blx	r7
 8005450:	3001      	adds	r0, #1
 8005452:	d12b      	bne.n	80054ac <_printf_float+0x240>
 8005454:	e767      	b.n	8005326 <_printf_float+0xba>
 8005456:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800545a:	f240 80dc 	bls.w	8005616 <_printf_float+0x3aa>
 800545e:	2200      	movs	r2, #0
 8005460:	2300      	movs	r3, #0
 8005462:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005466:	f7fb fafb 	bl	8000a60 <__aeabi_dcmpeq>
 800546a:	2800      	cmp	r0, #0
 800546c:	d033      	beq.n	80054d6 <_printf_float+0x26a>
 800546e:	2301      	movs	r3, #1
 8005470:	4a41      	ldr	r2, [pc, #260]	; (8005578 <_printf_float+0x30c>)
 8005472:	4631      	mov	r1, r6
 8005474:	4628      	mov	r0, r5
 8005476:	47b8      	blx	r7
 8005478:	3001      	adds	r0, #1
 800547a:	f43f af54 	beq.w	8005326 <_printf_float+0xba>
 800547e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005482:	429a      	cmp	r2, r3
 8005484:	db02      	blt.n	800548c <_printf_float+0x220>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	07d8      	lsls	r0, r3, #31
 800548a:	d50f      	bpl.n	80054ac <_printf_float+0x240>
 800548c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005490:	4631      	mov	r1, r6
 8005492:	4628      	mov	r0, r5
 8005494:	47b8      	blx	r7
 8005496:	3001      	adds	r0, #1
 8005498:	f43f af45 	beq.w	8005326 <_printf_float+0xba>
 800549c:	f04f 0800 	mov.w	r8, #0
 80054a0:	f104 091a 	add.w	r9, r4, #26
 80054a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054a6:	3b01      	subs	r3, #1
 80054a8:	4543      	cmp	r3, r8
 80054aa:	dc09      	bgt.n	80054c0 <_printf_float+0x254>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	079b      	lsls	r3, r3, #30
 80054b0:	f100 8103 	bmi.w	80056ba <_printf_float+0x44e>
 80054b4:	68e0      	ldr	r0, [r4, #12]
 80054b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054b8:	4298      	cmp	r0, r3
 80054ba:	bfb8      	it	lt
 80054bc:	4618      	movlt	r0, r3
 80054be:	e734      	b.n	800532a <_printf_float+0xbe>
 80054c0:	2301      	movs	r3, #1
 80054c2:	464a      	mov	r2, r9
 80054c4:	4631      	mov	r1, r6
 80054c6:	4628      	mov	r0, r5
 80054c8:	47b8      	blx	r7
 80054ca:	3001      	adds	r0, #1
 80054cc:	f43f af2b 	beq.w	8005326 <_printf_float+0xba>
 80054d0:	f108 0801 	add.w	r8, r8, #1
 80054d4:	e7e6      	b.n	80054a4 <_printf_float+0x238>
 80054d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054d8:	2b00      	cmp	r3, #0
 80054da:	dc2b      	bgt.n	8005534 <_printf_float+0x2c8>
 80054dc:	2301      	movs	r3, #1
 80054de:	4a26      	ldr	r2, [pc, #152]	; (8005578 <_printf_float+0x30c>)
 80054e0:	4631      	mov	r1, r6
 80054e2:	4628      	mov	r0, r5
 80054e4:	47b8      	blx	r7
 80054e6:	3001      	adds	r0, #1
 80054e8:	f43f af1d 	beq.w	8005326 <_printf_float+0xba>
 80054ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ee:	b923      	cbnz	r3, 80054fa <_printf_float+0x28e>
 80054f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054f2:	b913      	cbnz	r3, 80054fa <_printf_float+0x28e>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	07d9      	lsls	r1, r3, #31
 80054f8:	d5d8      	bpl.n	80054ac <_printf_float+0x240>
 80054fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054fe:	4631      	mov	r1, r6
 8005500:	4628      	mov	r0, r5
 8005502:	47b8      	blx	r7
 8005504:	3001      	adds	r0, #1
 8005506:	f43f af0e 	beq.w	8005326 <_printf_float+0xba>
 800550a:	f04f 0900 	mov.w	r9, #0
 800550e:	f104 0a1a 	add.w	sl, r4, #26
 8005512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005514:	425b      	negs	r3, r3
 8005516:	454b      	cmp	r3, r9
 8005518:	dc01      	bgt.n	800551e <_printf_float+0x2b2>
 800551a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800551c:	e794      	b.n	8005448 <_printf_float+0x1dc>
 800551e:	2301      	movs	r3, #1
 8005520:	4652      	mov	r2, sl
 8005522:	4631      	mov	r1, r6
 8005524:	4628      	mov	r0, r5
 8005526:	47b8      	blx	r7
 8005528:	3001      	adds	r0, #1
 800552a:	f43f aefc 	beq.w	8005326 <_printf_float+0xba>
 800552e:	f109 0901 	add.w	r9, r9, #1
 8005532:	e7ee      	b.n	8005512 <_printf_float+0x2a6>
 8005534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005536:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005538:	429a      	cmp	r2, r3
 800553a:	bfa8      	it	ge
 800553c:	461a      	movge	r2, r3
 800553e:	2a00      	cmp	r2, #0
 8005540:	4691      	mov	r9, r2
 8005542:	dd07      	ble.n	8005554 <_printf_float+0x2e8>
 8005544:	4613      	mov	r3, r2
 8005546:	4631      	mov	r1, r6
 8005548:	4642      	mov	r2, r8
 800554a:	4628      	mov	r0, r5
 800554c:	47b8      	blx	r7
 800554e:	3001      	adds	r0, #1
 8005550:	f43f aee9 	beq.w	8005326 <_printf_float+0xba>
 8005554:	f104 031a 	add.w	r3, r4, #26
 8005558:	f04f 0b00 	mov.w	fp, #0
 800555c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005560:	9306      	str	r3, [sp, #24]
 8005562:	e015      	b.n	8005590 <_printf_float+0x324>
 8005564:	7fefffff 	.word	0x7fefffff
 8005568:	08006ae4 	.word	0x08006ae4
 800556c:	08006ae0 	.word	0x08006ae0
 8005570:	08006aec 	.word	0x08006aec
 8005574:	08006ae8 	.word	0x08006ae8
 8005578:	08006af0 	.word	0x08006af0
 800557c:	2301      	movs	r3, #1
 800557e:	9a06      	ldr	r2, [sp, #24]
 8005580:	4631      	mov	r1, r6
 8005582:	4628      	mov	r0, r5
 8005584:	47b8      	blx	r7
 8005586:	3001      	adds	r0, #1
 8005588:	f43f aecd 	beq.w	8005326 <_printf_float+0xba>
 800558c:	f10b 0b01 	add.w	fp, fp, #1
 8005590:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005594:	ebaa 0309 	sub.w	r3, sl, r9
 8005598:	455b      	cmp	r3, fp
 800559a:	dcef      	bgt.n	800557c <_printf_float+0x310>
 800559c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055a0:	429a      	cmp	r2, r3
 80055a2:	44d0      	add	r8, sl
 80055a4:	db15      	blt.n	80055d2 <_printf_float+0x366>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	07da      	lsls	r2, r3, #31
 80055aa:	d412      	bmi.n	80055d2 <_printf_float+0x366>
 80055ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055b0:	eba3 020a 	sub.w	r2, r3, sl
 80055b4:	eba3 0a01 	sub.w	sl, r3, r1
 80055b8:	4592      	cmp	sl, r2
 80055ba:	bfa8      	it	ge
 80055bc:	4692      	movge	sl, r2
 80055be:	f1ba 0f00 	cmp.w	sl, #0
 80055c2:	dc0e      	bgt.n	80055e2 <_printf_float+0x376>
 80055c4:	f04f 0800 	mov.w	r8, #0
 80055c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80055cc:	f104 091a 	add.w	r9, r4, #26
 80055d0:	e019      	b.n	8005606 <_printf_float+0x39a>
 80055d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055d6:	4631      	mov	r1, r6
 80055d8:	4628      	mov	r0, r5
 80055da:	47b8      	blx	r7
 80055dc:	3001      	adds	r0, #1
 80055de:	d1e5      	bne.n	80055ac <_printf_float+0x340>
 80055e0:	e6a1      	b.n	8005326 <_printf_float+0xba>
 80055e2:	4653      	mov	r3, sl
 80055e4:	4642      	mov	r2, r8
 80055e6:	4631      	mov	r1, r6
 80055e8:	4628      	mov	r0, r5
 80055ea:	47b8      	blx	r7
 80055ec:	3001      	adds	r0, #1
 80055ee:	d1e9      	bne.n	80055c4 <_printf_float+0x358>
 80055f0:	e699      	b.n	8005326 <_printf_float+0xba>
 80055f2:	2301      	movs	r3, #1
 80055f4:	464a      	mov	r2, r9
 80055f6:	4631      	mov	r1, r6
 80055f8:	4628      	mov	r0, r5
 80055fa:	47b8      	blx	r7
 80055fc:	3001      	adds	r0, #1
 80055fe:	f43f ae92 	beq.w	8005326 <_printf_float+0xba>
 8005602:	f108 0801 	add.w	r8, r8, #1
 8005606:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	eba3 030a 	sub.w	r3, r3, sl
 8005610:	4543      	cmp	r3, r8
 8005612:	dcee      	bgt.n	80055f2 <_printf_float+0x386>
 8005614:	e74a      	b.n	80054ac <_printf_float+0x240>
 8005616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005618:	2a01      	cmp	r2, #1
 800561a:	dc01      	bgt.n	8005620 <_printf_float+0x3b4>
 800561c:	07db      	lsls	r3, r3, #31
 800561e:	d53a      	bpl.n	8005696 <_printf_float+0x42a>
 8005620:	2301      	movs	r3, #1
 8005622:	4642      	mov	r2, r8
 8005624:	4631      	mov	r1, r6
 8005626:	4628      	mov	r0, r5
 8005628:	47b8      	blx	r7
 800562a:	3001      	adds	r0, #1
 800562c:	f43f ae7b 	beq.w	8005326 <_printf_float+0xba>
 8005630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005634:	4631      	mov	r1, r6
 8005636:	4628      	mov	r0, r5
 8005638:	47b8      	blx	r7
 800563a:	3001      	adds	r0, #1
 800563c:	f108 0801 	add.w	r8, r8, #1
 8005640:	f43f ae71 	beq.w	8005326 <_printf_float+0xba>
 8005644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005646:	2200      	movs	r2, #0
 8005648:	f103 3aff 	add.w	sl, r3, #4294967295
 800564c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005650:	2300      	movs	r3, #0
 8005652:	f7fb fa05 	bl	8000a60 <__aeabi_dcmpeq>
 8005656:	b9c8      	cbnz	r0, 800568c <_printf_float+0x420>
 8005658:	4653      	mov	r3, sl
 800565a:	4642      	mov	r2, r8
 800565c:	4631      	mov	r1, r6
 800565e:	4628      	mov	r0, r5
 8005660:	47b8      	blx	r7
 8005662:	3001      	adds	r0, #1
 8005664:	d10e      	bne.n	8005684 <_printf_float+0x418>
 8005666:	e65e      	b.n	8005326 <_printf_float+0xba>
 8005668:	2301      	movs	r3, #1
 800566a:	4652      	mov	r2, sl
 800566c:	4631      	mov	r1, r6
 800566e:	4628      	mov	r0, r5
 8005670:	47b8      	blx	r7
 8005672:	3001      	adds	r0, #1
 8005674:	f43f ae57 	beq.w	8005326 <_printf_float+0xba>
 8005678:	f108 0801 	add.w	r8, r8, #1
 800567c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800567e:	3b01      	subs	r3, #1
 8005680:	4543      	cmp	r3, r8
 8005682:	dcf1      	bgt.n	8005668 <_printf_float+0x3fc>
 8005684:	464b      	mov	r3, r9
 8005686:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800568a:	e6de      	b.n	800544a <_printf_float+0x1de>
 800568c:	f04f 0800 	mov.w	r8, #0
 8005690:	f104 0a1a 	add.w	sl, r4, #26
 8005694:	e7f2      	b.n	800567c <_printf_float+0x410>
 8005696:	2301      	movs	r3, #1
 8005698:	e7df      	b.n	800565a <_printf_float+0x3ee>
 800569a:	2301      	movs	r3, #1
 800569c:	464a      	mov	r2, r9
 800569e:	4631      	mov	r1, r6
 80056a0:	4628      	mov	r0, r5
 80056a2:	47b8      	blx	r7
 80056a4:	3001      	adds	r0, #1
 80056a6:	f43f ae3e 	beq.w	8005326 <_printf_float+0xba>
 80056aa:	f108 0801 	add.w	r8, r8, #1
 80056ae:	68e3      	ldr	r3, [r4, #12]
 80056b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056b2:	1a9b      	subs	r3, r3, r2
 80056b4:	4543      	cmp	r3, r8
 80056b6:	dcf0      	bgt.n	800569a <_printf_float+0x42e>
 80056b8:	e6fc      	b.n	80054b4 <_printf_float+0x248>
 80056ba:	f04f 0800 	mov.w	r8, #0
 80056be:	f104 0919 	add.w	r9, r4, #25
 80056c2:	e7f4      	b.n	80056ae <_printf_float+0x442>
 80056c4:	2900      	cmp	r1, #0
 80056c6:	f43f ae8b 	beq.w	80053e0 <_printf_float+0x174>
 80056ca:	2300      	movs	r3, #0
 80056cc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80056d0:	ab09      	add	r3, sp, #36	; 0x24
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	ec49 8b10 	vmov	d0, r8, r9
 80056d8:	6022      	str	r2, [r4, #0]
 80056da:	f8cd a004 	str.w	sl, [sp, #4]
 80056de:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056e2:	4628      	mov	r0, r5
 80056e4:	f7ff fd2e 	bl	8005144 <__cvt>
 80056e8:	4680      	mov	r8, r0
 80056ea:	e648      	b.n	800537e <_printf_float+0x112>

080056ec <_printf_common>:
 80056ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f0:	4691      	mov	r9, r2
 80056f2:	461f      	mov	r7, r3
 80056f4:	688a      	ldr	r2, [r1, #8]
 80056f6:	690b      	ldr	r3, [r1, #16]
 80056f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056fc:	4293      	cmp	r3, r2
 80056fe:	bfb8      	it	lt
 8005700:	4613      	movlt	r3, r2
 8005702:	f8c9 3000 	str.w	r3, [r9]
 8005706:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800570a:	4606      	mov	r6, r0
 800570c:	460c      	mov	r4, r1
 800570e:	b112      	cbz	r2, 8005716 <_printf_common+0x2a>
 8005710:	3301      	adds	r3, #1
 8005712:	f8c9 3000 	str.w	r3, [r9]
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	0699      	lsls	r1, r3, #26
 800571a:	bf42      	ittt	mi
 800571c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005720:	3302      	addmi	r3, #2
 8005722:	f8c9 3000 	strmi.w	r3, [r9]
 8005726:	6825      	ldr	r5, [r4, #0]
 8005728:	f015 0506 	ands.w	r5, r5, #6
 800572c:	d107      	bne.n	800573e <_printf_common+0x52>
 800572e:	f104 0a19 	add.w	sl, r4, #25
 8005732:	68e3      	ldr	r3, [r4, #12]
 8005734:	f8d9 2000 	ldr.w	r2, [r9]
 8005738:	1a9b      	subs	r3, r3, r2
 800573a:	42ab      	cmp	r3, r5
 800573c:	dc28      	bgt.n	8005790 <_printf_common+0xa4>
 800573e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005742:	6822      	ldr	r2, [r4, #0]
 8005744:	3300      	adds	r3, #0
 8005746:	bf18      	it	ne
 8005748:	2301      	movne	r3, #1
 800574a:	0692      	lsls	r2, r2, #26
 800574c:	d42d      	bmi.n	80057aa <_printf_common+0xbe>
 800574e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005752:	4639      	mov	r1, r7
 8005754:	4630      	mov	r0, r6
 8005756:	47c0      	blx	r8
 8005758:	3001      	adds	r0, #1
 800575a:	d020      	beq.n	800579e <_printf_common+0xb2>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	68e5      	ldr	r5, [r4, #12]
 8005760:	f8d9 2000 	ldr.w	r2, [r9]
 8005764:	f003 0306 	and.w	r3, r3, #6
 8005768:	2b04      	cmp	r3, #4
 800576a:	bf08      	it	eq
 800576c:	1aad      	subeq	r5, r5, r2
 800576e:	68a3      	ldr	r3, [r4, #8]
 8005770:	6922      	ldr	r2, [r4, #16]
 8005772:	bf0c      	ite	eq
 8005774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005778:	2500      	movne	r5, #0
 800577a:	4293      	cmp	r3, r2
 800577c:	bfc4      	itt	gt
 800577e:	1a9b      	subgt	r3, r3, r2
 8005780:	18ed      	addgt	r5, r5, r3
 8005782:	f04f 0900 	mov.w	r9, #0
 8005786:	341a      	adds	r4, #26
 8005788:	454d      	cmp	r5, r9
 800578a:	d11a      	bne.n	80057c2 <_printf_common+0xd6>
 800578c:	2000      	movs	r0, #0
 800578e:	e008      	b.n	80057a2 <_printf_common+0xb6>
 8005790:	2301      	movs	r3, #1
 8005792:	4652      	mov	r2, sl
 8005794:	4639      	mov	r1, r7
 8005796:	4630      	mov	r0, r6
 8005798:	47c0      	blx	r8
 800579a:	3001      	adds	r0, #1
 800579c:	d103      	bne.n	80057a6 <_printf_common+0xba>
 800579e:	f04f 30ff 	mov.w	r0, #4294967295
 80057a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a6:	3501      	adds	r5, #1
 80057a8:	e7c3      	b.n	8005732 <_printf_common+0x46>
 80057aa:	18e1      	adds	r1, r4, r3
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	2030      	movs	r0, #48	; 0x30
 80057b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057b4:	4422      	add	r2, r4
 80057b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057be:	3302      	adds	r3, #2
 80057c0:	e7c5      	b.n	800574e <_printf_common+0x62>
 80057c2:	2301      	movs	r3, #1
 80057c4:	4622      	mov	r2, r4
 80057c6:	4639      	mov	r1, r7
 80057c8:	4630      	mov	r0, r6
 80057ca:	47c0      	blx	r8
 80057cc:	3001      	adds	r0, #1
 80057ce:	d0e6      	beq.n	800579e <_printf_common+0xb2>
 80057d0:	f109 0901 	add.w	r9, r9, #1
 80057d4:	e7d8      	b.n	8005788 <_printf_common+0x9c>
	...

080057d8 <_sbrk_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	4c06      	ldr	r4, [pc, #24]	; (80057f4 <_sbrk_r+0x1c>)
 80057dc:	2300      	movs	r3, #0
 80057de:	4605      	mov	r5, r0
 80057e0:	4608      	mov	r0, r1
 80057e2:	6023      	str	r3, [r4, #0]
 80057e4:	f7fb fb2c 	bl	8000e40 <_sbrk>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d102      	bne.n	80057f2 <_sbrk_r+0x1a>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	b103      	cbz	r3, 80057f2 <_sbrk_r+0x1a>
 80057f0:	602b      	str	r3, [r5, #0]
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	20000424 	.word	0x20000424

080057f8 <quorem>:
 80057f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	6903      	ldr	r3, [r0, #16]
 80057fe:	690c      	ldr	r4, [r1, #16]
 8005800:	42a3      	cmp	r3, r4
 8005802:	4680      	mov	r8, r0
 8005804:	f2c0 8082 	blt.w	800590c <quorem+0x114>
 8005808:	3c01      	subs	r4, #1
 800580a:	f101 0714 	add.w	r7, r1, #20
 800580e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005812:	f100 0614 	add.w	r6, r0, #20
 8005816:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800581a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800581e:	eb06 030c 	add.w	r3, r6, ip
 8005822:	3501      	adds	r5, #1
 8005824:	eb07 090c 	add.w	r9, r7, ip
 8005828:	9301      	str	r3, [sp, #4]
 800582a:	fbb0 f5f5 	udiv	r5, r0, r5
 800582e:	b395      	cbz	r5, 8005896 <quorem+0x9e>
 8005830:	f04f 0a00 	mov.w	sl, #0
 8005834:	4638      	mov	r0, r7
 8005836:	46b6      	mov	lr, r6
 8005838:	46d3      	mov	fp, sl
 800583a:	f850 2b04 	ldr.w	r2, [r0], #4
 800583e:	b293      	uxth	r3, r2
 8005840:	fb05 a303 	mla	r3, r5, r3, sl
 8005844:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005848:	b29b      	uxth	r3, r3
 800584a:	ebab 0303 	sub.w	r3, fp, r3
 800584e:	0c12      	lsrs	r2, r2, #16
 8005850:	f8de b000 	ldr.w	fp, [lr]
 8005854:	fb05 a202 	mla	r2, r5, r2, sl
 8005858:	fa13 f38b 	uxtah	r3, r3, fp
 800585c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005860:	fa1f fb82 	uxth.w	fp, r2
 8005864:	f8de 2000 	ldr.w	r2, [lr]
 8005868:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800586c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005870:	b29b      	uxth	r3, r3
 8005872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005876:	4581      	cmp	r9, r0
 8005878:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800587c:	f84e 3b04 	str.w	r3, [lr], #4
 8005880:	d2db      	bcs.n	800583a <quorem+0x42>
 8005882:	f856 300c 	ldr.w	r3, [r6, ip]
 8005886:	b933      	cbnz	r3, 8005896 <quorem+0x9e>
 8005888:	9b01      	ldr	r3, [sp, #4]
 800588a:	3b04      	subs	r3, #4
 800588c:	429e      	cmp	r6, r3
 800588e:	461a      	mov	r2, r3
 8005890:	d330      	bcc.n	80058f4 <quorem+0xfc>
 8005892:	f8c8 4010 	str.w	r4, [r8, #16]
 8005896:	4640      	mov	r0, r8
 8005898:	f001 f822 	bl	80068e0 <__mcmp>
 800589c:	2800      	cmp	r0, #0
 800589e:	db25      	blt.n	80058ec <quorem+0xf4>
 80058a0:	3501      	adds	r5, #1
 80058a2:	4630      	mov	r0, r6
 80058a4:	f04f 0c00 	mov.w	ip, #0
 80058a8:	f857 2b04 	ldr.w	r2, [r7], #4
 80058ac:	f8d0 e000 	ldr.w	lr, [r0]
 80058b0:	b293      	uxth	r3, r2
 80058b2:	ebac 0303 	sub.w	r3, ip, r3
 80058b6:	0c12      	lsrs	r2, r2, #16
 80058b8:	fa13 f38e 	uxtah	r3, r3, lr
 80058bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058ca:	45b9      	cmp	r9, r7
 80058cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058d0:	f840 3b04 	str.w	r3, [r0], #4
 80058d4:	d2e8      	bcs.n	80058a8 <quorem+0xb0>
 80058d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80058da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80058de:	b92a      	cbnz	r2, 80058ec <quorem+0xf4>
 80058e0:	3b04      	subs	r3, #4
 80058e2:	429e      	cmp	r6, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	d30b      	bcc.n	8005900 <quorem+0x108>
 80058e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80058ec:	4628      	mov	r0, r5
 80058ee:	b003      	add	sp, #12
 80058f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	3b04      	subs	r3, #4
 80058f8:	2a00      	cmp	r2, #0
 80058fa:	d1ca      	bne.n	8005892 <quorem+0x9a>
 80058fc:	3c01      	subs	r4, #1
 80058fe:	e7c5      	b.n	800588c <quorem+0x94>
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	3b04      	subs	r3, #4
 8005904:	2a00      	cmp	r2, #0
 8005906:	d1ef      	bne.n	80058e8 <quorem+0xf0>
 8005908:	3c01      	subs	r4, #1
 800590a:	e7ea      	b.n	80058e2 <quorem+0xea>
 800590c:	2000      	movs	r0, #0
 800590e:	e7ee      	b.n	80058ee <quorem+0xf6>

08005910 <_dtoa_r>:
 8005910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005914:	ec57 6b10 	vmov	r6, r7, d0
 8005918:	b097      	sub	sp, #92	; 0x5c
 800591a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800591c:	9106      	str	r1, [sp, #24]
 800591e:	4604      	mov	r4, r0
 8005920:	920b      	str	r2, [sp, #44]	; 0x2c
 8005922:	9312      	str	r3, [sp, #72]	; 0x48
 8005924:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005928:	e9cd 6700 	strd	r6, r7, [sp]
 800592c:	b93d      	cbnz	r5, 800593e <_dtoa_r+0x2e>
 800592e:	2010      	movs	r0, #16
 8005930:	f7ff fb90 	bl	8005054 <malloc>
 8005934:	6260      	str	r0, [r4, #36]	; 0x24
 8005936:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800593a:	6005      	str	r5, [r0, #0]
 800593c:	60c5      	str	r5, [r0, #12]
 800593e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005940:	6819      	ldr	r1, [r3, #0]
 8005942:	b151      	cbz	r1, 800595a <_dtoa_r+0x4a>
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	604a      	str	r2, [r1, #4]
 8005948:	2301      	movs	r3, #1
 800594a:	4093      	lsls	r3, r2
 800594c:	608b      	str	r3, [r1, #8]
 800594e:	4620      	mov	r0, r4
 8005950:	f000 fde5 	bl	800651e <_Bfree>
 8005954:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	1e3b      	subs	r3, r7, #0
 800595c:	bfbb      	ittet	lt
 800595e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005962:	9301      	strlt	r3, [sp, #4]
 8005964:	2300      	movge	r3, #0
 8005966:	2201      	movlt	r2, #1
 8005968:	bfac      	ite	ge
 800596a:	f8c8 3000 	strge.w	r3, [r8]
 800596e:	f8c8 2000 	strlt.w	r2, [r8]
 8005972:	4baf      	ldr	r3, [pc, #700]	; (8005c30 <_dtoa_r+0x320>)
 8005974:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005978:	ea33 0308 	bics.w	r3, r3, r8
 800597c:	d114      	bne.n	80059a8 <_dtoa_r+0x98>
 800597e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005980:	f242 730f 	movw	r3, #9999	; 0x270f
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	9b00      	ldr	r3, [sp, #0]
 8005988:	b923      	cbnz	r3, 8005994 <_dtoa_r+0x84>
 800598a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800598e:	2800      	cmp	r0, #0
 8005990:	f000 8542 	beq.w	8006418 <_dtoa_r+0xb08>
 8005994:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005996:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005c44 <_dtoa_r+0x334>
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8544 	beq.w	8006428 <_dtoa_r+0xb18>
 80059a0:	f10b 0303 	add.w	r3, fp, #3
 80059a4:	f000 bd3e 	b.w	8006424 <_dtoa_r+0xb14>
 80059a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80059ac:	2200      	movs	r2, #0
 80059ae:	2300      	movs	r3, #0
 80059b0:	4630      	mov	r0, r6
 80059b2:	4639      	mov	r1, r7
 80059b4:	f7fb f854 	bl	8000a60 <__aeabi_dcmpeq>
 80059b8:	4681      	mov	r9, r0
 80059ba:	b168      	cbz	r0, 80059d8 <_dtoa_r+0xc8>
 80059bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059be:	2301      	movs	r3, #1
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8524 	beq.w	8006412 <_dtoa_r+0xb02>
 80059ca:	4b9a      	ldr	r3, [pc, #616]	; (8005c34 <_dtoa_r+0x324>)
 80059cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059ce:	f103 3bff 	add.w	fp, r3, #4294967295
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	f000 bd28 	b.w	8006428 <_dtoa_r+0xb18>
 80059d8:	aa14      	add	r2, sp, #80	; 0x50
 80059da:	a915      	add	r1, sp, #84	; 0x54
 80059dc:	ec47 6b10 	vmov	d0, r6, r7
 80059e0:	4620      	mov	r0, r4
 80059e2:	f000 fff4 	bl	80069ce <__d2b>
 80059e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80059ea:	9004      	str	r0, [sp, #16]
 80059ec:	2d00      	cmp	r5, #0
 80059ee:	d07c      	beq.n	8005aea <_dtoa_r+0x1da>
 80059f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80059f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80059f8:	46b2      	mov	sl, r6
 80059fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80059fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a02:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005a06:	2200      	movs	r2, #0
 8005a08:	4b8b      	ldr	r3, [pc, #556]	; (8005c38 <_dtoa_r+0x328>)
 8005a0a:	4650      	mov	r0, sl
 8005a0c:	4659      	mov	r1, fp
 8005a0e:	f7fa fc07 	bl	8000220 <__aeabi_dsub>
 8005a12:	a381      	add	r3, pc, #516	; (adr r3, 8005c18 <_dtoa_r+0x308>)
 8005a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a18:	f7fa fdba 	bl	8000590 <__aeabi_dmul>
 8005a1c:	a380      	add	r3, pc, #512	; (adr r3, 8005c20 <_dtoa_r+0x310>)
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	f7fa fbff 	bl	8000224 <__adddf3>
 8005a26:	4606      	mov	r6, r0
 8005a28:	4628      	mov	r0, r5
 8005a2a:	460f      	mov	r7, r1
 8005a2c:	f7fa fd46 	bl	80004bc <__aeabi_i2d>
 8005a30:	a37d      	add	r3, pc, #500	; (adr r3, 8005c28 <_dtoa_r+0x318>)
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	f7fa fdab 	bl	8000590 <__aeabi_dmul>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4630      	mov	r0, r6
 8005a40:	4639      	mov	r1, r7
 8005a42:	f7fa fbef 	bl	8000224 <__adddf3>
 8005a46:	4606      	mov	r6, r0
 8005a48:	460f      	mov	r7, r1
 8005a4a:	f7fb f851 	bl	8000af0 <__aeabi_d2iz>
 8005a4e:	2200      	movs	r2, #0
 8005a50:	4682      	mov	sl, r0
 8005a52:	2300      	movs	r3, #0
 8005a54:	4630      	mov	r0, r6
 8005a56:	4639      	mov	r1, r7
 8005a58:	f7fb f80c 	bl	8000a74 <__aeabi_dcmplt>
 8005a5c:	b148      	cbz	r0, 8005a72 <_dtoa_r+0x162>
 8005a5e:	4650      	mov	r0, sl
 8005a60:	f7fa fd2c 	bl	80004bc <__aeabi_i2d>
 8005a64:	4632      	mov	r2, r6
 8005a66:	463b      	mov	r3, r7
 8005a68:	f7fa fffa 	bl	8000a60 <__aeabi_dcmpeq>
 8005a6c:	b908      	cbnz	r0, 8005a72 <_dtoa_r+0x162>
 8005a6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a72:	f1ba 0f16 	cmp.w	sl, #22
 8005a76:	d859      	bhi.n	8005b2c <_dtoa_r+0x21c>
 8005a78:	4970      	ldr	r1, [pc, #448]	; (8005c3c <_dtoa_r+0x32c>)
 8005a7a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005a7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a86:	f7fb f813 	bl	8000ab0 <__aeabi_dcmpgt>
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	d050      	beq.n	8005b30 <_dtoa_r+0x220>
 8005a8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a92:	2300      	movs	r3, #0
 8005a94:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a98:	1b5d      	subs	r5, r3, r5
 8005a9a:	f1b5 0801 	subs.w	r8, r5, #1
 8005a9e:	bf49      	itett	mi
 8005aa0:	f1c5 0301 	rsbmi	r3, r5, #1
 8005aa4:	2300      	movpl	r3, #0
 8005aa6:	9305      	strmi	r3, [sp, #20]
 8005aa8:	f04f 0800 	movmi.w	r8, #0
 8005aac:	bf58      	it	pl
 8005aae:	9305      	strpl	r3, [sp, #20]
 8005ab0:	f1ba 0f00 	cmp.w	sl, #0
 8005ab4:	db3e      	blt.n	8005b34 <_dtoa_r+0x224>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	44d0      	add	r8, sl
 8005aba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005abe:	9307      	str	r3, [sp, #28]
 8005ac0:	9b06      	ldr	r3, [sp, #24]
 8005ac2:	2b09      	cmp	r3, #9
 8005ac4:	f200 8090 	bhi.w	8005be8 <_dtoa_r+0x2d8>
 8005ac8:	2b05      	cmp	r3, #5
 8005aca:	bfc4      	itt	gt
 8005acc:	3b04      	subgt	r3, #4
 8005ace:	9306      	strgt	r3, [sp, #24]
 8005ad0:	9b06      	ldr	r3, [sp, #24]
 8005ad2:	f1a3 0302 	sub.w	r3, r3, #2
 8005ad6:	bfcc      	ite	gt
 8005ad8:	2500      	movgt	r5, #0
 8005ada:	2501      	movle	r5, #1
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	f200 808f 	bhi.w	8005c00 <_dtoa_r+0x2f0>
 8005ae2:	e8df f003 	tbb	[pc, r3]
 8005ae6:	7f7d      	.short	0x7f7d
 8005ae8:	7131      	.short	0x7131
 8005aea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005aee:	441d      	add	r5, r3
 8005af0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005af4:	2820      	cmp	r0, #32
 8005af6:	dd13      	ble.n	8005b20 <_dtoa_r+0x210>
 8005af8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005afc:	9b00      	ldr	r3, [sp, #0]
 8005afe:	fa08 f800 	lsl.w	r8, r8, r0
 8005b02:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005b06:	fa23 f000 	lsr.w	r0, r3, r0
 8005b0a:	ea48 0000 	orr.w	r0, r8, r0
 8005b0e:	f7fa fcc5 	bl	800049c <__aeabi_ui2d>
 8005b12:	2301      	movs	r3, #1
 8005b14:	4682      	mov	sl, r0
 8005b16:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005b1a:	3d01      	subs	r5, #1
 8005b1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b1e:	e772      	b.n	8005a06 <_dtoa_r+0xf6>
 8005b20:	9b00      	ldr	r3, [sp, #0]
 8005b22:	f1c0 0020 	rsb	r0, r0, #32
 8005b26:	fa03 f000 	lsl.w	r0, r3, r0
 8005b2a:	e7f0      	b.n	8005b0e <_dtoa_r+0x1fe>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e7b1      	b.n	8005a94 <_dtoa_r+0x184>
 8005b30:	900f      	str	r0, [sp, #60]	; 0x3c
 8005b32:	e7b0      	b.n	8005a96 <_dtoa_r+0x186>
 8005b34:	9b05      	ldr	r3, [sp, #20]
 8005b36:	eba3 030a 	sub.w	r3, r3, sl
 8005b3a:	9305      	str	r3, [sp, #20]
 8005b3c:	f1ca 0300 	rsb	r3, sl, #0
 8005b40:	9307      	str	r3, [sp, #28]
 8005b42:	2300      	movs	r3, #0
 8005b44:	930e      	str	r3, [sp, #56]	; 0x38
 8005b46:	e7bb      	b.n	8005ac0 <_dtoa_r+0x1b0>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8005b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	dd59      	ble.n	8005c06 <_dtoa_r+0x2f6>
 8005b52:	9302      	str	r3, [sp, #8]
 8005b54:	4699      	mov	r9, r3
 8005b56:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b58:	2200      	movs	r2, #0
 8005b5a:	6072      	str	r2, [r6, #4]
 8005b5c:	2204      	movs	r2, #4
 8005b5e:	f102 0014 	add.w	r0, r2, #20
 8005b62:	4298      	cmp	r0, r3
 8005b64:	6871      	ldr	r1, [r6, #4]
 8005b66:	d953      	bls.n	8005c10 <_dtoa_r+0x300>
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f000 fca4 	bl	80064b6 <_Balloc>
 8005b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b70:	6030      	str	r0, [r6, #0]
 8005b72:	f1b9 0f0e 	cmp.w	r9, #14
 8005b76:	f8d3 b000 	ldr.w	fp, [r3]
 8005b7a:	f200 80e6 	bhi.w	8005d4a <_dtoa_r+0x43a>
 8005b7e:	2d00      	cmp	r5, #0
 8005b80:	f000 80e3 	beq.w	8005d4a <_dtoa_r+0x43a>
 8005b84:	ed9d 7b00 	vldr	d7, [sp]
 8005b88:	f1ba 0f00 	cmp.w	sl, #0
 8005b8c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005b90:	dd74      	ble.n	8005c7c <_dtoa_r+0x36c>
 8005b92:	4a2a      	ldr	r2, [pc, #168]	; (8005c3c <_dtoa_r+0x32c>)
 8005b94:	f00a 030f 	and.w	r3, sl, #15
 8005b98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b9c:	ed93 7b00 	vldr	d7, [r3]
 8005ba0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005ba4:	06f0      	lsls	r0, r6, #27
 8005ba6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005baa:	d565      	bpl.n	8005c78 <_dtoa_r+0x368>
 8005bac:	4b24      	ldr	r3, [pc, #144]	; (8005c40 <_dtoa_r+0x330>)
 8005bae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bb2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005bb6:	f7fa fe15 	bl	80007e4 <__aeabi_ddiv>
 8005bba:	e9cd 0100 	strd	r0, r1, [sp]
 8005bbe:	f006 060f 	and.w	r6, r6, #15
 8005bc2:	2503      	movs	r5, #3
 8005bc4:	4f1e      	ldr	r7, [pc, #120]	; (8005c40 <_dtoa_r+0x330>)
 8005bc6:	e04c      	b.n	8005c62 <_dtoa_r+0x352>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	930a      	str	r3, [sp, #40]	; 0x28
 8005bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bce:	4453      	add	r3, sl
 8005bd0:	f103 0901 	add.w	r9, r3, #1
 8005bd4:	9302      	str	r3, [sp, #8]
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	bfb8      	it	lt
 8005bdc:	2301      	movlt	r3, #1
 8005bde:	e7ba      	b.n	8005b56 <_dtoa_r+0x246>
 8005be0:	2300      	movs	r3, #0
 8005be2:	e7b2      	b.n	8005b4a <_dtoa_r+0x23a>
 8005be4:	2300      	movs	r3, #0
 8005be6:	e7f0      	b.n	8005bca <_dtoa_r+0x2ba>
 8005be8:	2501      	movs	r5, #1
 8005bea:	2300      	movs	r3, #0
 8005bec:	9306      	str	r3, [sp, #24]
 8005bee:	950a      	str	r5, [sp, #40]	; 0x28
 8005bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf4:	9302      	str	r3, [sp, #8]
 8005bf6:	4699      	mov	r9, r3
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2312      	movs	r3, #18
 8005bfc:	920b      	str	r2, [sp, #44]	; 0x2c
 8005bfe:	e7aa      	b.n	8005b56 <_dtoa_r+0x246>
 8005c00:	2301      	movs	r3, #1
 8005c02:	930a      	str	r3, [sp, #40]	; 0x28
 8005c04:	e7f4      	b.n	8005bf0 <_dtoa_r+0x2e0>
 8005c06:	2301      	movs	r3, #1
 8005c08:	9302      	str	r3, [sp, #8]
 8005c0a:	4699      	mov	r9, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	e7f5      	b.n	8005bfc <_dtoa_r+0x2ec>
 8005c10:	3101      	adds	r1, #1
 8005c12:	6071      	str	r1, [r6, #4]
 8005c14:	0052      	lsls	r2, r2, #1
 8005c16:	e7a2      	b.n	8005b5e <_dtoa_r+0x24e>
 8005c18:	636f4361 	.word	0x636f4361
 8005c1c:	3fd287a7 	.word	0x3fd287a7
 8005c20:	8b60c8b3 	.word	0x8b60c8b3
 8005c24:	3fc68a28 	.word	0x3fc68a28
 8005c28:	509f79fb 	.word	0x509f79fb
 8005c2c:	3fd34413 	.word	0x3fd34413
 8005c30:	7ff00000 	.word	0x7ff00000
 8005c34:	08006af1 	.word	0x08006af1
 8005c38:	3ff80000 	.word	0x3ff80000
 8005c3c:	08006b28 	.word	0x08006b28
 8005c40:	08006b00 	.word	0x08006b00
 8005c44:	08006afb 	.word	0x08006afb
 8005c48:	07f1      	lsls	r1, r6, #31
 8005c4a:	d508      	bpl.n	8005c5e <_dtoa_r+0x34e>
 8005c4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c54:	f7fa fc9c 	bl	8000590 <__aeabi_dmul>
 8005c58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005c5c:	3501      	adds	r5, #1
 8005c5e:	1076      	asrs	r6, r6, #1
 8005c60:	3708      	adds	r7, #8
 8005c62:	2e00      	cmp	r6, #0
 8005c64:	d1f0      	bne.n	8005c48 <_dtoa_r+0x338>
 8005c66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c6e:	f7fa fdb9 	bl	80007e4 <__aeabi_ddiv>
 8005c72:	e9cd 0100 	strd	r0, r1, [sp]
 8005c76:	e01a      	b.n	8005cae <_dtoa_r+0x39e>
 8005c78:	2502      	movs	r5, #2
 8005c7a:	e7a3      	b.n	8005bc4 <_dtoa_r+0x2b4>
 8005c7c:	f000 80a0 	beq.w	8005dc0 <_dtoa_r+0x4b0>
 8005c80:	f1ca 0600 	rsb	r6, sl, #0
 8005c84:	4b9f      	ldr	r3, [pc, #636]	; (8005f04 <_dtoa_r+0x5f4>)
 8005c86:	4fa0      	ldr	r7, [pc, #640]	; (8005f08 <_dtoa_r+0x5f8>)
 8005c88:	f006 020f 	and.w	r2, r6, #15
 8005c8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c98:	f7fa fc7a 	bl	8000590 <__aeabi_dmul>
 8005c9c:	e9cd 0100 	strd	r0, r1, [sp]
 8005ca0:	1136      	asrs	r6, r6, #4
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2502      	movs	r5, #2
 8005ca6:	2e00      	cmp	r6, #0
 8005ca8:	d17f      	bne.n	8005daa <_dtoa_r+0x49a>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e1      	bne.n	8005c72 <_dtoa_r+0x362>
 8005cae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 8087 	beq.w	8005dc4 <_dtoa_r+0x4b4>
 8005cb6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	4b93      	ldr	r3, [pc, #588]	; (8005f0c <_dtoa_r+0x5fc>)
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	4639      	mov	r1, r7
 8005cc2:	f7fa fed7 	bl	8000a74 <__aeabi_dcmplt>
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	d07c      	beq.n	8005dc4 <_dtoa_r+0x4b4>
 8005cca:	f1b9 0f00 	cmp.w	r9, #0
 8005cce:	d079      	beq.n	8005dc4 <_dtoa_r+0x4b4>
 8005cd0:	9b02      	ldr	r3, [sp, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	dd35      	ble.n	8005d42 <_dtoa_r+0x432>
 8005cd6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005cda:	9308      	str	r3, [sp, #32]
 8005cdc:	4639      	mov	r1, r7
 8005cde:	2200      	movs	r2, #0
 8005ce0:	4b8b      	ldr	r3, [pc, #556]	; (8005f10 <_dtoa_r+0x600>)
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	f7fa fc54 	bl	8000590 <__aeabi_dmul>
 8005ce8:	e9cd 0100 	strd	r0, r1, [sp]
 8005cec:	9f02      	ldr	r7, [sp, #8]
 8005cee:	3501      	adds	r5, #1
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	f7fa fbe3 	bl	80004bc <__aeabi_i2d>
 8005cf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cfa:	f7fa fc49 	bl	8000590 <__aeabi_dmul>
 8005cfe:	2200      	movs	r2, #0
 8005d00:	4b84      	ldr	r3, [pc, #528]	; (8005f14 <_dtoa_r+0x604>)
 8005d02:	f7fa fa8f 	bl	8000224 <__adddf3>
 8005d06:	4605      	mov	r5, r0
 8005d08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005d0c:	2f00      	cmp	r7, #0
 8005d0e:	d15d      	bne.n	8005dcc <_dtoa_r+0x4bc>
 8005d10:	2200      	movs	r2, #0
 8005d12:	4b81      	ldr	r3, [pc, #516]	; (8005f18 <_dtoa_r+0x608>)
 8005d14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d18:	f7fa fa82 	bl	8000220 <__aeabi_dsub>
 8005d1c:	462a      	mov	r2, r5
 8005d1e:	4633      	mov	r3, r6
 8005d20:	e9cd 0100 	strd	r0, r1, [sp]
 8005d24:	f7fa fec4 	bl	8000ab0 <__aeabi_dcmpgt>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	f040 8288 	bne.w	800623e <_dtoa_r+0x92e>
 8005d2e:	462a      	mov	r2, r5
 8005d30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005d34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d38:	f7fa fe9c 	bl	8000a74 <__aeabi_dcmplt>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	f040 827c 	bne.w	800623a <_dtoa_r+0x92a>
 8005d42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d46:	e9cd 2300 	strd	r2, r3, [sp]
 8005d4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f2c0 8150 	blt.w	8005ff2 <_dtoa_r+0x6e2>
 8005d52:	f1ba 0f0e 	cmp.w	sl, #14
 8005d56:	f300 814c 	bgt.w	8005ff2 <_dtoa_r+0x6e2>
 8005d5a:	4b6a      	ldr	r3, [pc, #424]	; (8005f04 <_dtoa_r+0x5f4>)
 8005d5c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005d60:	ed93 7b00 	vldr	d7, [r3]
 8005d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005d6c:	f280 80d8 	bge.w	8005f20 <_dtoa_r+0x610>
 8005d70:	f1b9 0f00 	cmp.w	r9, #0
 8005d74:	f300 80d4 	bgt.w	8005f20 <_dtoa_r+0x610>
 8005d78:	f040 825e 	bne.w	8006238 <_dtoa_r+0x928>
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	4b66      	ldr	r3, [pc, #408]	; (8005f18 <_dtoa_r+0x608>)
 8005d80:	ec51 0b17 	vmov	r0, r1, d7
 8005d84:	f7fa fc04 	bl	8000590 <__aeabi_dmul>
 8005d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d8c:	f7fa fe86 	bl	8000a9c <__aeabi_dcmpge>
 8005d90:	464f      	mov	r7, r9
 8005d92:	464e      	mov	r6, r9
 8005d94:	2800      	cmp	r0, #0
 8005d96:	f040 8234 	bne.w	8006202 <_dtoa_r+0x8f2>
 8005d9a:	2331      	movs	r3, #49	; 0x31
 8005d9c:	f10b 0501 	add.w	r5, fp, #1
 8005da0:	f88b 3000 	strb.w	r3, [fp]
 8005da4:	f10a 0a01 	add.w	sl, sl, #1
 8005da8:	e22f      	b.n	800620a <_dtoa_r+0x8fa>
 8005daa:	07f2      	lsls	r2, r6, #31
 8005dac:	d505      	bpl.n	8005dba <_dtoa_r+0x4aa>
 8005dae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005db2:	f7fa fbed 	bl	8000590 <__aeabi_dmul>
 8005db6:	3501      	adds	r5, #1
 8005db8:	2301      	movs	r3, #1
 8005dba:	1076      	asrs	r6, r6, #1
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	e772      	b.n	8005ca6 <_dtoa_r+0x396>
 8005dc0:	2502      	movs	r5, #2
 8005dc2:	e774      	b.n	8005cae <_dtoa_r+0x39e>
 8005dc4:	f8cd a020 	str.w	sl, [sp, #32]
 8005dc8:	464f      	mov	r7, r9
 8005dca:	e791      	b.n	8005cf0 <_dtoa_r+0x3e0>
 8005dcc:	4b4d      	ldr	r3, [pc, #308]	; (8005f04 <_dtoa_r+0x5f4>)
 8005dce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005dd2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d047      	beq.n	8005e6c <_dtoa_r+0x55c>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	2000      	movs	r0, #0
 8005de2:	494e      	ldr	r1, [pc, #312]	; (8005f1c <_dtoa_r+0x60c>)
 8005de4:	f7fa fcfe 	bl	80007e4 <__aeabi_ddiv>
 8005de8:	462a      	mov	r2, r5
 8005dea:	4633      	mov	r3, r6
 8005dec:	f7fa fa18 	bl	8000220 <__aeabi_dsub>
 8005df0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005df4:	465d      	mov	r5, fp
 8005df6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dfa:	f7fa fe79 	bl	8000af0 <__aeabi_d2iz>
 8005dfe:	4606      	mov	r6, r0
 8005e00:	f7fa fb5c 	bl	80004bc <__aeabi_i2d>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e0c:	f7fa fa08 	bl	8000220 <__aeabi_dsub>
 8005e10:	3630      	adds	r6, #48	; 0x30
 8005e12:	f805 6b01 	strb.w	r6, [r5], #1
 8005e16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005e1a:	e9cd 0100 	strd	r0, r1, [sp]
 8005e1e:	f7fa fe29 	bl	8000a74 <__aeabi_dcmplt>
 8005e22:	2800      	cmp	r0, #0
 8005e24:	d163      	bne.n	8005eee <_dtoa_r+0x5de>
 8005e26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	4937      	ldr	r1, [pc, #220]	; (8005f0c <_dtoa_r+0x5fc>)
 8005e2e:	f7fa f9f7 	bl	8000220 <__aeabi_dsub>
 8005e32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005e36:	f7fa fe1d 	bl	8000a74 <__aeabi_dcmplt>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	f040 80b7 	bne.w	8005fae <_dtoa_r+0x69e>
 8005e40:	eba5 030b 	sub.w	r3, r5, fp
 8005e44:	429f      	cmp	r7, r3
 8005e46:	f77f af7c 	ble.w	8005d42 <_dtoa_r+0x432>
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	4b30      	ldr	r3, [pc, #192]	; (8005f10 <_dtoa_r+0x600>)
 8005e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e52:	f7fa fb9d 	bl	8000590 <__aeabi_dmul>
 8005e56:	2200      	movs	r2, #0
 8005e58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005e5c:	4b2c      	ldr	r3, [pc, #176]	; (8005f10 <_dtoa_r+0x600>)
 8005e5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e62:	f7fa fb95 	bl	8000590 <__aeabi_dmul>
 8005e66:	e9cd 0100 	strd	r0, r1, [sp]
 8005e6a:	e7c4      	b.n	8005df6 <_dtoa_r+0x4e6>
 8005e6c:	462a      	mov	r2, r5
 8005e6e:	4633      	mov	r3, r6
 8005e70:	f7fa fb8e 	bl	8000590 <__aeabi_dmul>
 8005e74:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005e78:	eb0b 0507 	add.w	r5, fp, r7
 8005e7c:	465e      	mov	r6, fp
 8005e7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e82:	f7fa fe35 	bl	8000af0 <__aeabi_d2iz>
 8005e86:	4607      	mov	r7, r0
 8005e88:	f7fa fb18 	bl	80004bc <__aeabi_i2d>
 8005e8c:	3730      	adds	r7, #48	; 0x30
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e96:	f7fa f9c3 	bl	8000220 <__aeabi_dsub>
 8005e9a:	f806 7b01 	strb.w	r7, [r6], #1
 8005e9e:	42ae      	cmp	r6, r5
 8005ea0:	e9cd 0100 	strd	r0, r1, [sp]
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	d126      	bne.n	8005ef8 <_dtoa_r+0x5e8>
 8005eaa:	4b1c      	ldr	r3, [pc, #112]	; (8005f1c <_dtoa_r+0x60c>)
 8005eac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005eb0:	f7fa f9b8 	bl	8000224 <__adddf3>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ebc:	f7fa fdf8 	bl	8000ab0 <__aeabi_dcmpgt>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d174      	bne.n	8005fae <_dtoa_r+0x69e>
 8005ec4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ec8:	2000      	movs	r0, #0
 8005eca:	4914      	ldr	r1, [pc, #80]	; (8005f1c <_dtoa_r+0x60c>)
 8005ecc:	f7fa f9a8 	bl	8000220 <__aeabi_dsub>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ed8:	f7fa fdcc 	bl	8000a74 <__aeabi_dcmplt>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	f43f af30 	beq.w	8005d42 <_dtoa_r+0x432>
 8005ee2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ee6:	2b30      	cmp	r3, #48	; 0x30
 8005ee8:	f105 32ff 	add.w	r2, r5, #4294967295
 8005eec:	d002      	beq.n	8005ef4 <_dtoa_r+0x5e4>
 8005eee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005ef2:	e04a      	b.n	8005f8a <_dtoa_r+0x67a>
 8005ef4:	4615      	mov	r5, r2
 8005ef6:	e7f4      	b.n	8005ee2 <_dtoa_r+0x5d2>
 8005ef8:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <_dtoa_r+0x600>)
 8005efa:	f7fa fb49 	bl	8000590 <__aeabi_dmul>
 8005efe:	e9cd 0100 	strd	r0, r1, [sp]
 8005f02:	e7bc      	b.n	8005e7e <_dtoa_r+0x56e>
 8005f04:	08006b28 	.word	0x08006b28
 8005f08:	08006b00 	.word	0x08006b00
 8005f0c:	3ff00000 	.word	0x3ff00000
 8005f10:	40240000 	.word	0x40240000
 8005f14:	401c0000 	.word	0x401c0000
 8005f18:	40140000 	.word	0x40140000
 8005f1c:	3fe00000 	.word	0x3fe00000
 8005f20:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005f24:	465d      	mov	r5, fp
 8005f26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	4639      	mov	r1, r7
 8005f2e:	f7fa fc59 	bl	80007e4 <__aeabi_ddiv>
 8005f32:	f7fa fddd 	bl	8000af0 <__aeabi_d2iz>
 8005f36:	4680      	mov	r8, r0
 8005f38:	f7fa fac0 	bl	80004bc <__aeabi_i2d>
 8005f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f40:	f7fa fb26 	bl	8000590 <__aeabi_dmul>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4630      	mov	r0, r6
 8005f4a:	4639      	mov	r1, r7
 8005f4c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005f50:	f7fa f966 	bl	8000220 <__aeabi_dsub>
 8005f54:	f805 6b01 	strb.w	r6, [r5], #1
 8005f58:	eba5 060b 	sub.w	r6, r5, fp
 8005f5c:	45b1      	cmp	r9, r6
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	d139      	bne.n	8005fd8 <_dtoa_r+0x6c8>
 8005f64:	f7fa f95e 	bl	8000224 <__adddf3>
 8005f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f6c:	4606      	mov	r6, r0
 8005f6e:	460f      	mov	r7, r1
 8005f70:	f7fa fd9e 	bl	8000ab0 <__aeabi_dcmpgt>
 8005f74:	b9c8      	cbnz	r0, 8005faa <_dtoa_r+0x69a>
 8005f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	f7fa fd6f 	bl	8000a60 <__aeabi_dcmpeq>
 8005f82:	b110      	cbz	r0, 8005f8a <_dtoa_r+0x67a>
 8005f84:	f018 0f01 	tst.w	r8, #1
 8005f88:	d10f      	bne.n	8005faa <_dtoa_r+0x69a>
 8005f8a:	9904      	ldr	r1, [sp, #16]
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f000 fac6 	bl	800651e <_Bfree>
 8005f92:	2300      	movs	r3, #0
 8005f94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f96:	702b      	strb	r3, [r5, #0]
 8005f98:	f10a 0301 	add.w	r3, sl, #1
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 8241 	beq.w	8006428 <_dtoa_r+0xb18>
 8005fa6:	601d      	str	r5, [r3, #0]
 8005fa8:	e23e      	b.n	8006428 <_dtoa_r+0xb18>
 8005faa:	f8cd a020 	str.w	sl, [sp, #32]
 8005fae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005fb2:	2a39      	cmp	r2, #57	; 0x39
 8005fb4:	f105 33ff 	add.w	r3, r5, #4294967295
 8005fb8:	d108      	bne.n	8005fcc <_dtoa_r+0x6bc>
 8005fba:	459b      	cmp	fp, r3
 8005fbc:	d10a      	bne.n	8005fd4 <_dtoa_r+0x6c4>
 8005fbe:	9b08      	ldr	r3, [sp, #32]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	9308      	str	r3, [sp, #32]
 8005fc4:	2330      	movs	r3, #48	; 0x30
 8005fc6:	f88b 3000 	strb.w	r3, [fp]
 8005fca:	465b      	mov	r3, fp
 8005fcc:	781a      	ldrb	r2, [r3, #0]
 8005fce:	3201      	adds	r2, #1
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	e78c      	b.n	8005eee <_dtoa_r+0x5de>
 8005fd4:	461d      	mov	r5, r3
 8005fd6:	e7ea      	b.n	8005fae <_dtoa_r+0x69e>
 8005fd8:	2200      	movs	r2, #0
 8005fda:	4b9b      	ldr	r3, [pc, #620]	; (8006248 <_dtoa_r+0x938>)
 8005fdc:	f7fa fad8 	bl	8000590 <__aeabi_dmul>
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	460f      	mov	r7, r1
 8005fe8:	f7fa fd3a 	bl	8000a60 <__aeabi_dcmpeq>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d09a      	beq.n	8005f26 <_dtoa_r+0x616>
 8005ff0:	e7cb      	b.n	8005f8a <_dtoa_r+0x67a>
 8005ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ff4:	2a00      	cmp	r2, #0
 8005ff6:	f000 808b 	beq.w	8006110 <_dtoa_r+0x800>
 8005ffa:	9a06      	ldr	r2, [sp, #24]
 8005ffc:	2a01      	cmp	r2, #1
 8005ffe:	dc6e      	bgt.n	80060de <_dtoa_r+0x7ce>
 8006000:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006002:	2a00      	cmp	r2, #0
 8006004:	d067      	beq.n	80060d6 <_dtoa_r+0x7c6>
 8006006:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800600a:	9f07      	ldr	r7, [sp, #28]
 800600c:	9d05      	ldr	r5, [sp, #20]
 800600e:	9a05      	ldr	r2, [sp, #20]
 8006010:	2101      	movs	r1, #1
 8006012:	441a      	add	r2, r3
 8006014:	4620      	mov	r0, r4
 8006016:	9205      	str	r2, [sp, #20]
 8006018:	4498      	add	r8, r3
 800601a:	f000 fb20 	bl	800665e <__i2b>
 800601e:	4606      	mov	r6, r0
 8006020:	2d00      	cmp	r5, #0
 8006022:	dd0c      	ble.n	800603e <_dtoa_r+0x72e>
 8006024:	f1b8 0f00 	cmp.w	r8, #0
 8006028:	dd09      	ble.n	800603e <_dtoa_r+0x72e>
 800602a:	4545      	cmp	r5, r8
 800602c:	9a05      	ldr	r2, [sp, #20]
 800602e:	462b      	mov	r3, r5
 8006030:	bfa8      	it	ge
 8006032:	4643      	movge	r3, r8
 8006034:	1ad2      	subs	r2, r2, r3
 8006036:	9205      	str	r2, [sp, #20]
 8006038:	1aed      	subs	r5, r5, r3
 800603a:	eba8 0803 	sub.w	r8, r8, r3
 800603e:	9b07      	ldr	r3, [sp, #28]
 8006040:	b1eb      	cbz	r3, 800607e <_dtoa_r+0x76e>
 8006042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006044:	2b00      	cmp	r3, #0
 8006046:	d067      	beq.n	8006118 <_dtoa_r+0x808>
 8006048:	b18f      	cbz	r7, 800606e <_dtoa_r+0x75e>
 800604a:	4631      	mov	r1, r6
 800604c:	463a      	mov	r2, r7
 800604e:	4620      	mov	r0, r4
 8006050:	f000 fba4 	bl	800679c <__pow5mult>
 8006054:	9a04      	ldr	r2, [sp, #16]
 8006056:	4601      	mov	r1, r0
 8006058:	4606      	mov	r6, r0
 800605a:	4620      	mov	r0, r4
 800605c:	f000 fb08 	bl	8006670 <__multiply>
 8006060:	9904      	ldr	r1, [sp, #16]
 8006062:	9008      	str	r0, [sp, #32]
 8006064:	4620      	mov	r0, r4
 8006066:	f000 fa5a 	bl	800651e <_Bfree>
 800606a:	9b08      	ldr	r3, [sp, #32]
 800606c:	9304      	str	r3, [sp, #16]
 800606e:	9b07      	ldr	r3, [sp, #28]
 8006070:	1bda      	subs	r2, r3, r7
 8006072:	d004      	beq.n	800607e <_dtoa_r+0x76e>
 8006074:	9904      	ldr	r1, [sp, #16]
 8006076:	4620      	mov	r0, r4
 8006078:	f000 fb90 	bl	800679c <__pow5mult>
 800607c:	9004      	str	r0, [sp, #16]
 800607e:	2101      	movs	r1, #1
 8006080:	4620      	mov	r0, r4
 8006082:	f000 faec 	bl	800665e <__i2b>
 8006086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006088:	4607      	mov	r7, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 81d0 	beq.w	8006430 <_dtoa_r+0xb20>
 8006090:	461a      	mov	r2, r3
 8006092:	4601      	mov	r1, r0
 8006094:	4620      	mov	r0, r4
 8006096:	f000 fb81 	bl	800679c <__pow5mult>
 800609a:	9b06      	ldr	r3, [sp, #24]
 800609c:	2b01      	cmp	r3, #1
 800609e:	4607      	mov	r7, r0
 80060a0:	dc40      	bgt.n	8006124 <_dtoa_r+0x814>
 80060a2:	9b00      	ldr	r3, [sp, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d139      	bne.n	800611c <_dtoa_r+0x80c>
 80060a8:	9b01      	ldr	r3, [sp, #4]
 80060aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d136      	bne.n	8006120 <_dtoa_r+0x810>
 80060b2:	9b01      	ldr	r3, [sp, #4]
 80060b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060b8:	0d1b      	lsrs	r3, r3, #20
 80060ba:	051b      	lsls	r3, r3, #20
 80060bc:	b12b      	cbz	r3, 80060ca <_dtoa_r+0x7ba>
 80060be:	9b05      	ldr	r3, [sp, #20]
 80060c0:	3301      	adds	r3, #1
 80060c2:	9305      	str	r3, [sp, #20]
 80060c4:	f108 0801 	add.w	r8, r8, #1
 80060c8:	2301      	movs	r3, #1
 80060ca:	9307      	str	r3, [sp, #28]
 80060cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d12a      	bne.n	8006128 <_dtoa_r+0x818>
 80060d2:	2001      	movs	r0, #1
 80060d4:	e030      	b.n	8006138 <_dtoa_r+0x828>
 80060d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80060dc:	e795      	b.n	800600a <_dtoa_r+0x6fa>
 80060de:	9b07      	ldr	r3, [sp, #28]
 80060e0:	f109 37ff 	add.w	r7, r9, #4294967295
 80060e4:	42bb      	cmp	r3, r7
 80060e6:	bfbf      	itttt	lt
 80060e8:	9b07      	ldrlt	r3, [sp, #28]
 80060ea:	9707      	strlt	r7, [sp, #28]
 80060ec:	1afa      	sublt	r2, r7, r3
 80060ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80060f0:	bfbb      	ittet	lt
 80060f2:	189b      	addlt	r3, r3, r2
 80060f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80060f6:	1bdf      	subge	r7, r3, r7
 80060f8:	2700      	movlt	r7, #0
 80060fa:	f1b9 0f00 	cmp.w	r9, #0
 80060fe:	bfb5      	itete	lt
 8006100:	9b05      	ldrlt	r3, [sp, #20]
 8006102:	9d05      	ldrge	r5, [sp, #20]
 8006104:	eba3 0509 	sublt.w	r5, r3, r9
 8006108:	464b      	movge	r3, r9
 800610a:	bfb8      	it	lt
 800610c:	2300      	movlt	r3, #0
 800610e:	e77e      	b.n	800600e <_dtoa_r+0x6fe>
 8006110:	9f07      	ldr	r7, [sp, #28]
 8006112:	9d05      	ldr	r5, [sp, #20]
 8006114:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006116:	e783      	b.n	8006020 <_dtoa_r+0x710>
 8006118:	9a07      	ldr	r2, [sp, #28]
 800611a:	e7ab      	b.n	8006074 <_dtoa_r+0x764>
 800611c:	2300      	movs	r3, #0
 800611e:	e7d4      	b.n	80060ca <_dtoa_r+0x7ba>
 8006120:	9b00      	ldr	r3, [sp, #0]
 8006122:	e7d2      	b.n	80060ca <_dtoa_r+0x7ba>
 8006124:	2300      	movs	r3, #0
 8006126:	9307      	str	r3, [sp, #28]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800612e:	6918      	ldr	r0, [r3, #16]
 8006130:	f000 fa47 	bl	80065c2 <__hi0bits>
 8006134:	f1c0 0020 	rsb	r0, r0, #32
 8006138:	4440      	add	r0, r8
 800613a:	f010 001f 	ands.w	r0, r0, #31
 800613e:	d047      	beq.n	80061d0 <_dtoa_r+0x8c0>
 8006140:	f1c0 0320 	rsb	r3, r0, #32
 8006144:	2b04      	cmp	r3, #4
 8006146:	dd3b      	ble.n	80061c0 <_dtoa_r+0x8b0>
 8006148:	9b05      	ldr	r3, [sp, #20]
 800614a:	f1c0 001c 	rsb	r0, r0, #28
 800614e:	4403      	add	r3, r0
 8006150:	9305      	str	r3, [sp, #20]
 8006152:	4405      	add	r5, r0
 8006154:	4480      	add	r8, r0
 8006156:	9b05      	ldr	r3, [sp, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	dd05      	ble.n	8006168 <_dtoa_r+0x858>
 800615c:	461a      	mov	r2, r3
 800615e:	9904      	ldr	r1, [sp, #16]
 8006160:	4620      	mov	r0, r4
 8006162:	f000 fb69 	bl	8006838 <__lshift>
 8006166:	9004      	str	r0, [sp, #16]
 8006168:	f1b8 0f00 	cmp.w	r8, #0
 800616c:	dd05      	ble.n	800617a <_dtoa_r+0x86a>
 800616e:	4639      	mov	r1, r7
 8006170:	4642      	mov	r2, r8
 8006172:	4620      	mov	r0, r4
 8006174:	f000 fb60 	bl	8006838 <__lshift>
 8006178:	4607      	mov	r7, r0
 800617a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800617c:	b353      	cbz	r3, 80061d4 <_dtoa_r+0x8c4>
 800617e:	4639      	mov	r1, r7
 8006180:	9804      	ldr	r0, [sp, #16]
 8006182:	f000 fbad 	bl	80068e0 <__mcmp>
 8006186:	2800      	cmp	r0, #0
 8006188:	da24      	bge.n	80061d4 <_dtoa_r+0x8c4>
 800618a:	2300      	movs	r3, #0
 800618c:	220a      	movs	r2, #10
 800618e:	9904      	ldr	r1, [sp, #16]
 8006190:	4620      	mov	r0, r4
 8006192:	f000 f9db 	bl	800654c <__multadd>
 8006196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006198:	9004      	str	r0, [sp, #16]
 800619a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 814d 	beq.w	800643e <_dtoa_r+0xb2e>
 80061a4:	2300      	movs	r3, #0
 80061a6:	4631      	mov	r1, r6
 80061a8:	220a      	movs	r2, #10
 80061aa:	4620      	mov	r0, r4
 80061ac:	f000 f9ce 	bl	800654c <__multadd>
 80061b0:	9b02      	ldr	r3, [sp, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	4606      	mov	r6, r0
 80061b6:	dc4f      	bgt.n	8006258 <_dtoa_r+0x948>
 80061b8:	9b06      	ldr	r3, [sp, #24]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	dd4c      	ble.n	8006258 <_dtoa_r+0x948>
 80061be:	e011      	b.n	80061e4 <_dtoa_r+0x8d4>
 80061c0:	d0c9      	beq.n	8006156 <_dtoa_r+0x846>
 80061c2:	9a05      	ldr	r2, [sp, #20]
 80061c4:	331c      	adds	r3, #28
 80061c6:	441a      	add	r2, r3
 80061c8:	9205      	str	r2, [sp, #20]
 80061ca:	441d      	add	r5, r3
 80061cc:	4498      	add	r8, r3
 80061ce:	e7c2      	b.n	8006156 <_dtoa_r+0x846>
 80061d0:	4603      	mov	r3, r0
 80061d2:	e7f6      	b.n	80061c2 <_dtoa_r+0x8b2>
 80061d4:	f1b9 0f00 	cmp.w	r9, #0
 80061d8:	dc38      	bgt.n	800624c <_dtoa_r+0x93c>
 80061da:	9b06      	ldr	r3, [sp, #24]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	dd35      	ble.n	800624c <_dtoa_r+0x93c>
 80061e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80061e4:	9b02      	ldr	r3, [sp, #8]
 80061e6:	b963      	cbnz	r3, 8006202 <_dtoa_r+0x8f2>
 80061e8:	4639      	mov	r1, r7
 80061ea:	2205      	movs	r2, #5
 80061ec:	4620      	mov	r0, r4
 80061ee:	f000 f9ad 	bl	800654c <__multadd>
 80061f2:	4601      	mov	r1, r0
 80061f4:	4607      	mov	r7, r0
 80061f6:	9804      	ldr	r0, [sp, #16]
 80061f8:	f000 fb72 	bl	80068e0 <__mcmp>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	f73f adcc 	bgt.w	8005d9a <_dtoa_r+0x48a>
 8006202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006204:	465d      	mov	r5, fp
 8006206:	ea6f 0a03 	mvn.w	sl, r3
 800620a:	f04f 0900 	mov.w	r9, #0
 800620e:	4639      	mov	r1, r7
 8006210:	4620      	mov	r0, r4
 8006212:	f000 f984 	bl	800651e <_Bfree>
 8006216:	2e00      	cmp	r6, #0
 8006218:	f43f aeb7 	beq.w	8005f8a <_dtoa_r+0x67a>
 800621c:	f1b9 0f00 	cmp.w	r9, #0
 8006220:	d005      	beq.n	800622e <_dtoa_r+0x91e>
 8006222:	45b1      	cmp	r9, r6
 8006224:	d003      	beq.n	800622e <_dtoa_r+0x91e>
 8006226:	4649      	mov	r1, r9
 8006228:	4620      	mov	r0, r4
 800622a:	f000 f978 	bl	800651e <_Bfree>
 800622e:	4631      	mov	r1, r6
 8006230:	4620      	mov	r0, r4
 8006232:	f000 f974 	bl	800651e <_Bfree>
 8006236:	e6a8      	b.n	8005f8a <_dtoa_r+0x67a>
 8006238:	2700      	movs	r7, #0
 800623a:	463e      	mov	r6, r7
 800623c:	e7e1      	b.n	8006202 <_dtoa_r+0x8f2>
 800623e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006242:	463e      	mov	r6, r7
 8006244:	e5a9      	b.n	8005d9a <_dtoa_r+0x48a>
 8006246:	bf00      	nop
 8006248:	40240000 	.word	0x40240000
 800624c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800624e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 80fa 	beq.w	800644c <_dtoa_r+0xb3c>
 8006258:	2d00      	cmp	r5, #0
 800625a:	dd05      	ble.n	8006268 <_dtoa_r+0x958>
 800625c:	4631      	mov	r1, r6
 800625e:	462a      	mov	r2, r5
 8006260:	4620      	mov	r0, r4
 8006262:	f000 fae9 	bl	8006838 <__lshift>
 8006266:	4606      	mov	r6, r0
 8006268:	9b07      	ldr	r3, [sp, #28]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d04c      	beq.n	8006308 <_dtoa_r+0x9f8>
 800626e:	6871      	ldr	r1, [r6, #4]
 8006270:	4620      	mov	r0, r4
 8006272:	f000 f920 	bl	80064b6 <_Balloc>
 8006276:	6932      	ldr	r2, [r6, #16]
 8006278:	3202      	adds	r2, #2
 800627a:	4605      	mov	r5, r0
 800627c:	0092      	lsls	r2, r2, #2
 800627e:	f106 010c 	add.w	r1, r6, #12
 8006282:	300c      	adds	r0, #12
 8006284:	f000 f90a 	bl	800649c <memcpy>
 8006288:	2201      	movs	r2, #1
 800628a:	4629      	mov	r1, r5
 800628c:	4620      	mov	r0, r4
 800628e:	f000 fad3 	bl	8006838 <__lshift>
 8006292:	9b00      	ldr	r3, [sp, #0]
 8006294:	f8cd b014 	str.w	fp, [sp, #20]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	46b1      	mov	r9, r6
 800629e:	9307      	str	r3, [sp, #28]
 80062a0:	4606      	mov	r6, r0
 80062a2:	4639      	mov	r1, r7
 80062a4:	9804      	ldr	r0, [sp, #16]
 80062a6:	f7ff faa7 	bl	80057f8 <quorem>
 80062aa:	4649      	mov	r1, r9
 80062ac:	4605      	mov	r5, r0
 80062ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80062b2:	9804      	ldr	r0, [sp, #16]
 80062b4:	f000 fb14 	bl	80068e0 <__mcmp>
 80062b8:	4632      	mov	r2, r6
 80062ba:	9000      	str	r0, [sp, #0]
 80062bc:	4639      	mov	r1, r7
 80062be:	4620      	mov	r0, r4
 80062c0:	f000 fb28 	bl	8006914 <__mdiff>
 80062c4:	68c3      	ldr	r3, [r0, #12]
 80062c6:	4602      	mov	r2, r0
 80062c8:	bb03      	cbnz	r3, 800630c <_dtoa_r+0x9fc>
 80062ca:	4601      	mov	r1, r0
 80062cc:	9008      	str	r0, [sp, #32]
 80062ce:	9804      	ldr	r0, [sp, #16]
 80062d0:	f000 fb06 	bl	80068e0 <__mcmp>
 80062d4:	9a08      	ldr	r2, [sp, #32]
 80062d6:	4603      	mov	r3, r0
 80062d8:	4611      	mov	r1, r2
 80062da:	4620      	mov	r0, r4
 80062dc:	9308      	str	r3, [sp, #32]
 80062de:	f000 f91e 	bl	800651e <_Bfree>
 80062e2:	9b08      	ldr	r3, [sp, #32]
 80062e4:	b9a3      	cbnz	r3, 8006310 <_dtoa_r+0xa00>
 80062e6:	9a06      	ldr	r2, [sp, #24]
 80062e8:	b992      	cbnz	r2, 8006310 <_dtoa_r+0xa00>
 80062ea:	9a07      	ldr	r2, [sp, #28]
 80062ec:	b982      	cbnz	r2, 8006310 <_dtoa_r+0xa00>
 80062ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80062f2:	d029      	beq.n	8006348 <_dtoa_r+0xa38>
 80062f4:	9b00      	ldr	r3, [sp, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	dd01      	ble.n	80062fe <_dtoa_r+0x9ee>
 80062fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80062fe:	9b05      	ldr	r3, [sp, #20]
 8006300:	1c5d      	adds	r5, r3, #1
 8006302:	f883 8000 	strb.w	r8, [r3]
 8006306:	e782      	b.n	800620e <_dtoa_r+0x8fe>
 8006308:	4630      	mov	r0, r6
 800630a:	e7c2      	b.n	8006292 <_dtoa_r+0x982>
 800630c:	2301      	movs	r3, #1
 800630e:	e7e3      	b.n	80062d8 <_dtoa_r+0x9c8>
 8006310:	9a00      	ldr	r2, [sp, #0]
 8006312:	2a00      	cmp	r2, #0
 8006314:	db04      	blt.n	8006320 <_dtoa_r+0xa10>
 8006316:	d125      	bne.n	8006364 <_dtoa_r+0xa54>
 8006318:	9a06      	ldr	r2, [sp, #24]
 800631a:	bb1a      	cbnz	r2, 8006364 <_dtoa_r+0xa54>
 800631c:	9a07      	ldr	r2, [sp, #28]
 800631e:	bb0a      	cbnz	r2, 8006364 <_dtoa_r+0xa54>
 8006320:	2b00      	cmp	r3, #0
 8006322:	ddec      	ble.n	80062fe <_dtoa_r+0x9ee>
 8006324:	2201      	movs	r2, #1
 8006326:	9904      	ldr	r1, [sp, #16]
 8006328:	4620      	mov	r0, r4
 800632a:	f000 fa85 	bl	8006838 <__lshift>
 800632e:	4639      	mov	r1, r7
 8006330:	9004      	str	r0, [sp, #16]
 8006332:	f000 fad5 	bl	80068e0 <__mcmp>
 8006336:	2800      	cmp	r0, #0
 8006338:	dc03      	bgt.n	8006342 <_dtoa_r+0xa32>
 800633a:	d1e0      	bne.n	80062fe <_dtoa_r+0x9ee>
 800633c:	f018 0f01 	tst.w	r8, #1
 8006340:	d0dd      	beq.n	80062fe <_dtoa_r+0x9ee>
 8006342:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006346:	d1d8      	bne.n	80062fa <_dtoa_r+0x9ea>
 8006348:	9b05      	ldr	r3, [sp, #20]
 800634a:	9a05      	ldr	r2, [sp, #20]
 800634c:	1c5d      	adds	r5, r3, #1
 800634e:	2339      	movs	r3, #57	; 0x39
 8006350:	7013      	strb	r3, [r2, #0]
 8006352:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006356:	2b39      	cmp	r3, #57	; 0x39
 8006358:	f105 32ff 	add.w	r2, r5, #4294967295
 800635c:	d04f      	beq.n	80063fe <_dtoa_r+0xaee>
 800635e:	3301      	adds	r3, #1
 8006360:	7013      	strb	r3, [r2, #0]
 8006362:	e754      	b.n	800620e <_dtoa_r+0x8fe>
 8006364:	9a05      	ldr	r2, [sp, #20]
 8006366:	2b00      	cmp	r3, #0
 8006368:	f102 0501 	add.w	r5, r2, #1
 800636c:	dd06      	ble.n	800637c <_dtoa_r+0xa6c>
 800636e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006372:	d0e9      	beq.n	8006348 <_dtoa_r+0xa38>
 8006374:	f108 0801 	add.w	r8, r8, #1
 8006378:	9b05      	ldr	r3, [sp, #20]
 800637a:	e7c2      	b.n	8006302 <_dtoa_r+0x9f2>
 800637c:	9a02      	ldr	r2, [sp, #8]
 800637e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006382:	eba5 030b 	sub.w	r3, r5, fp
 8006386:	4293      	cmp	r3, r2
 8006388:	d021      	beq.n	80063ce <_dtoa_r+0xabe>
 800638a:	2300      	movs	r3, #0
 800638c:	220a      	movs	r2, #10
 800638e:	9904      	ldr	r1, [sp, #16]
 8006390:	4620      	mov	r0, r4
 8006392:	f000 f8db 	bl	800654c <__multadd>
 8006396:	45b1      	cmp	r9, r6
 8006398:	9004      	str	r0, [sp, #16]
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	f04f 020a 	mov.w	r2, #10
 80063a2:	4649      	mov	r1, r9
 80063a4:	4620      	mov	r0, r4
 80063a6:	d105      	bne.n	80063b4 <_dtoa_r+0xaa4>
 80063a8:	f000 f8d0 	bl	800654c <__multadd>
 80063ac:	4681      	mov	r9, r0
 80063ae:	4606      	mov	r6, r0
 80063b0:	9505      	str	r5, [sp, #20]
 80063b2:	e776      	b.n	80062a2 <_dtoa_r+0x992>
 80063b4:	f000 f8ca 	bl	800654c <__multadd>
 80063b8:	4631      	mov	r1, r6
 80063ba:	4681      	mov	r9, r0
 80063bc:	2300      	movs	r3, #0
 80063be:	220a      	movs	r2, #10
 80063c0:	4620      	mov	r0, r4
 80063c2:	f000 f8c3 	bl	800654c <__multadd>
 80063c6:	4606      	mov	r6, r0
 80063c8:	e7f2      	b.n	80063b0 <_dtoa_r+0xaa0>
 80063ca:	f04f 0900 	mov.w	r9, #0
 80063ce:	2201      	movs	r2, #1
 80063d0:	9904      	ldr	r1, [sp, #16]
 80063d2:	4620      	mov	r0, r4
 80063d4:	f000 fa30 	bl	8006838 <__lshift>
 80063d8:	4639      	mov	r1, r7
 80063da:	9004      	str	r0, [sp, #16]
 80063dc:	f000 fa80 	bl	80068e0 <__mcmp>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	dcb6      	bgt.n	8006352 <_dtoa_r+0xa42>
 80063e4:	d102      	bne.n	80063ec <_dtoa_r+0xadc>
 80063e6:	f018 0f01 	tst.w	r8, #1
 80063ea:	d1b2      	bne.n	8006352 <_dtoa_r+0xa42>
 80063ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063f0:	2b30      	cmp	r3, #48	; 0x30
 80063f2:	f105 32ff 	add.w	r2, r5, #4294967295
 80063f6:	f47f af0a 	bne.w	800620e <_dtoa_r+0x8fe>
 80063fa:	4615      	mov	r5, r2
 80063fc:	e7f6      	b.n	80063ec <_dtoa_r+0xadc>
 80063fe:	4593      	cmp	fp, r2
 8006400:	d105      	bne.n	800640e <_dtoa_r+0xafe>
 8006402:	2331      	movs	r3, #49	; 0x31
 8006404:	f10a 0a01 	add.w	sl, sl, #1
 8006408:	f88b 3000 	strb.w	r3, [fp]
 800640c:	e6ff      	b.n	800620e <_dtoa_r+0x8fe>
 800640e:	4615      	mov	r5, r2
 8006410:	e79f      	b.n	8006352 <_dtoa_r+0xa42>
 8006412:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006478 <_dtoa_r+0xb68>
 8006416:	e007      	b.n	8006428 <_dtoa_r+0xb18>
 8006418:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800641a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800647c <_dtoa_r+0xb6c>
 800641e:	b11b      	cbz	r3, 8006428 <_dtoa_r+0xb18>
 8006420:	f10b 0308 	add.w	r3, fp, #8
 8006424:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	4658      	mov	r0, fp
 800642a:	b017      	add	sp, #92	; 0x5c
 800642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006430:	9b06      	ldr	r3, [sp, #24]
 8006432:	2b01      	cmp	r3, #1
 8006434:	f77f ae35 	ble.w	80060a2 <_dtoa_r+0x792>
 8006438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800643a:	9307      	str	r3, [sp, #28]
 800643c:	e649      	b.n	80060d2 <_dtoa_r+0x7c2>
 800643e:	9b02      	ldr	r3, [sp, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	dc03      	bgt.n	800644c <_dtoa_r+0xb3c>
 8006444:	9b06      	ldr	r3, [sp, #24]
 8006446:	2b02      	cmp	r3, #2
 8006448:	f73f aecc 	bgt.w	80061e4 <_dtoa_r+0x8d4>
 800644c:	465d      	mov	r5, fp
 800644e:	4639      	mov	r1, r7
 8006450:	9804      	ldr	r0, [sp, #16]
 8006452:	f7ff f9d1 	bl	80057f8 <quorem>
 8006456:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800645a:	f805 8b01 	strb.w	r8, [r5], #1
 800645e:	9a02      	ldr	r2, [sp, #8]
 8006460:	eba5 030b 	sub.w	r3, r5, fp
 8006464:	429a      	cmp	r2, r3
 8006466:	ddb0      	ble.n	80063ca <_dtoa_r+0xaba>
 8006468:	2300      	movs	r3, #0
 800646a:	220a      	movs	r2, #10
 800646c:	9904      	ldr	r1, [sp, #16]
 800646e:	4620      	mov	r0, r4
 8006470:	f000 f86c 	bl	800654c <__multadd>
 8006474:	9004      	str	r0, [sp, #16]
 8006476:	e7ea      	b.n	800644e <_dtoa_r+0xb3e>
 8006478:	08006af0 	.word	0x08006af0
 800647c:	08006af2 	.word	0x08006af2

08006480 <_localeconv_r>:
 8006480:	4b04      	ldr	r3, [pc, #16]	; (8006494 <_localeconv_r+0x14>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6a18      	ldr	r0, [r3, #32]
 8006486:	4b04      	ldr	r3, [pc, #16]	; (8006498 <_localeconv_r+0x18>)
 8006488:	2800      	cmp	r0, #0
 800648a:	bf08      	it	eq
 800648c:	4618      	moveq	r0, r3
 800648e:	30f0      	adds	r0, #240	; 0xf0
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	2000000c 	.word	0x2000000c
 8006498:	20000070 	.word	0x20000070

0800649c <memcpy>:
 800649c:	b510      	push	{r4, lr}
 800649e:	1e43      	subs	r3, r0, #1
 80064a0:	440a      	add	r2, r1
 80064a2:	4291      	cmp	r1, r2
 80064a4:	d100      	bne.n	80064a8 <memcpy+0xc>
 80064a6:	bd10      	pop	{r4, pc}
 80064a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064b0:	e7f7      	b.n	80064a2 <memcpy+0x6>

080064b2 <__malloc_lock>:
 80064b2:	4770      	bx	lr

080064b4 <__malloc_unlock>:
 80064b4:	4770      	bx	lr

080064b6 <_Balloc>:
 80064b6:	b570      	push	{r4, r5, r6, lr}
 80064b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064ba:	4604      	mov	r4, r0
 80064bc:	460e      	mov	r6, r1
 80064be:	b93d      	cbnz	r5, 80064d0 <_Balloc+0x1a>
 80064c0:	2010      	movs	r0, #16
 80064c2:	f7fe fdc7 	bl	8005054 <malloc>
 80064c6:	6260      	str	r0, [r4, #36]	; 0x24
 80064c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064cc:	6005      	str	r5, [r0, #0]
 80064ce:	60c5      	str	r5, [r0, #12]
 80064d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80064d2:	68eb      	ldr	r3, [r5, #12]
 80064d4:	b183      	cbz	r3, 80064f8 <_Balloc+0x42>
 80064d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80064de:	b9b8      	cbnz	r0, 8006510 <_Balloc+0x5a>
 80064e0:	2101      	movs	r1, #1
 80064e2:	fa01 f506 	lsl.w	r5, r1, r6
 80064e6:	1d6a      	adds	r2, r5, #5
 80064e8:	0092      	lsls	r2, r2, #2
 80064ea:	4620      	mov	r0, r4
 80064ec:	f7fe fdc2 	bl	8005074 <_calloc_r>
 80064f0:	b160      	cbz	r0, 800650c <_Balloc+0x56>
 80064f2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80064f6:	e00e      	b.n	8006516 <_Balloc+0x60>
 80064f8:	2221      	movs	r2, #33	; 0x21
 80064fa:	2104      	movs	r1, #4
 80064fc:	4620      	mov	r0, r4
 80064fe:	f7fe fdb9 	bl	8005074 <_calloc_r>
 8006502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006504:	60e8      	str	r0, [r5, #12]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e4      	bne.n	80064d6 <_Balloc+0x20>
 800650c:	2000      	movs	r0, #0
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	6802      	ldr	r2, [r0, #0]
 8006512:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006516:	2300      	movs	r3, #0
 8006518:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800651c:	e7f7      	b.n	800650e <_Balloc+0x58>

0800651e <_Bfree>:
 800651e:	b570      	push	{r4, r5, r6, lr}
 8006520:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006522:	4606      	mov	r6, r0
 8006524:	460d      	mov	r5, r1
 8006526:	b93c      	cbnz	r4, 8006538 <_Bfree+0x1a>
 8006528:	2010      	movs	r0, #16
 800652a:	f7fe fd93 	bl	8005054 <malloc>
 800652e:	6270      	str	r0, [r6, #36]	; 0x24
 8006530:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006534:	6004      	str	r4, [r0, #0]
 8006536:	60c4      	str	r4, [r0, #12]
 8006538:	b13d      	cbz	r5, 800654a <_Bfree+0x2c>
 800653a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800653c:	686a      	ldr	r2, [r5, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006544:	6029      	str	r1, [r5, #0]
 8006546:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800654a:	bd70      	pop	{r4, r5, r6, pc}

0800654c <__multadd>:
 800654c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006550:	690d      	ldr	r5, [r1, #16]
 8006552:	461f      	mov	r7, r3
 8006554:	4606      	mov	r6, r0
 8006556:	460c      	mov	r4, r1
 8006558:	f101 0c14 	add.w	ip, r1, #20
 800655c:	2300      	movs	r3, #0
 800655e:	f8dc 0000 	ldr.w	r0, [ip]
 8006562:	b281      	uxth	r1, r0
 8006564:	fb02 7101 	mla	r1, r2, r1, r7
 8006568:	0c0f      	lsrs	r7, r1, #16
 800656a:	0c00      	lsrs	r0, r0, #16
 800656c:	fb02 7000 	mla	r0, r2, r0, r7
 8006570:	b289      	uxth	r1, r1
 8006572:	3301      	adds	r3, #1
 8006574:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006578:	429d      	cmp	r5, r3
 800657a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800657e:	f84c 1b04 	str.w	r1, [ip], #4
 8006582:	dcec      	bgt.n	800655e <__multadd+0x12>
 8006584:	b1d7      	cbz	r7, 80065bc <__multadd+0x70>
 8006586:	68a3      	ldr	r3, [r4, #8]
 8006588:	42ab      	cmp	r3, r5
 800658a:	dc12      	bgt.n	80065b2 <__multadd+0x66>
 800658c:	6861      	ldr	r1, [r4, #4]
 800658e:	4630      	mov	r0, r6
 8006590:	3101      	adds	r1, #1
 8006592:	f7ff ff90 	bl	80064b6 <_Balloc>
 8006596:	6922      	ldr	r2, [r4, #16]
 8006598:	3202      	adds	r2, #2
 800659a:	f104 010c 	add.w	r1, r4, #12
 800659e:	4680      	mov	r8, r0
 80065a0:	0092      	lsls	r2, r2, #2
 80065a2:	300c      	adds	r0, #12
 80065a4:	f7ff ff7a 	bl	800649c <memcpy>
 80065a8:	4621      	mov	r1, r4
 80065aa:	4630      	mov	r0, r6
 80065ac:	f7ff ffb7 	bl	800651e <_Bfree>
 80065b0:	4644      	mov	r4, r8
 80065b2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065b6:	3501      	adds	r5, #1
 80065b8:	615f      	str	r7, [r3, #20]
 80065ba:	6125      	str	r5, [r4, #16]
 80065bc:	4620      	mov	r0, r4
 80065be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080065c2 <__hi0bits>:
 80065c2:	0c02      	lsrs	r2, r0, #16
 80065c4:	0412      	lsls	r2, r2, #16
 80065c6:	4603      	mov	r3, r0
 80065c8:	b9b2      	cbnz	r2, 80065f8 <__hi0bits+0x36>
 80065ca:	0403      	lsls	r3, r0, #16
 80065cc:	2010      	movs	r0, #16
 80065ce:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80065d2:	bf04      	itt	eq
 80065d4:	021b      	lsleq	r3, r3, #8
 80065d6:	3008      	addeq	r0, #8
 80065d8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80065dc:	bf04      	itt	eq
 80065de:	011b      	lsleq	r3, r3, #4
 80065e0:	3004      	addeq	r0, #4
 80065e2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80065e6:	bf04      	itt	eq
 80065e8:	009b      	lsleq	r3, r3, #2
 80065ea:	3002      	addeq	r0, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	db06      	blt.n	80065fe <__hi0bits+0x3c>
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	d503      	bpl.n	80065fc <__hi0bits+0x3a>
 80065f4:	3001      	adds	r0, #1
 80065f6:	4770      	bx	lr
 80065f8:	2000      	movs	r0, #0
 80065fa:	e7e8      	b.n	80065ce <__hi0bits+0xc>
 80065fc:	2020      	movs	r0, #32
 80065fe:	4770      	bx	lr

08006600 <__lo0bits>:
 8006600:	6803      	ldr	r3, [r0, #0]
 8006602:	f013 0207 	ands.w	r2, r3, #7
 8006606:	4601      	mov	r1, r0
 8006608:	d00b      	beq.n	8006622 <__lo0bits+0x22>
 800660a:	07da      	lsls	r2, r3, #31
 800660c:	d423      	bmi.n	8006656 <__lo0bits+0x56>
 800660e:	0798      	lsls	r0, r3, #30
 8006610:	bf49      	itett	mi
 8006612:	085b      	lsrmi	r3, r3, #1
 8006614:	089b      	lsrpl	r3, r3, #2
 8006616:	2001      	movmi	r0, #1
 8006618:	600b      	strmi	r3, [r1, #0]
 800661a:	bf5c      	itt	pl
 800661c:	600b      	strpl	r3, [r1, #0]
 800661e:	2002      	movpl	r0, #2
 8006620:	4770      	bx	lr
 8006622:	b298      	uxth	r0, r3
 8006624:	b9a8      	cbnz	r0, 8006652 <__lo0bits+0x52>
 8006626:	0c1b      	lsrs	r3, r3, #16
 8006628:	2010      	movs	r0, #16
 800662a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800662e:	bf04      	itt	eq
 8006630:	0a1b      	lsreq	r3, r3, #8
 8006632:	3008      	addeq	r0, #8
 8006634:	071a      	lsls	r2, r3, #28
 8006636:	bf04      	itt	eq
 8006638:	091b      	lsreq	r3, r3, #4
 800663a:	3004      	addeq	r0, #4
 800663c:	079a      	lsls	r2, r3, #30
 800663e:	bf04      	itt	eq
 8006640:	089b      	lsreq	r3, r3, #2
 8006642:	3002      	addeq	r0, #2
 8006644:	07da      	lsls	r2, r3, #31
 8006646:	d402      	bmi.n	800664e <__lo0bits+0x4e>
 8006648:	085b      	lsrs	r3, r3, #1
 800664a:	d006      	beq.n	800665a <__lo0bits+0x5a>
 800664c:	3001      	adds	r0, #1
 800664e:	600b      	str	r3, [r1, #0]
 8006650:	4770      	bx	lr
 8006652:	4610      	mov	r0, r2
 8006654:	e7e9      	b.n	800662a <__lo0bits+0x2a>
 8006656:	2000      	movs	r0, #0
 8006658:	4770      	bx	lr
 800665a:	2020      	movs	r0, #32
 800665c:	4770      	bx	lr

0800665e <__i2b>:
 800665e:	b510      	push	{r4, lr}
 8006660:	460c      	mov	r4, r1
 8006662:	2101      	movs	r1, #1
 8006664:	f7ff ff27 	bl	80064b6 <_Balloc>
 8006668:	2201      	movs	r2, #1
 800666a:	6144      	str	r4, [r0, #20]
 800666c:	6102      	str	r2, [r0, #16]
 800666e:	bd10      	pop	{r4, pc}

08006670 <__multiply>:
 8006670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006674:	4614      	mov	r4, r2
 8006676:	690a      	ldr	r2, [r1, #16]
 8006678:	6923      	ldr	r3, [r4, #16]
 800667a:	429a      	cmp	r2, r3
 800667c:	bfb8      	it	lt
 800667e:	460b      	movlt	r3, r1
 8006680:	4688      	mov	r8, r1
 8006682:	bfbc      	itt	lt
 8006684:	46a0      	movlt	r8, r4
 8006686:	461c      	movlt	r4, r3
 8006688:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800668c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006690:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006694:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006698:	eb07 0609 	add.w	r6, r7, r9
 800669c:	42b3      	cmp	r3, r6
 800669e:	bfb8      	it	lt
 80066a0:	3101      	addlt	r1, #1
 80066a2:	f7ff ff08 	bl	80064b6 <_Balloc>
 80066a6:	f100 0514 	add.w	r5, r0, #20
 80066aa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80066ae:	462b      	mov	r3, r5
 80066b0:	2200      	movs	r2, #0
 80066b2:	4573      	cmp	r3, lr
 80066b4:	d316      	bcc.n	80066e4 <__multiply+0x74>
 80066b6:	f104 0214 	add.w	r2, r4, #20
 80066ba:	f108 0114 	add.w	r1, r8, #20
 80066be:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80066c2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	9b00      	ldr	r3, [sp, #0]
 80066ca:	9201      	str	r2, [sp, #4]
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d80c      	bhi.n	80066ea <__multiply+0x7a>
 80066d0:	2e00      	cmp	r6, #0
 80066d2:	dd03      	ble.n	80066dc <__multiply+0x6c>
 80066d4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d05d      	beq.n	8006798 <__multiply+0x128>
 80066dc:	6106      	str	r6, [r0, #16]
 80066de:	b003      	add	sp, #12
 80066e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e4:	f843 2b04 	str.w	r2, [r3], #4
 80066e8:	e7e3      	b.n	80066b2 <__multiply+0x42>
 80066ea:	f8b2 b000 	ldrh.w	fp, [r2]
 80066ee:	f1bb 0f00 	cmp.w	fp, #0
 80066f2:	d023      	beq.n	800673c <__multiply+0xcc>
 80066f4:	4689      	mov	r9, r1
 80066f6:	46ac      	mov	ip, r5
 80066f8:	f04f 0800 	mov.w	r8, #0
 80066fc:	f859 4b04 	ldr.w	r4, [r9], #4
 8006700:	f8dc a000 	ldr.w	sl, [ip]
 8006704:	b2a3      	uxth	r3, r4
 8006706:	fa1f fa8a 	uxth.w	sl, sl
 800670a:	fb0b a303 	mla	r3, fp, r3, sl
 800670e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006712:	f8dc 4000 	ldr.w	r4, [ip]
 8006716:	4443      	add	r3, r8
 8006718:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800671c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006720:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006724:	46e2      	mov	sl, ip
 8006726:	b29b      	uxth	r3, r3
 8006728:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800672c:	454f      	cmp	r7, r9
 800672e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006732:	f84a 3b04 	str.w	r3, [sl], #4
 8006736:	d82b      	bhi.n	8006790 <__multiply+0x120>
 8006738:	f8cc 8004 	str.w	r8, [ip, #4]
 800673c:	9b01      	ldr	r3, [sp, #4]
 800673e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006742:	3204      	adds	r2, #4
 8006744:	f1ba 0f00 	cmp.w	sl, #0
 8006748:	d020      	beq.n	800678c <__multiply+0x11c>
 800674a:	682b      	ldr	r3, [r5, #0]
 800674c:	4689      	mov	r9, r1
 800674e:	46a8      	mov	r8, r5
 8006750:	f04f 0b00 	mov.w	fp, #0
 8006754:	f8b9 c000 	ldrh.w	ip, [r9]
 8006758:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800675c:	fb0a 440c 	mla	r4, sl, ip, r4
 8006760:	445c      	add	r4, fp
 8006762:	46c4      	mov	ip, r8
 8006764:	b29b      	uxth	r3, r3
 8006766:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800676a:	f84c 3b04 	str.w	r3, [ip], #4
 800676e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006772:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006776:	0c1b      	lsrs	r3, r3, #16
 8006778:	fb0a b303 	mla	r3, sl, r3, fp
 800677c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006780:	454f      	cmp	r7, r9
 8006782:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006786:	d805      	bhi.n	8006794 <__multiply+0x124>
 8006788:	f8c8 3004 	str.w	r3, [r8, #4]
 800678c:	3504      	adds	r5, #4
 800678e:	e79b      	b.n	80066c8 <__multiply+0x58>
 8006790:	46d4      	mov	ip, sl
 8006792:	e7b3      	b.n	80066fc <__multiply+0x8c>
 8006794:	46e0      	mov	r8, ip
 8006796:	e7dd      	b.n	8006754 <__multiply+0xe4>
 8006798:	3e01      	subs	r6, #1
 800679a:	e799      	b.n	80066d0 <__multiply+0x60>

0800679c <__pow5mult>:
 800679c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a0:	4615      	mov	r5, r2
 80067a2:	f012 0203 	ands.w	r2, r2, #3
 80067a6:	4606      	mov	r6, r0
 80067a8:	460f      	mov	r7, r1
 80067aa:	d007      	beq.n	80067bc <__pow5mult+0x20>
 80067ac:	3a01      	subs	r2, #1
 80067ae:	4c21      	ldr	r4, [pc, #132]	; (8006834 <__pow5mult+0x98>)
 80067b0:	2300      	movs	r3, #0
 80067b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067b6:	f7ff fec9 	bl	800654c <__multadd>
 80067ba:	4607      	mov	r7, r0
 80067bc:	10ad      	asrs	r5, r5, #2
 80067be:	d035      	beq.n	800682c <__pow5mult+0x90>
 80067c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80067c2:	b93c      	cbnz	r4, 80067d4 <__pow5mult+0x38>
 80067c4:	2010      	movs	r0, #16
 80067c6:	f7fe fc45 	bl	8005054 <malloc>
 80067ca:	6270      	str	r0, [r6, #36]	; 0x24
 80067cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067d0:	6004      	str	r4, [r0, #0]
 80067d2:	60c4      	str	r4, [r0, #12]
 80067d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80067d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067dc:	b94c      	cbnz	r4, 80067f2 <__pow5mult+0x56>
 80067de:	f240 2171 	movw	r1, #625	; 0x271
 80067e2:	4630      	mov	r0, r6
 80067e4:	f7ff ff3b 	bl	800665e <__i2b>
 80067e8:	2300      	movs	r3, #0
 80067ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80067ee:	4604      	mov	r4, r0
 80067f0:	6003      	str	r3, [r0, #0]
 80067f2:	f04f 0800 	mov.w	r8, #0
 80067f6:	07eb      	lsls	r3, r5, #31
 80067f8:	d50a      	bpl.n	8006810 <__pow5mult+0x74>
 80067fa:	4639      	mov	r1, r7
 80067fc:	4622      	mov	r2, r4
 80067fe:	4630      	mov	r0, r6
 8006800:	f7ff ff36 	bl	8006670 <__multiply>
 8006804:	4639      	mov	r1, r7
 8006806:	4681      	mov	r9, r0
 8006808:	4630      	mov	r0, r6
 800680a:	f7ff fe88 	bl	800651e <_Bfree>
 800680e:	464f      	mov	r7, r9
 8006810:	106d      	asrs	r5, r5, #1
 8006812:	d00b      	beq.n	800682c <__pow5mult+0x90>
 8006814:	6820      	ldr	r0, [r4, #0]
 8006816:	b938      	cbnz	r0, 8006828 <__pow5mult+0x8c>
 8006818:	4622      	mov	r2, r4
 800681a:	4621      	mov	r1, r4
 800681c:	4630      	mov	r0, r6
 800681e:	f7ff ff27 	bl	8006670 <__multiply>
 8006822:	6020      	str	r0, [r4, #0]
 8006824:	f8c0 8000 	str.w	r8, [r0]
 8006828:	4604      	mov	r4, r0
 800682a:	e7e4      	b.n	80067f6 <__pow5mult+0x5a>
 800682c:	4638      	mov	r0, r7
 800682e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006832:	bf00      	nop
 8006834:	08006bf0 	.word	0x08006bf0

08006838 <__lshift>:
 8006838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800683c:	460c      	mov	r4, r1
 800683e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006842:	6923      	ldr	r3, [r4, #16]
 8006844:	6849      	ldr	r1, [r1, #4]
 8006846:	eb0a 0903 	add.w	r9, sl, r3
 800684a:	68a3      	ldr	r3, [r4, #8]
 800684c:	4607      	mov	r7, r0
 800684e:	4616      	mov	r6, r2
 8006850:	f109 0501 	add.w	r5, r9, #1
 8006854:	42ab      	cmp	r3, r5
 8006856:	db32      	blt.n	80068be <__lshift+0x86>
 8006858:	4638      	mov	r0, r7
 800685a:	f7ff fe2c 	bl	80064b6 <_Balloc>
 800685e:	2300      	movs	r3, #0
 8006860:	4680      	mov	r8, r0
 8006862:	f100 0114 	add.w	r1, r0, #20
 8006866:	461a      	mov	r2, r3
 8006868:	4553      	cmp	r3, sl
 800686a:	db2b      	blt.n	80068c4 <__lshift+0x8c>
 800686c:	6920      	ldr	r0, [r4, #16]
 800686e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006872:	f104 0314 	add.w	r3, r4, #20
 8006876:	f016 021f 	ands.w	r2, r6, #31
 800687a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800687e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006882:	d025      	beq.n	80068d0 <__lshift+0x98>
 8006884:	f1c2 0e20 	rsb	lr, r2, #32
 8006888:	2000      	movs	r0, #0
 800688a:	681e      	ldr	r6, [r3, #0]
 800688c:	468a      	mov	sl, r1
 800688e:	4096      	lsls	r6, r2
 8006890:	4330      	orrs	r0, r6
 8006892:	f84a 0b04 	str.w	r0, [sl], #4
 8006896:	f853 0b04 	ldr.w	r0, [r3], #4
 800689a:	459c      	cmp	ip, r3
 800689c:	fa20 f00e 	lsr.w	r0, r0, lr
 80068a0:	d814      	bhi.n	80068cc <__lshift+0x94>
 80068a2:	6048      	str	r0, [r1, #4]
 80068a4:	b108      	cbz	r0, 80068aa <__lshift+0x72>
 80068a6:	f109 0502 	add.w	r5, r9, #2
 80068aa:	3d01      	subs	r5, #1
 80068ac:	4638      	mov	r0, r7
 80068ae:	f8c8 5010 	str.w	r5, [r8, #16]
 80068b2:	4621      	mov	r1, r4
 80068b4:	f7ff fe33 	bl	800651e <_Bfree>
 80068b8:	4640      	mov	r0, r8
 80068ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068be:	3101      	adds	r1, #1
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	e7c7      	b.n	8006854 <__lshift+0x1c>
 80068c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80068c8:	3301      	adds	r3, #1
 80068ca:	e7cd      	b.n	8006868 <__lshift+0x30>
 80068cc:	4651      	mov	r1, sl
 80068ce:	e7dc      	b.n	800688a <__lshift+0x52>
 80068d0:	3904      	subs	r1, #4
 80068d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80068da:	459c      	cmp	ip, r3
 80068dc:	d8f9      	bhi.n	80068d2 <__lshift+0x9a>
 80068de:	e7e4      	b.n	80068aa <__lshift+0x72>

080068e0 <__mcmp>:
 80068e0:	6903      	ldr	r3, [r0, #16]
 80068e2:	690a      	ldr	r2, [r1, #16]
 80068e4:	1a9b      	subs	r3, r3, r2
 80068e6:	b530      	push	{r4, r5, lr}
 80068e8:	d10c      	bne.n	8006904 <__mcmp+0x24>
 80068ea:	0092      	lsls	r2, r2, #2
 80068ec:	3014      	adds	r0, #20
 80068ee:	3114      	adds	r1, #20
 80068f0:	1884      	adds	r4, r0, r2
 80068f2:	4411      	add	r1, r2
 80068f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068fc:	4295      	cmp	r5, r2
 80068fe:	d003      	beq.n	8006908 <__mcmp+0x28>
 8006900:	d305      	bcc.n	800690e <__mcmp+0x2e>
 8006902:	2301      	movs	r3, #1
 8006904:	4618      	mov	r0, r3
 8006906:	bd30      	pop	{r4, r5, pc}
 8006908:	42a0      	cmp	r0, r4
 800690a:	d3f3      	bcc.n	80068f4 <__mcmp+0x14>
 800690c:	e7fa      	b.n	8006904 <__mcmp+0x24>
 800690e:	f04f 33ff 	mov.w	r3, #4294967295
 8006912:	e7f7      	b.n	8006904 <__mcmp+0x24>

08006914 <__mdiff>:
 8006914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006918:	460d      	mov	r5, r1
 800691a:	4607      	mov	r7, r0
 800691c:	4611      	mov	r1, r2
 800691e:	4628      	mov	r0, r5
 8006920:	4614      	mov	r4, r2
 8006922:	f7ff ffdd 	bl	80068e0 <__mcmp>
 8006926:	1e06      	subs	r6, r0, #0
 8006928:	d108      	bne.n	800693c <__mdiff+0x28>
 800692a:	4631      	mov	r1, r6
 800692c:	4638      	mov	r0, r7
 800692e:	f7ff fdc2 	bl	80064b6 <_Balloc>
 8006932:	2301      	movs	r3, #1
 8006934:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800693c:	bfa4      	itt	ge
 800693e:	4623      	movge	r3, r4
 8006940:	462c      	movge	r4, r5
 8006942:	4638      	mov	r0, r7
 8006944:	6861      	ldr	r1, [r4, #4]
 8006946:	bfa6      	itte	ge
 8006948:	461d      	movge	r5, r3
 800694a:	2600      	movge	r6, #0
 800694c:	2601      	movlt	r6, #1
 800694e:	f7ff fdb2 	bl	80064b6 <_Balloc>
 8006952:	692b      	ldr	r3, [r5, #16]
 8006954:	60c6      	str	r6, [r0, #12]
 8006956:	6926      	ldr	r6, [r4, #16]
 8006958:	f105 0914 	add.w	r9, r5, #20
 800695c:	f104 0214 	add.w	r2, r4, #20
 8006960:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006964:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006968:	f100 0514 	add.w	r5, r0, #20
 800696c:	f04f 0e00 	mov.w	lr, #0
 8006970:	f852 ab04 	ldr.w	sl, [r2], #4
 8006974:	f859 4b04 	ldr.w	r4, [r9], #4
 8006978:	fa1e f18a 	uxtah	r1, lr, sl
 800697c:	b2a3      	uxth	r3, r4
 800697e:	1ac9      	subs	r1, r1, r3
 8006980:	0c23      	lsrs	r3, r4, #16
 8006982:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006986:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800698a:	b289      	uxth	r1, r1
 800698c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006990:	45c8      	cmp	r8, r9
 8006992:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006996:	4694      	mov	ip, r2
 8006998:	f845 3b04 	str.w	r3, [r5], #4
 800699c:	d8e8      	bhi.n	8006970 <__mdiff+0x5c>
 800699e:	45bc      	cmp	ip, r7
 80069a0:	d304      	bcc.n	80069ac <__mdiff+0x98>
 80069a2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80069a6:	b183      	cbz	r3, 80069ca <__mdiff+0xb6>
 80069a8:	6106      	str	r6, [r0, #16]
 80069aa:	e7c5      	b.n	8006938 <__mdiff+0x24>
 80069ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80069b0:	fa1e f381 	uxtah	r3, lr, r1
 80069b4:	141a      	asrs	r2, r3, #16
 80069b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80069c4:	f845 3b04 	str.w	r3, [r5], #4
 80069c8:	e7e9      	b.n	800699e <__mdiff+0x8a>
 80069ca:	3e01      	subs	r6, #1
 80069cc:	e7e9      	b.n	80069a2 <__mdiff+0x8e>

080069ce <__d2b>:
 80069ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069d2:	460e      	mov	r6, r1
 80069d4:	2101      	movs	r1, #1
 80069d6:	ec59 8b10 	vmov	r8, r9, d0
 80069da:	4615      	mov	r5, r2
 80069dc:	f7ff fd6b 	bl	80064b6 <_Balloc>
 80069e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80069e4:	4607      	mov	r7, r0
 80069e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069ea:	bb34      	cbnz	r4, 8006a3a <__d2b+0x6c>
 80069ec:	9301      	str	r3, [sp, #4]
 80069ee:	f1b8 0300 	subs.w	r3, r8, #0
 80069f2:	d027      	beq.n	8006a44 <__d2b+0x76>
 80069f4:	a802      	add	r0, sp, #8
 80069f6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80069fa:	f7ff fe01 	bl	8006600 <__lo0bits>
 80069fe:	9900      	ldr	r1, [sp, #0]
 8006a00:	b1f0      	cbz	r0, 8006a40 <__d2b+0x72>
 8006a02:	9a01      	ldr	r2, [sp, #4]
 8006a04:	f1c0 0320 	rsb	r3, r0, #32
 8006a08:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0c:	430b      	orrs	r3, r1
 8006a0e:	40c2      	lsrs	r2, r0
 8006a10:	617b      	str	r3, [r7, #20]
 8006a12:	9201      	str	r2, [sp, #4]
 8006a14:	9b01      	ldr	r3, [sp, #4]
 8006a16:	61bb      	str	r3, [r7, #24]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	bf14      	ite	ne
 8006a1c:	2102      	movne	r1, #2
 8006a1e:	2101      	moveq	r1, #1
 8006a20:	6139      	str	r1, [r7, #16]
 8006a22:	b1c4      	cbz	r4, 8006a56 <__d2b+0x88>
 8006a24:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006a28:	4404      	add	r4, r0
 8006a2a:	6034      	str	r4, [r6, #0]
 8006a2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a30:	6028      	str	r0, [r5, #0]
 8006a32:	4638      	mov	r0, r7
 8006a34:	b003      	add	sp, #12
 8006a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a3e:	e7d5      	b.n	80069ec <__d2b+0x1e>
 8006a40:	6179      	str	r1, [r7, #20]
 8006a42:	e7e7      	b.n	8006a14 <__d2b+0x46>
 8006a44:	a801      	add	r0, sp, #4
 8006a46:	f7ff fddb 	bl	8006600 <__lo0bits>
 8006a4a:	9b01      	ldr	r3, [sp, #4]
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	2101      	movs	r1, #1
 8006a50:	6139      	str	r1, [r7, #16]
 8006a52:	3020      	adds	r0, #32
 8006a54:	e7e5      	b.n	8006a22 <__d2b+0x54>
 8006a56:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006a5a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a5e:	6030      	str	r0, [r6, #0]
 8006a60:	6918      	ldr	r0, [r3, #16]
 8006a62:	f7ff fdae 	bl	80065c2 <__hi0bits>
 8006a66:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006a6a:	e7e1      	b.n	8006a30 <__d2b+0x62>

08006a6c <__ascii_mbtowc>:
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	b901      	cbnz	r1, 8006a72 <__ascii_mbtowc+0x6>
 8006a70:	a901      	add	r1, sp, #4
 8006a72:	b142      	cbz	r2, 8006a86 <__ascii_mbtowc+0x1a>
 8006a74:	b14b      	cbz	r3, 8006a8a <__ascii_mbtowc+0x1e>
 8006a76:	7813      	ldrb	r3, [r2, #0]
 8006a78:	600b      	str	r3, [r1, #0]
 8006a7a:	7812      	ldrb	r2, [r2, #0]
 8006a7c:	1c10      	adds	r0, r2, #0
 8006a7e:	bf18      	it	ne
 8006a80:	2001      	movne	r0, #1
 8006a82:	b002      	add	sp, #8
 8006a84:	4770      	bx	lr
 8006a86:	4610      	mov	r0, r2
 8006a88:	e7fb      	b.n	8006a82 <__ascii_mbtowc+0x16>
 8006a8a:	f06f 0001 	mvn.w	r0, #1
 8006a8e:	e7f8      	b.n	8006a82 <__ascii_mbtowc+0x16>

08006a90 <__ascii_wctomb>:
 8006a90:	b149      	cbz	r1, 8006aa6 <__ascii_wctomb+0x16>
 8006a92:	2aff      	cmp	r2, #255	; 0xff
 8006a94:	bf85      	ittet	hi
 8006a96:	238a      	movhi	r3, #138	; 0x8a
 8006a98:	6003      	strhi	r3, [r0, #0]
 8006a9a:	700a      	strbls	r2, [r1, #0]
 8006a9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006aa0:	bf98      	it	ls
 8006aa2:	2001      	movls	r0, #1
 8006aa4:	4770      	bx	lr
 8006aa6:	4608      	mov	r0, r1
 8006aa8:	4770      	bx	lr
	...

08006aac <_init>:
 8006aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aae:	bf00      	nop
 8006ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab2:	bc08      	pop	{r3}
 8006ab4:	469e      	mov	lr, r3
 8006ab6:	4770      	bx	lr

08006ab8 <_fini>:
 8006ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aba:	bf00      	nop
 8006abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006abe:	bc08      	pop	{r3}
 8006ac0:	469e      	mov	lr, r3
 8006ac2:	4770      	bx	lr
