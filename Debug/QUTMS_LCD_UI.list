
QUTMS_LCD_UI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d278  0800a798  0800a798  0001a798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017a10  08017a10  000302cc  2**0
                  CONTENTS
  4 .ARM          00000008  08017a10  08017a10  00027a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017a18  08017a18  000302cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017a18  08017a18  00027a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017a1c  08017a1c  00027a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  08017a20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022b8  200002cc  08017cec  000302cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20002584  08017cec  00032584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdc5  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003daf  00000000  00000000  0004c0c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001870  00000000  00000000  0004fe70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00026337  00000000  00000000  000516e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00014ad0  00000000  00000000  00077a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000e22a8  00000000  00000000  0008c4e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0016e78f  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001618  00000000  00000000  0016e810  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00006d94  00000000  00000000  0016fe28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002cc 	.word	0x200002cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a77c 	.word	0x0800a77c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002d0 	.word	0x200002d0
 800020c:	0800a77c 	.word	0x0800a77c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <ili9488_Init>:

#define  LCD_IO_WriteData16_to_2x8(dt)    {LCD_IO_WriteData8((dt) >> 8); LCD_IO_WriteData8(dt); }

//-----------------------------------------------------------------------------
void ili9488_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  if((Is_ili9488_Initialized & ILI9488_LCD_INITIALIZED) == 0)
 8000eec:	4b43      	ldr	r3, [pc, #268]	; (8000ffc <ili9488_Init+0x114>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d115      	bne.n	8000f24 <ili9488_Init+0x3c>
  {
    Is_ili9488_Initialized |= ILI9488_LCD_INITIALIZED;
 8000ef8:	4b40      	ldr	r3, [pc, #256]	; (8000ffc <ili9488_Init+0x114>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b3e      	ldr	r3, [pc, #248]	; (8000ffc <ili9488_Init+0x114>)
 8000f04:	701a      	strb	r2, [r3, #0]
    if((Is_ili9488_Initialized & ILI9488_IO_INITIALIZED) == 0)
 8000f06:	4b3d      	ldr	r3, [pc, #244]	; (8000ffc <ili9488_Init+0x114>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <ili9488_Init+0x2e>
      LCD_IO_Init();
 8000f12:	f000 fd81 	bl	8001a18 <LCD_IO_Init>
    Is_ili9488_Initialized |= ILI9488_IO_INITIALIZED;
 8000f16:	4b39      	ldr	r3, [pc, #228]	; (8000ffc <ili9488_Init+0x114>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <ili9488_Init+0x114>)
 8000f22:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(105);
 8000f24:	2069      	movs	r0, #105	; 0x69
 8000f26:	f000 fd53 	bl	80019d0 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SWRESET);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f000 fe2c 	bl	8001b88 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8000f30:	2005      	movs	r0, #5
 8000f32:	f000 fd4d 	bl	80019d0 <LCD_Delay>
  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRP1, (uint8_t *)"\x00\x03\x09\x08\x16\x0A\x3F\x78\x4C\x09\x0A\x08\x16\x1A\x0F", 15);
 8000f36:	220f      	movs	r2, #15
 8000f38:	4931      	ldr	r1, [pc, #196]	; (8001000 <ili9488_Init+0x118>)
 8000f3a:	20e0      	movs	r0, #224	; 0xe0
 8000f3c:	f000 fe7c 	bl	8001c38 <LCD_IO_WriteCmd8MultipleData8>
  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRN1, (uint8_t *)"\x00\x16\x19\x03\x0F\x05\x32\x45\x46\x04\x0E\x0D\x35\x37\x0F", 15);
 8000f40:	220f      	movs	r2, #15
 8000f42:	4930      	ldr	r1, [pc, #192]	; (8001004 <ili9488_Init+0x11c>)
 8000f44:	20e1      	movs	r0, #225	; 0xe1
 8000f46:	f000 fe77 	bl	8001c38 <LCD_IO_WriteCmd8MultipleData8>
  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_PWCTR1, (uint8_t *)"\x17\x15", 2);
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	492e      	ldr	r1, [pc, #184]	; (8001008 <ili9488_Init+0x120>)
 8000f4e:	20c0      	movs	r0, #192	; 0xc0
 8000f50:	f000 fe72 	bl	8001c38 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8000f54:	2005      	movs	r0, #5
 8000f56:	f000 fd3b 	bl	80019d0 <LCD_Delay>
  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8(ILI9488_PWCTR2); LCD_IO_WriteData8(0x41);
 8000f5a:	20c1      	movs	r0, #193	; 0xc1
 8000f5c:	f000 fe14 	bl	8001b88 <LCD_IO_WriteCmd8>
 8000f60:	2041      	movs	r0, #65	; 0x41
 8000f62:	f000 fe2b 	bl	8001bbc <LCD_IO_WriteData8>
  LCD_Delay(5);
 8000f66:	2005      	movs	r0, #5
 8000f68:	f000 fd32 	bl	80019d0 <LCD_Delay>
  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_VMCTR1, (uint8_t *)"\x00\x12\x80", 3);
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4927      	ldr	r1, [pc, #156]	; (800100c <ili9488_Init+0x124>)
 8000f70:	20c5      	movs	r0, #197	; 0xc5
 8000f72:	f000 fe61 	bl	8001c38 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8000f76:	2005      	movs	r0, #5
 8000f78:	f000 fd2a 	bl	80019d0 <LCD_Delay>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x66); // Interface Pixel Format (24 bit)
 8000f7c:	203a      	movs	r0, #58	; 0x3a
 8000f7e:	f000 fe03 	bl	8001b88 <LCD_IO_WriteCmd8>
 8000f82:	2066      	movs	r0, #102	; 0x66
 8000f84:	f000 fe1a 	bl	8001bbc <LCD_IO_WriteData8>
  #if LCD_SPI_MODE != 2
  // LCD_IO_WriteCmd8(0xFB); LCD_IO_WriteData8(0x80);
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x80); // Interface Mode Control (SDO NOT USE)
  #else
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x00); // Interface Mode Control (SDO USE)
 8000f88:	20b0      	movs	r0, #176	; 0xb0
 8000f8a:	f000 fdfd 	bl	8001b88 <LCD_IO_WriteCmd8>
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 fe14 	bl	8001bbc <LCD_IO_WriteData8>
  #endif
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x55); // Interface Pixel Format (16 bit)
  #endif
  LCD_IO_WriteCmd8(ILI9488_FRMCTR1); LCD_IO_WriteData8(0xA0); // Frame rate (60Hz)
 8000f94:	20b1      	movs	r0, #177	; 0xb1
 8000f96:	f000 fdf7 	bl	8001b88 <LCD_IO_WriteCmd8>
 8000f9a:	20a0      	movs	r0, #160	; 0xa0
 8000f9c:	f000 fe0e 	bl	8001bbc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_INVCTR); LCD_IO_WriteData8(0x02); // Display Inversion Control (2-dot)
 8000fa0:	20b4      	movs	r0, #180	; 0xb4
 8000fa2:	f000 fdf1 	bl	8001b88 <LCD_IO_WriteCmd8>
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f000 fe08 	bl	8001bbc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_DFUNCTR, (uint8_t *)"\x02\x02", 2); // Display Function Control RGB/MCU Interface Control
 8000fac:	2202      	movs	r2, #2
 8000fae:	4918      	ldr	r1, [pc, #96]	; (8001010 <ili9488_Init+0x128>)
 8000fb0:	20b6      	movs	r0, #182	; 0xb6
 8000fb2:	f000 fe41 	bl	8001c38 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9488_IMGFUNCT); LCD_IO_WriteData8(0x00); // Set Image Functio (Disable 24 bit data)
 8000fb6:	20e9      	movs	r0, #233	; 0xe9
 8000fb8:	f000 fde6 	bl	8001b88 <LCD_IO_WriteCmd8>
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f000 fdfd 	bl	8001bbc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_ADJCTR3, (uint8_t *)"\xA9\x51\x2C\x82", 4); // Adjust Control (D7 stream, loose)
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	4913      	ldr	r1, [pc, #76]	; (8001014 <ili9488_Init+0x12c>)
 8000fc6:	20f7      	movs	r0, #247	; 0xf7
 8000fc8:	f000 fe36 	bl	8001c38 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8000fcc:	2005      	movs	r0, #5
 8000fce:	f000 fcff 	bl	80019d0 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Exit Sleep
 8000fd2:	2011      	movs	r0, #17
 8000fd4:	f000 fdd8 	bl	8001b88 <LCD_IO_WriteCmd8>
  LCD_Delay(120);
 8000fd8:	2078      	movs	r0, #120	; 0x78
 8000fda:	f000 fcf9 	bl	80019d0 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_DISPON);      // Display on
 8000fde:	2029      	movs	r0, #41	; 0x29
 8000fe0:	f000 fdd2 	bl	8001b88 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8000fe4:	2005      	movs	r0, #5
 8000fe6:	f000 fcf3 	bl	80019d0 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8000fea:	2036      	movs	r0, #54	; 0x36
 8000fec:	f000 fdcc 	bl	8001b88 <LCD_IO_WriteCmd8>
 8000ff0:	2088      	movs	r0, #136	; 0x88
 8000ff2:	f000 fde3 	bl	8001bbc <LCD_IO_WriteData8>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200002e8 	.word	0x200002e8
 8001000:	0800a798 	.word	0x0800a798
 8001004:	0800a7a8 	.word	0x0800a7a8
 8001008:	0800a7b8 	.word	0x0800a7b8
 800100c:	0800a7bc 	.word	0x0800a7bc
 8001010:	0800a7c0 	.word	0x0800a7c0
 8001014:	0800a7c4 	.word	0x0800a7c4

08001018 <ili9488_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOn(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Display on
 800101c:	2011      	movs	r0, #17
 800101e:	f000 fdb3 	bl	8001b88 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f000 fce0 	bl	80019e8 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <ili9488_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOff(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPIN);       // Display off
 8001030:	2010      	movs	r0, #16
 8001032:	f000 fda9 	bl	8001b88 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(0);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 fcd6 	bl	80019e8 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <ili9488_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9488_GetLcdPixelWidth(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return ILI9488_MAX_X + 1;
 8001044:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <ili9488_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9488_GetLcdPixelHeight(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  return ILI9488_MAX_Y + 1;
 8001056:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <ili9488_ReadID>:
  * @brief  Get the ILI9488 ID.
  * @param  None
  * @retval The ILI9488 ID
  */
uint16_t ili9488_ReadID(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();

  if(Is_ili9488_Initialized == 0)
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <ili9488_ReadID+0x40>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <ili9488_ReadID+0x16>
  {
    ili9488_Init();
 8001076:	f7ff ff37 	bl	8000ee8 <ili9488_Init>
  }

  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData8(0x04, (uint8_t *)&id, 3, 0);
 800107a:	1d39      	adds	r1, r7, #4
 800107c:	2300      	movs	r3, #0
 800107e:	2203      	movs	r2, #3
 8001080:	2004      	movs	r0, #4
 8001082:	f000 fe19 	bl	8001cb8 <LCD_IO_ReadCmd8MultipleData8>
  id <<= 1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	607b      	str	r3, [r7, #4]
  #endif
  // printf("ID:%08X\r\n", (unsigned int)id);

  ILI9488_LCDMUTEX_POP();

  if(id == 0x00668054)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <ili9488_ReadID+0x44>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d102      	bne.n	800109a <ili9488_ReadID+0x36>
    return 0x9488;
 8001094:	f249 4388 	movw	r3, #38024	; 0x9488
 8001098:	e000      	b.n	800109c <ili9488_ReadID+0x38>
  return 0;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200002e8 	.word	0x200002e8
 80010a8:	00668054 	.word	0x00668054

080010ac <ili9488_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9488_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	80fb      	strh	r3, [r7, #6]
 80010b8:	4613      	mov	r3, r2
 80010ba:	80bb      	strh	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 80010bc:	202a      	movs	r0, #42	; 0x2a
 80010be:	f000 fd63 	bl	8001b88 <LCD_IO_WriteCmd8>
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fd76 	bl	8001bbc <LCD_IO_WriteData8>
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 fd71 	bl	8001bbc <LCD_IO_WriteData8>
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 fd6a 	bl	8001bbc <LCD_IO_WriteData8>
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fd65 	bl	8001bbc <LCD_IO_WriteData8>
 80010f2:	202b      	movs	r0, #43	; 0x2b
 80010f4:	f000 fd48 	bl	8001b88 <LCD_IO_WriteCmd8>
 80010f8:	88bb      	ldrh	r3, [r7, #4]
 80010fa:	0a1b      	lsrs	r3, r3, #8
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fd5b 	bl	8001bbc <LCD_IO_WriteData8>
 8001106:	88bb      	ldrh	r3, [r7, #4]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fd56 	bl	8001bbc <LCD_IO_WriteData8>
 8001110:	88bb      	ldrh	r3, [r7, #4]
 8001112:	0a1b      	lsrs	r3, r3, #8
 8001114:	b29b      	uxth	r3, r3
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fd4f 	bl	8001bbc <LCD_IO_WriteData8>
 800111e:	88bb      	ldrh	r3, [r7, #4]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fd4a 	bl	8001bbc <LCD_IO_WriteData8>
  ILI9488_LCDMUTEX_POP();
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <ili9488_write16to24>:

/* The SPI mode not capable the 16bpp mode -> convert to 24bpp */
#if ILI9488_INTERFACE == 0
extern inline void ili9488_write16to24(uint16_t RGBCode);
inline void ili9488_write16to24(uint16_t RGBCode)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData8((RGBCode & 0xF800) >> 8);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	121b      	asrs	r3, r3, #8
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f023 0307 	bic.w	r3, r3, #7
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fd38 	bl	8001bbc <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x07E0) >> 3);
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	10db      	asrs	r3, r3, #3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	f023 0303 	bic.w	r3, r3, #3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fd2f 	bl	8001bbc <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x001F) << 3);
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fd29 	bl	8001bbc <LCD_IO_WriteData8>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <ili9488_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9488_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	80fb      	strh	r3, [r7, #6]
 800117c:	460b      	mov	r3, r1
 800117e:	80bb      	strh	r3, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	807b      	strh	r3, [r7, #2]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8001184:	202a      	movs	r0, #42	; 0x2a
 8001186:	f000 fcff 	bl	8001b88 <LCD_IO_WriteCmd8>
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	b29b      	uxth	r3, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fd12 	bl	8001bbc <LCD_IO_WriteData8>
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fd0d 	bl	8001bbc <LCD_IO_WriteData8>
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fd06 	bl	8001bbc <LCD_IO_WriteData8>
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fd01 	bl	8001bbc <LCD_IO_WriteData8>
 80011ba:	202b      	movs	r0, #43	; 0x2b
 80011bc:	f000 fce4 	bl	8001b88 <LCD_IO_WriteCmd8>
 80011c0:	88bb      	ldrh	r3, [r7, #4]
 80011c2:	0a1b      	lsrs	r3, r3, #8
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fcf7 	bl	8001bbc <LCD_IO_WriteData8>
 80011ce:	88bb      	ldrh	r3, [r7, #4]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 fcf2 	bl	8001bbc <LCD_IO_WriteData8>
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	0a1b      	lsrs	r3, r3, #8
 80011dc:	b29b      	uxth	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fceb 	bl	8001bbc <LCD_IO_WriteData8>
 80011e6:	88bb      	ldrh	r3, [r7, #4]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fce6 	bl	8001bbc <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 80011f0:	202c      	movs	r0, #44	; 0x2c
 80011f2:	f000 fcc9 	bl	8001b88 <LCD_IO_WriteCmd8>
  ili9488_write16to24(RGBCode);
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff99 	bl	8001130 <ili9488_write16to24>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_RAMWR); LCD_IO_WriteData16(RGBCode);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <ili9488_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9488_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b084      	sub	sp, #16
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	460a      	mov	r2, r1
 8001210:	80fb      	strh	r3, [r7, #6]
 8001212:	4613      	mov	r3, r2
 8001214:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8001216:	202a      	movs	r0, #42	; 0x2a
 8001218:	f000 fcb6 	bl	8001b88 <LCD_IO_WriteCmd8>
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	0a1b      	lsrs	r3, r3, #8
 8001220:	b29b      	uxth	r3, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fcc9 	bl	8001bbc <LCD_IO_WriteData8>
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fcc4 	bl	8001bbc <LCD_IO_WriteData8>
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	0a1b      	lsrs	r3, r3, #8
 8001238:	b29b      	uxth	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f000 fcbd 	bl	8001bbc <LCD_IO_WriteData8>
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fcb8 	bl	8001bbc <LCD_IO_WriteData8>
 800124c:	202b      	movs	r0, #43	; 0x2b
 800124e:	f000 fc9b 	bl	8001b88 <LCD_IO_WriteCmd8>
 8001252:	88bb      	ldrh	r3, [r7, #4]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	b29b      	uxth	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fcae 	bl	8001bbc <LCD_IO_WriteData8>
 8001260:	88bb      	ldrh	r3, [r7, #4]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fca9 	bl	8001bbc <LCD_IO_WriteData8>
 800126a:	88bb      	ldrh	r3, [r7, #4]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	b29b      	uxth	r3, r3
 8001270:	b2db      	uxtb	r3, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 fca2 	bl	8001bbc <LCD_IO_WriteData8>
 8001278:	88bb      	ldrh	r3, [r7, #4]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fc9d 	bl	8001bbc <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, &ret, 1, 1);
 8001282:	f107 010e 	add.w	r1, r7, #14
 8001286:	2301      	movs	r3, #1
 8001288:	2201      	movs	r2, #1
 800128a:	202e      	movs	r0, #46	; 0x2e
 800128c:	f000 fd38 	bl	8001d00 <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, &ret, 1, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
  return ret;
 8001290:	89fb      	ldrh	r3, [r7, #14]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <ili9488_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9488_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4604      	mov	r4, r0
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4623      	mov	r3, r4
 80012ac:	80fb      	strh	r3, [r7, #6]
 80012ae:	4603      	mov	r3, r0
 80012b0:	80bb      	strh	r3, [r7, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	807b      	strh	r3, [r7, #2]
 80012b6:	4613      	mov	r3, r2
 80012b8:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  yStart = Ypos; yEnd = Ypos + Height - 1;
 80012ba:	4a2a      	ldr	r2, [pc, #168]	; (8001364 <ili9488_SetDisplayWindow+0xc8>)
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	8013      	strh	r3, [r2, #0]
 80012c0:	88ba      	ldrh	r2, [r7, #4]
 80012c2:	883b      	ldrh	r3, [r7, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	3b01      	subs	r3, #1
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	4b26      	ldr	r3, [pc, #152]	; (8001368 <ili9488_SetDisplayWindow+0xcc>)
 80012ce:	801a      	strh	r2, [r3, #0]
  LCD_IO_WriteCmd8(ILI9488_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 80012d0:	202a      	movs	r0, #42	; 0x2a
 80012d2:	f000 fc59 	bl	8001b88 <LCD_IO_WriteCmd8>
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	b29b      	uxth	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fc6c 	bl	8001bbc <LCD_IO_WriteData8>
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fc67 	bl	8001bbc <LCD_IO_WriteData8>
 80012ee:	88fa      	ldrh	r2, [r7, #6]
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	4413      	add	r3, r2
 80012f4:	3b01      	subs	r3, #1
 80012f6:	121b      	asrs	r3, r3, #8
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 fc5e 	bl	8001bbc <LCD_IO_WriteData8>
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4413      	add	r3, r2
 800130a:	b2db      	uxtb	r3, r3
 800130c:	3b01      	subs	r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fc53 	bl	8001bbc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8001316:	202b      	movs	r0, #43	; 0x2b
 8001318:	f000 fc36 	bl	8001b88 <LCD_IO_WriteCmd8>
 800131c:	88bb      	ldrh	r3, [r7, #4]
 800131e:	0a1b      	lsrs	r3, r3, #8
 8001320:	b29b      	uxth	r3, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fc49 	bl	8001bbc <LCD_IO_WriteData8>
 800132a:	88bb      	ldrh	r3, [r7, #4]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fc44 	bl	8001bbc <LCD_IO_WriteData8>
 8001334:	88ba      	ldrh	r2, [r7, #4]
 8001336:	883b      	ldrh	r3, [r7, #0]
 8001338:	4413      	add	r3, r2
 800133a:	3b01      	subs	r3, #1
 800133c:	121b      	asrs	r3, r3, #8
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fc3b 	bl	8001bbc <LCD_IO_WriteData8>
 8001346:	88bb      	ldrh	r3, [r7, #4]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	883b      	ldrh	r3, [r7, #0]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4413      	add	r3, r2
 8001350:	b2db      	uxtb	r3, r3
 8001352:	3b01      	subs	r3, #1
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 fc30 	bl	8001bbc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - Height - Ypos); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - 1 - Ypos);
  #endif
  #endif

  ILI9488_LCDMUTEX_POP();
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bd90      	pop	{r4, r7, pc}
 8001364:	200002ea 	.word	0x200002ea
 8001368:	200002ec 	.word	0x200002ec

0800136c <ili9488_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b085      	sub	sp, #20
 8001370:	af02      	add	r7, sp, #8
 8001372:	4604      	mov	r4, r0
 8001374:	4608      	mov	r0, r1
 8001376:	4611      	mov	r1, r2
 8001378:	461a      	mov	r2, r3
 800137a:	4623      	mov	r3, r4
 800137c:	80fb      	strh	r3, [r7, #6]
 800137e:	4603      	mov	r3, r0
 8001380:	80bb      	strh	r3, [r7, #4]
 8001382:	460b      	mov	r3, r1
 8001384:	807b      	strh	r3, [r7, #2]
 8001386:	4613      	mov	r3, r2
 8001388:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, Length, 1, RGBCode);
 800138a:	883a      	ldrh	r2, [r7, #0]
 800138c:	8879      	ldrh	r1, [r7, #2]
 800138e:	88b8      	ldrh	r0, [r7, #4]
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2301      	movs	r3, #1
 8001396:	f000 f820 	bl	80013da <ili9488_FillRect>
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd90      	pop	{r4, r7, pc}

080013a2 <ili9488_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80013a2:	b590      	push	{r4, r7, lr}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af02      	add	r7, sp, #8
 80013a8:	4604      	mov	r4, r0
 80013aa:	4608      	mov	r0, r1
 80013ac:	4611      	mov	r1, r2
 80013ae:	461a      	mov	r2, r3
 80013b0:	4623      	mov	r3, r4
 80013b2:	80fb      	strh	r3, [r7, #6]
 80013b4:	4603      	mov	r3, r0
 80013b6:	80bb      	strh	r3, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, 1, Length, RGBCode);
 80013c0:	883a      	ldrh	r2, [r7, #0]
 80013c2:	8879      	ldrh	r1, [r7, #2]
 80013c4:	88b8      	ldrh	r0, [r7, #4]
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	4613      	mov	r3, r2
 80013cc:	2201      	movs	r2, #1
 80013ce:	f000 f804 	bl	80013da <ili9488_FillRect>
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}

080013da <ili9488_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9488_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 80013da:	b590      	push	{r4, r7, lr}
 80013dc:	b085      	sub	sp, #20
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4604      	mov	r4, r0
 80013e2:	4608      	mov	r0, r1
 80013e4:	4611      	mov	r1, r2
 80013e6:	461a      	mov	r2, r3
 80013e8:	4623      	mov	r3, r4
 80013ea:	80fb      	strh	r3, [r7, #6]
 80013ec:	4603      	mov	r3, r0
 80013ee:	80bb      	strh	r3, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
 80013f4:	4613      	mov	r3, r2
 80013f6:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80013f8:	883b      	ldrh	r3, [r7, #0]
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	88b9      	ldrh	r1, [r7, #4]
 80013fe:	88f8      	ldrh	r0, [r7, #6]
 8001400:	f7ff ff4c 	bl	800129c <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8001404:	202c      	movs	r0, #44	; 0x2c
 8001406:	f000 fbbf 	bl	8001b88 <LCD_IO_WriteCmd8>
  uint32_t XYsize = Xsize * Ysize;
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	883a      	ldrh	r2, [r7, #0]
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	60fb      	str	r3, [r7, #12]
  while(XYsize--)
 8001414:	e003      	b.n	800141e <ili9488_FillRect+0x44>
    ili9488_write16to24(RGBCode);
 8001416:	8c3b      	ldrh	r3, [r7, #32]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fe89 	bl	8001130 <ili9488_write16to24>
  while(XYsize--)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1e5a      	subs	r2, r3, #1
 8001422:	60fa      	str	r2, [r7, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f6      	bne.n	8001416 <ili9488_FillRect+0x3c>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8DataFill16(ILI9488_RAMWR, RGBCode, Xsize * Ysize);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}

08001430 <ili9488_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9488_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	603a      	str	r2, [r7, #0]
 800143a:	80fb      	strh	r3, [r7, #6]
 800143c:	460b      	mov	r3, r1
 800143e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  /* Read bitmap size */
  Ypos += pbmp[22] + (pbmp[23] << 8) - 1;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	3316      	adds	r3, #22
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b29a      	uxth	r2, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	3317      	adds	r3, #23
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	b29b      	uxth	r3, r3
 800145c:	4413      	add	r3, r2
 800145e:	b29a      	uxth	r2, r3
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	4413      	add	r3, r2
 8001464:	b29b      	uxth	r3, r3
 8001466:	3b01      	subs	r3, #1
 8001468:	80bb      	strh	r3, [r7, #4]
  size = *(volatile uint16_t *) (pbmp + 2);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3302      	adds	r3, #2
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	60fb      	str	r3, [r7, #12]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3304      	adds	r3, #4
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	041b      	lsls	r3, r3, #16
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	330a      	adds	r3, #10
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	60bb      	str	r3, [r7, #8]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	330c      	adds	r3, #12
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	041b      	lsls	r3, r3, #16
 800149a:	461a      	mov	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
 80014a0:	60bb      	str	r3, [r7, #8]
  size = (size - index)/2;
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	4413      	add	r3, r2
 80014b2:	603b      	str	r3, [r7, #0]

  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_UP);
 80014b4:	2036      	movs	r0, #54	; 0x36
 80014b6:	f000 fb67 	bl	8001b88 <LCD_IO_WriteCmd8>
 80014ba:	2008      	movs	r0, #8
 80014bc:	f000 fb7e 	bl	8001bbc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yEnd); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yStart);
 80014c0:	202b      	movs	r0, #43	; 0x2b
 80014c2:	f000 fb61 	bl	8001b88 <LCD_IO_WriteCmd8>
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <ili9488_DrawBitmap+0x11c>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 80014ce:	3301      	adds	r3, #1
 80014d0:	121b      	asrs	r3, r3, #8
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fb71 	bl	8001bbc <LCD_IO_WriteData8>
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <ili9488_DrawBitmap+0x11c>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	f06f 0320 	mvn.w	r3, #32
 80014e4:	1a9b      	subs	r3, r3, r2
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 fb67 	bl	8001bbc <LCD_IO_WriteData8>
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <ili9488_DrawBitmap+0x120>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 80014f6:	3301      	adds	r3, #1
 80014f8:	121b      	asrs	r3, r3, #8
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fb5d 	bl	8001bbc <LCD_IO_WriteData8>
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <ili9488_DrawBitmap+0x120>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	f06f 0320 	mvn.w	r3, #32
 800150c:	1a9b      	subs	r3, r3, r2
 800150e:	b2db      	uxtb	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f000 fb53 	bl	8001bbc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8001516:	202c      	movs	r0, #44	; 0x2c
 8001518:	f000 fb36 	bl	8001b88 <LCD_IO_WriteCmd8>
  while(size--)
 800151c:	e007      	b.n	800152e <ili9488_DrawBitmap+0xfe>
  {
    ili9488_write16to24(*(uint16_t *)pbmp);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fe04 	bl	8001130 <ili9488_write16to24>
    pbmp+= 2;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	3302      	adds	r3, #2
 800152c:	603b      	str	r3, [r7, #0]
  while(size--)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1e5a      	subs	r2, r3, #1
 8001532:	60fa      	str	r2, [r7, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f2      	bne.n	800151e <ili9488_DrawBitmap+0xee>
  }
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8001538:	2036      	movs	r0, #54	; 0x36
 800153a:	f000 fb25 	bl	8001b88 <LCD_IO_WriteCmd8>
 800153e:	2088      	movs	r0, #136	; 0x88
 8001540:	f000 fb3c 	bl	8001bbc <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, (uint16_t *)pbmp, size);
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200002ec 	.word	0x200002ec
 8001550:	200002ea 	.word	0x200002ea

08001554 <ili9488_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	4604      	mov	r4, r0
 800155c:	4608      	mov	r0, r1
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	4623      	mov	r3, r4
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4603      	mov	r3, r0
 8001568:	80bb      	strh	r3, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	807b      	strh	r3, [r7, #2]
 800156e:	4613      	mov	r3, r2
 8001570:	803b      	strh	r3, [r7, #0]
  uint32_t size;

  size = (Xsize * Ysize);
 8001572:	887b      	ldrh	r3, [r7, #2]
 8001574:	883a      	ldrh	r2, [r7, #0]
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	60fb      	str	r3, [r7, #12]

  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800157c:	883b      	ldrh	r3, [r7, #0]
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	88b9      	ldrh	r1, [r7, #4]
 8001582:	88f8      	ldrh	r0, [r7, #6]
 8001584:	f7ff fe8a 	bl	800129c <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8001588:	202c      	movs	r0, #44	; 0x2c
 800158a:	f000 fafd 	bl	8001b88 <LCD_IO_WriteCmd8>
  while(size--)
 800158e:	e007      	b.n	80015a0 <ili9488_DrawRGBImage+0x4c>
  {
    ili9488_write16to24(*pdata);
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fdcb 	bl	8001130 <ili9488_write16to24>
    pdata++;
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	3302      	adds	r3, #2
 800159e:	623b      	str	r3, [r7, #32]
  while(size--)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1e5a      	subs	r2, r3, #1
 80015a4:	60fa      	str	r2, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f2      	bne.n	8001590 <ili9488_DrawRGBImage+0x3c>
  }
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, pdata, size);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}

080015b2 <ili9488_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 80015b2:	b590      	push	{r4, r7, lr}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4604      	mov	r4, r0
 80015ba:	4608      	mov	r0, r1
 80015bc:	4611      	mov	r1, r2
 80015be:	461a      	mov	r2, r3
 80015c0:	4623      	mov	r3, r4
 80015c2:	80fb      	strh	r3, [r7, #6]
 80015c4:	4603      	mov	r3, r0
 80015c6:	80bb      	strh	r3, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
 80015cc:	4613      	mov	r3, r2
 80015ce:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  size = (Xsize * Ysize);
 80015d4:	887b      	ldrh	r3, [r7, #2]
 80015d6:	883a      	ldrh	r2, [r7, #0]
 80015d8:	fb02 f303 	mul.w	r3, r2, r3
 80015dc:	60fb      	str	r3, [r7, #12]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80015de:	883b      	ldrh	r3, [r7, #0]
 80015e0:	887a      	ldrh	r2, [r7, #2]
 80015e2:	88b9      	ldrh	r1, [r7, #4]
 80015e4:	88f8      	ldrh	r0, [r7, #6]
 80015e6:	f7ff fe59 	bl	800129c <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, pdata, size, 1);
 80015ea:	2301      	movs	r3, #1
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	6a39      	ldr	r1, [r7, #32]
 80015f0:	202e      	movs	r0, #46	; 0x2e
 80015f2:	f000 fb85 	bl	8001d00 <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, pdata, size, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}
	...

08001600 <ili9488_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9488_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	80fb      	strh	r3, [r7, #6]
 800160a:	460b      	mov	r3, r1
 800160c:	80bb      	strh	r3, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9488_ORIENTATION == 2)
  if((TopFix != scrparam[3]) || (BottonFix != scrparam[1]))
 8001612:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <ili9488_Scroll+0xb8>)
 8001614:	88db      	ldrh	r3, [r3, #6]
 8001616:	88ba      	ldrh	r2, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	d104      	bne.n	8001626 <ili9488_Scroll+0x26>
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <ili9488_Scroll+0xb8>)
 800161e:	885b      	ldrh	r3, [r3, #2]
 8001620:	887a      	ldrh	r2, [r7, #2]
 8001622:	429a      	cmp	r2, r3
 8001624:	d015      	beq.n	8001652 <ili9488_Scroll+0x52>
  {
    scrparam[3] = TopFix;
 8001626:	4a24      	ldr	r2, [pc, #144]	; (80016b8 <ili9488_Scroll+0xb8>)
 8001628:	88bb      	ldrh	r3, [r7, #4]
 800162a:	80d3      	strh	r3, [r2, #6]
    scrparam[1] = BottonFix;
 800162c:	4a22      	ldr	r2, [pc, #136]	; (80016b8 <ili9488_Scroll+0xb8>)
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	8053      	strh	r3, [r2, #2]
    scrparam[2] = ILI9488_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8001632:	88bb      	ldrh	r3, [r7, #4]
 8001634:	425b      	negs	r3, r3
 8001636:	b29a      	uxth	r2, r3
 8001638:	887b      	ldrh	r3, [r7, #2]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	b29b      	uxth	r3, r3
 800163e:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001642:	b29a      	uxth	r2, r3
 8001644:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <ili9488_Scroll+0xb8>)
 8001646:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9488_VSCRDEF, &scrparam[1], 3);
 8001648:	2203      	movs	r2, #3
 800164a:	491c      	ldr	r1, [pc, #112]	; (80016bc <ili9488_Scroll+0xbc>)
 800164c:	2033      	movs	r0, #51	; 0x33
 800164e:	f000 fb11 	bl	8001c74 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll %= scrparam[2];
 8001652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001656:	4a18      	ldr	r2, [pc, #96]	; (80016b8 <ili9488_Scroll+0xb8>)
 8001658:	8892      	ldrh	r2, [r2, #4]
 800165a:	fb93 f1f2 	sdiv	r1, r3, r2
 800165e:	fb02 f201 	mul.w	r2, r2, r1
 8001662:	1a9b      	subs	r3, r3, r2
 8001664:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8001666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166a:	2b00      	cmp	r3, #0
 800166c:	da0a      	bge.n	8001684 <ili9488_Scroll+0x84>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <ili9488_Scroll+0xb8>)
 8001670:	889a      	ldrh	r2, [r3, #4]
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	4413      	add	r3, r2
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <ili9488_Scroll+0xb8>)
 800167a:	885b      	ldrh	r3, [r3, #2]
 800167c:	4413      	add	r3, r2
 800167e:	b29b      	uxth	r3, r3
 8001680:	80fb      	strh	r3, [r7, #6]
 8001682:	e005      	b.n	8001690 <ili9488_Scroll+0x90>
  else
    Scroll = Scroll + scrparam[1];
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <ili9488_Scroll+0xb8>)
 8001686:	885a      	ldrh	r2, [r3, #2]
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	4413      	add	r3, r2
 800168c:	b29b      	uxth	r3, r3
 800168e:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #endif
  if(Scroll != scrparam[0])
 8001690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001694:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <ili9488_Scroll+0xb8>)
 8001696:	8812      	ldrh	r2, [r2, #0]
 8001698:	4293      	cmp	r3, r2
 800169a:	d009      	beq.n	80016b0 <ili9488_Scroll+0xb0>
  {
    scrparam[0] = Scroll;
 800169c:	88fa      	ldrh	r2, [r7, #6]
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <ili9488_Scroll+0xb8>)
 80016a0:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9488_VSCRSADD, scrparam[0], 1);
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <ili9488_Scroll+0xb8>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	2201      	movs	r2, #1
 80016a8:	4619      	mov	r1, r3
 80016aa:	2037      	movs	r0, #55	; 0x37
 80016ac:	f000 faa0 	bl	8001bf0 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9488_LCDMUTEX_POP();
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200002f0 	.word	0x200002f0
 80016bc:	200002f2 	.word	0x200002f2

080016c0 <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <LcdDirRead+0x70>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80016d0:	4a17      	ldr	r2, [pc, #92]	; (8001730 <LcdDirRead+0x70>)
 80016d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016d6:	6013      	str	r3, [r2, #0]
  while(d--)
 80016d8:	e008      	b.n	80016ec <LcdDirRead+0x2c>
  {
    GPIOX_ODR(LCD_SCK) = 0;
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <LcdDirRead+0x74>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
    LCD_READ_DELAY;
 80016e0:	2001      	movs	r0, #1
 80016e2:	f000 f965 	bl	80019b0 <LCD_IO_Delay>
    GPIOX_ODR(LCD_SCK) = 1;
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <LcdDirRead+0x74>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
  while(d--)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	1e5a      	subs	r2, r3, #1
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f1      	bne.n	80016da <LcdDirRead+0x1a>
  }
  GPIOX_MODER(MODE_ALTER, LCD_SCK);
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <LcdDirRead+0x70>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80016fe:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <LcdDirRead+0x70>)
 8001700:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001704:	6013      	str	r3, [r2, #0]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001706:	e002      	b.n	800170e <LcdDirRead+0x4e>
    d = SPIX->DR;
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <LcdDirRead+0x78>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	607b      	str	r3, [r7, #4]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <LcdDirRead+0x7c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f8      	bne.n	8001708 <LcdDirRead+0x48>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos) | SPI_CR1_RXONLY;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <LcdDirRead+0x78>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 800171e:	4a06      	ldr	r2, [pc, #24]	; (8001738 <LcdDirRead+0x78>)
 8001720:	f443 6384 	orr.w	r3, r3, #1056	; 0x420
 8001724:	6013      	str	r3, [r2, #0]
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40020000 	.word	0x40020000
 8001734:	42400294 	.word	0x42400294
 8001738:	40013000 	.word	0x40013000
 800173c:	42260100 	.word	0x42260100

08001740 <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
  volatile uint8_t d8 __attribute__((unused));
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001746:	e003      	b.n	8001750 <LcdDirWrite+0x10>
    d8 = SPIX->DR;
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <LcdDirWrite+0x60>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	71fb      	strb	r3, [r7, #7]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <LcdDirWrite+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f7      	bne.n	8001748 <LcdDirWrite+0x8>
  SPIX->CR1 &= ~SPI_CR1_SPE;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <LcdDirWrite+0x60>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a10      	ldr	r2, [pc, #64]	; (80017a0 <LcdDirWrite+0x60>)
 800175e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001762:	6013      	str	r3, [r2, #0]
  SPIX->CR1 = (SPIX->CR1 & ~(SPI_CR1_BR | SPI_CR1_RXONLY)) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <LcdDirWrite+0x60>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f423 6387 	bic.w	r3, r3, #1080	; 0x438
 800176c:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <LcdDirWrite+0x60>)
 800176e:	f043 0318 	orr.w	r3, r3, #24
 8001772:	6013      	str	r3, [r2, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8001774:	2006      	movs	r0, #6
 8001776:	f000 f91b 	bl	80019b0 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 800177a:	e003      	b.n	8001784 <LcdDirWrite+0x44>
    d8 = SPIX->DR;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <LcdDirWrite+0x60>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	71fb      	strb	r3, [r7, #7]
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos))
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <LcdDirWrite+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f7      	bne.n	800177c <LcdDirWrite+0x3c>
  SPIX->CR1 |= SPI_CR1_SPE;
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <LcdDirWrite+0x60>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a03      	ldr	r2, [pc, #12]	; (80017a0 <LcdDirWrite+0x60>)
 8001792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40013000 	.word	0x40013000
 80017a4:	42260100 	.word	0x42260100

080017a8 <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  SPIX->DR = d8;
 80017b2:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <LcdWrite8+0x28>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 80017b8:	2002      	movs	r0, #2
 80017ba:	f000 f8f9 	bl	80019b0 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80017be:	bf00      	nop
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <LcdWrite8+0x2c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1fb      	bne.n	80017c0 <LcdWrite8+0x18>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40013000 	.word	0x40013000
 80017d4:	4226011c 	.word	0x4226011c

080017d8 <LcdRead8>:

//-----------------------------------------------------------------------------
extern inline uint8_t LcdRead8(void);
inline uint8_t LcdRead8(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
  uint8_t d8;
  while(!BITBAND_ACCESS(SPIX->SR, SPI_SR_RXNE_Pos));
 80017de:	bf00      	nop
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <LcdRead8+0x24>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0fb      	beq.n	80017e0 <LcdRead8+0x8>
  d8 = (uint8_t)SPIX->DR;
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <LcdRead8+0x28>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	71fb      	strb	r3, [r7, #7]
  return d8;
 80017ee:	79fb      	ldrb	r3, [r7, #7]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	42260100 	.word	0x42260100
 8001800:	40013000 	.word	0x40013000

08001804 <LcdCmdWrite8>:

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <LcdCmdWrite8+0x34>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
  SPIX->DR = cmd8;
 8001814:	4a09      	ldr	r2, [pc, #36]	; (800183c <LcdCmdWrite8+0x38>)
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 800181a:	2002      	movs	r0, #2
 800181c:	f000 f8c8 	bl	80019b0 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 8001820:	bf00      	nop
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <LcdCmdWrite8+0x3c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1fb      	bne.n	8001822 <LcdCmdWrite8+0x1e>
  LCD_RS_DATA;
 800182a:	4b03      	ldr	r3, [pc, #12]	; (8001838 <LcdCmdWrite8+0x34>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	4241029c 	.word	0x4241029c
 800183c:	40013000 	.word	0x40013000
 8001840:	4226011c 	.word	0x4226011c

08001844 <LcdWrite16>:

//-----------------------------------------------------------------------------
extern inline void LcdWrite16(uint16_t d16);
inline void LcdWrite16(uint16_t d16)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
  SPIX->DR = d16;
 800184e:	4a07      	ldr	r2, [pc, #28]	; (800186c <LcdWrite16+0x28>)
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(1);
 8001854:	2001      	movs	r0, #1
 8001856:	f000 f8ab 	bl	80019b0 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 800185a:	bf00      	nop
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <LcdWrite16+0x2c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1fb      	bne.n	800185c <LcdWrite16+0x18>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40013000 	.word	0x40013000
 8001870:	4226011c 	.word	0x4226011c

08001874 <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  while(Size--)
 8001880:	e00a      	b.n	8001898 <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff8e 	bl	80017a8 <LcdWrite8>
    if(dinc)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <LCD_IO_WriteMultiData8+0x24>
      pData++;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3301      	adds	r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	1e5a      	subs	r2, r3, #1
 800189c:	60ba      	str	r2, [r7, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ef      	bne.n	8001882 <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 80018a2:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <LCD_IO_WriteMultiData8+0x3c>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	42408298 	.word	0x42408298

080018b4 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  while(Size--)
 80018c0:	e00a      	b.n	80018d8 <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ffbc 	bl	8001844 <LcdWrite16>
    if(dinc)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <LCD_IO_WriteMultiData16+0x24>
      pData++;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3302      	adds	r3, #2
 80018d6:	60fb      	str	r3, [r7, #12]
  while(Size--)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	1e5a      	subs	r2, r3, #1
 80018dc:	60ba      	str	r2, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1ef      	bne.n	80018c2 <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 80018e2:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <LCD_IO_WriteMultiData16+0x3c>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	42408298 	.word	0x42408298

080018f4 <LCD_IO_ReadMultiData8>:
//-----------------------------------------------------------------------------
#if LCD_SPI_MODE != 0
#if DMANUM(LCD_DMA_RX) == 0 || LCD_SPI == 0

void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint8_t d8;
  while(Size--)
 80018fe:	e009      	b.n	8001914 <LCD_IO_ReadMultiData8+0x20>
  {
    d8 = LcdRead8();
 8001900:	f7ff ff6a 	bl	80017d8 <LcdRead8>
 8001904:	4603      	mov	r3, r0
 8001906:	73fb      	strb	r3, [r7, #15]
    *pData = d8;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	701a      	strb	r2, [r3, #0]
    pData++;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3301      	adds	r3, #1
 8001912:	607b      	str	r3, [r7, #4]
  while(Size--)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	1e5a      	subs	r2, r3, #1
 8001918:	603a      	str	r2, [r7, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <LCD_IO_ReadMultiData8+0xc>
  }
  LCD_CS_OFF;
 800191e:	4b04      	ldr	r3, [pc, #16]	; (8001930 <LCD_IO_ReadMultiData8+0x3c>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 8001924:	f7ff ff0c 	bl	8001740 <LcdDirWrite>
}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	42408298 	.word	0x42408298

08001934 <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint8_t  rgb888[3];
  while(Size--)
 800193e:	e027      	b.n	8001990 <LCD_IO_ReadMultiData16to24+0x5c>
  {
    rgb888[0] = LcdRead8();
 8001940:	f7ff ff4a 	bl	80017d8 <LcdRead8>
 8001944:	4603      	mov	r3, r0
 8001946:	733b      	strb	r3, [r7, #12]
    rgb888[1] = LcdRead8();
 8001948:	f7ff ff46 	bl	80017d8 <LcdRead8>
 800194c:	4603      	mov	r3, r0
 800194e:	737b      	strb	r3, [r7, #13]
    rgb888[2] = LcdRead8();
 8001950:	f7ff ff42 	bl	80017d8 <LcdRead8>
 8001954:	4603      	mov	r3, r0
 8001956:	73bb      	strb	r3, [r7, #14]
    *pData = (rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 8001958:	7b3b      	ldrb	r3, [r7, #12]
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b21b      	sxth	r3, r3
 800195e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001962:	f023 0307 	bic.w	r3, r3, #7
 8001966:	b21a      	sxth	r2, r3
 8001968:	7b7b      	ldrb	r3, [r7, #13]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	b21b      	sxth	r3, r3
 800196e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001972:	b21b      	sxth	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b21a      	sxth	r2, r3
 8001978:	7bbb      	ldrb	r3, [r7, #14]
 800197a:	08db      	lsrs	r3, r3, #3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	b21b      	sxth	r3, r3
 8001980:	4313      	orrs	r3, r2
 8001982:	b21b      	sxth	r3, r3
 8001984:	b29a      	uxth	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	801a      	strh	r2, [r3, #0]
    pData++;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3302      	adds	r3, #2
 800198e:	607b      	str	r3, [r7, #4]
  while(Size--)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	1e5a      	subs	r2, r3, #1
 8001994:	603a      	str	r2, [r7, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1d2      	bne.n	8001940 <LCD_IO_ReadMultiData16to24+0xc>
  }
  LCD_CS_OFF;
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <LCD_IO_ReadMultiData16to24+0x78>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]
  LcdDirWrite();
 80019a0:	f7ff fece 	bl	8001740 <LcdDirWrite>
}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	42408298 	.word	0x42408298

080019b0 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  while(c--);
 80019b8:	bf00      	nop
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	1e5a      	subs	r2, r3, #1
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1fa      	bne.n	80019ba <LCD_IO_Delay+0xa>
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f002 fd05 	bl	80043e8 <HAL_Delay>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <LCD_IO_Bl_OnOff+0x18>
    GPIOX_ODR(LCD_BL) = LCD_BLON;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <LCD_IO_Bl_OnOff+0x2c>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 80019fe:	e002      	b.n	8001a06 <LCD_IO_Bl_OnOff+0x1e>
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <LCD_IO_Bl_OnOff+0x2c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	424002a0 	.word	0x424002a0

08001a18 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <LCD_IO_Init+0x148>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	4a4f      	ldr	r2, [pc, #316]	; (8001b60 <LCD_IO_Init+0x148>)
 8001a22:	f043 0307 	orr.w	r3, r3, #7
 8001a26:	6313      	str	r3, [r2, #48]	; 0x30
                  GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_MISO |
                  DMA1_CLOCK_TX | DMA1_CLOCK_RX;

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_BL);
 8001a28:	4b4e      	ldr	r3, [pc, #312]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a30:	4a4c      	ldr	r2, [pc, #304]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
  LCD_IO_Bl_OnOff(1);
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f7ff ffd5 	bl	80019e8 <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8001a3e:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001a46:	4a47      	ldr	r2, [pc, #284]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 8001a4e:	4b45      	ldr	r3, [pc, #276]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4a44      	ldr	r2, [pc, #272]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001a54:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001a58:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 8001a5a:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <LCD_IO_Init+0x150>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8001a60:	4b42      	ldr	r3, [pc, #264]	; (8001b6c <LCD_IO_Init+0x154>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8001a66:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <LCD_IO_Init+0x158>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8001a6c:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <LCD_IO_Init+0x15c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a74:	4a3f      	ldr	r2, [pc, #252]	; (8001b74 <LCD_IO_Init+0x15c>)
 8001a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7a:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 8001a7c:	4b3e      	ldr	r3, [pc, #248]	; (8001b78 <LCD_IO_Init+0x160>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a84:	4a3c      	ldr	r2, [pc, #240]	; (8001b78 <LCD_IO_Init+0x160>)
 8001a86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a8a:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8001a8c:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <LCD_IO_Init+0x15c>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4a38      	ldr	r2, [pc, #224]	; (8001b74 <LCD_IO_Init+0x15c>)
 8001a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a96:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8001a98:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <LCD_IO_Init+0x160>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4a36      	ldr	r2, [pc, #216]	; (8001b78 <LCD_IO_Init+0x160>)
 8001a9e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001aa2:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4a2e      	ldr	r2, [pc, #184]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001aaa:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001aae:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 8001ab0:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4a2b      	ldr	r2, [pc, #172]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001ab6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aba:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8001abc:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <LCD_IO_Init+0x164>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
  #endif

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 8001ac2:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <LCD_IO_Init+0x168>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

  GPIOX_AFR(LCD_SPI_AFR, LCD_SCK);
 8001ac8:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001ad0:	4a24      	ldr	r2, [pc, #144]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001ad2:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001ad6:	6213      	str	r3, [r2, #32]
  GPIOX_MODER(MODE_ALTER, LCD_SCK);
 8001ad8:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001ae0:	4a20      	ldr	r2, [pc, #128]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001ae2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ae6:	6013      	str	r3, [r2, #0]
  GPIOX_AFR(LCD_SPI_AFR, LCD_MOSI);
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001af0:	4a1c      	ldr	r2, [pc, #112]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001af2:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8001af6:	6213      	str	r3, [r2, #32]
  GPIOX_MODER(MODE_ALTER, LCD_MOSI);
 8001af8:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b00:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b06:	6013      	str	r3, [r2, #0]

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_AFR(LCD_SPI_AFR, LCD_MISO);
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001b12:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8001b16:	6213      	str	r3, [r2, #32]
  GPIOX_MODER(MODE_ALTER, LCD_MISO);
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b20:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <LCD_IO_Init+0x14c>)
 8001b22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b26:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <LCD_IO_Init+0x16c>)
 8001b2a:	f240 321f 	movw	r2, #799	; 0x31f
 8001b2e:	601a      	str	r2, [r3, #0]
  #endif // #else LCD_SPI_MODE == 1

  SPIX->CR1 |= SPI_CR1_SPE;
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <LCD_IO_Init+0x16c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <LCD_IO_Init+0x16c>)
 8001b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b3a:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8001b3c:	200a      	movs	r0, #10
 8001b3e:	f7ff ff47 	bl	80019d0 <LCD_Delay>
  LCD_RST_ON;
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <LCD_IO_Init+0x150>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8001b48:	200a      	movs	r0, #10
 8001b4a:	f7ff ff41 	bl	80019d0 <LCD_Delay>
  LCD_RST_OFF;
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <LCD_IO_Init+0x150>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8001b54:	200a      	movs	r0, #10
 8001b56:	f7ff ff3b 	bl	80019d0 <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020000 	.word	0x40020000
 8001b68:	424002a4 	.word	0x424002a4
 8001b6c:	4241029c 	.word	0x4241029c
 8001b70:	42408298 	.word	0x42408298
 8001b74:	40020800 	.word	0x40020800
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	42400294 	.word	0x42400294
 8001b80:	424708b0 	.word	0x424708b0
 8001b84:	40013000 	.word	0x40013000

08001b88 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <LCD_IO_WriteCmd8+0x2c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001b98:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <LCD_IO_WriteCmd8+0x30>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fe2f 	bl	8001804 <LcdCmdWrite8>
  LCD_CS_OFF;
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <LCD_IO_WriteCmd8+0x30>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	4226002c 	.word	0x4226002c
 8001bb8:	42408298 	.word	0x42408298

08001bbc <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <LCD_IO_WriteData8+0x2c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <LCD_IO_WriteData8+0x30>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fde7 	bl	80017a8 <LcdWrite8>
  LCD_CS_OFF;
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <LCD_IO_WriteData8+0x30>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	4226002c 	.word	0x4226002c
 8001bec:	42408298 	.word	0x42408298

08001bf0 <LCD_IO_WriteCmd8DataFill16>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	603a      	str	r2, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <LCD_IO_WriteCmd8DataFill16+0x40>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fdf8 	bl	8001804 <LcdCmdWrite8>
  LcdSpiMode16();
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <LCD_IO_WriteCmd8DataFill16+0x40>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6839      	ldr	r1, [r7, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fe47 	bl	80018b4 <LCD_IO_WriteMultiData16>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	4226002c 	.word	0x4226002c
 8001c34:	42408298 	.word	0x42408298

08001c38 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <LCD_IO_WriteCmd8MultipleData8+0x34>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <LCD_IO_WriteCmd8MultipleData8+0x38>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fdd5 	bl	8001804 <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	68b8      	ldr	r0, [r7, #8]
 8001c60:	f7ff fe08 	bl	8001874 <LCD_IO_WriteMultiData8>
}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	4226002c 	.word	0x4226002c
 8001c70:	42408298 	.word	0x42408298

08001c74 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <LCD_IO_WriteCmd8MultipleData16+0x3c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fdb7 	bl	8001804 <LcdCmdWrite8>
  LcdSpiMode16();
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <LCD_IO_WriteCmd8MultipleData16+0x3c>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	68b8      	ldr	r0, [r7, #8]
 8001ca2:	f7ff fe07 	bl	80018b4 <LCD_IO_WriteMultiData16>
}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	4226002c 	.word	0x4226002c
 8001cb4:	42408298 	.word	0x42408298

08001cb8 <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <LCD_IO_ReadCmd8MultipleData8+0x40>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <LCD_IO_ReadCmd8MultipleData8+0x44>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fd94 	bl	8001804 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8001ce2:	6838      	ldr	r0, [r7, #0]
 8001ce4:	f7ff fcec 	bl	80016c0 <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	68b8      	ldr	r0, [r7, #8]
 8001cec:	f7ff fe02 	bl	80018f4 <LCD_IO_ReadMultiData8>
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	4226002c 	.word	0x4226002c
 8001cfc:	42408298 	.word	0x42408298

08001d00 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <LCD_IO_ReadCmd8MultipleData24to16+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <LCD_IO_ReadCmd8MultipleData24to16+0x44>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fd70 	bl	8001804 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8001d2a:	6838      	ldr	r0, [r7, #0]
 8001d2c:	f7ff fcc8 	bl	80016c0 <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	68b8      	ldr	r0, [r7, #8]
 8001d34:	f7ff fdfe 	bl	8001934 <LCD_IO_ReadMultiData16to24>
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	4226002c 	.word	0x4226002c
 8001d44:	42408298 	.word	0x42408298

08001d48 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <BSP_LCD_Init+0x34>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <BSP_LCD_Init+0x38>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <BSP_LCD_Init+0x38>)
 8001d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d66:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <BSP_LCD_Init+0x38>)
 8001d6a:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <BSP_LCD_Init+0x3c>)
 8001d6c:	609a      	str	r2, [r3, #8]
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
  #endif
  
  ret = LCD_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001d72:	79fb      	ldrb	r3, [r7, #7]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000074 	.word	0x20000074
 8001d80:	20000318 	.word	0x20000318
 8001d84:	20000000 	.word	0x20000000

08001d88 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <BSP_LCD_GetXSize+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	4798      	blx	r3
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000074 	.word	0x20000074

08001da0 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <BSP_LCD_GetYSize+0x14>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	4798      	blx	r3
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000074 	.word	0x20000074

08001db8 <BSP_LCD_GetTextColor>:
  * @brief  Gets the LCD text color.
  * @param  None 
  * @retval Used text color.
  */
uint16_t BSP_LCD_GetTextColor(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return DrawProp.TextColor;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <BSP_LCD_GetTextColor+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	b29b      	uxth	r3, r3
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	20000318 	.word	0x20000318

08001dd0 <BSP_LCD_GetBackColor>:
  * @brief  Gets the LCD background color.
  * @param  None
  * @retval Used background color
  */
uint16_t BSP_LCD_GetBackColor(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return DrawProp.BackColor;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <BSP_LCD_GetBackColor+0x14>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	b29b      	uxth	r3, r3
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	20000318 	.word	0x20000318

08001de8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	4a03      	ldr	r2, [pc, #12]	; (8001e04 <BSP_LCD_SetTextColor+0x1c>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	20000318 	.word	0x20000318

08001e08 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	4a03      	ldr	r2, [pc, #12]	; (8001e24 <BSP_LCD_SetBackColor+0x1c>)
 8001e16:	6053      	str	r3, [r2, #4]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	20000318 	.word	0x20000318

08001e28 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <BSP_LCD_SetFont+0x1c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6093      	str	r3, [r2, #8]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000318 	.word	0x20000318

08001e48 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	4603      	mov	r3, r0
 8001e50:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <BSP_LCD_Clear+0x38>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001e58:	f7ff ff96 	bl	8001d88 <BSP_LCD_GetXSize>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461d      	mov	r5, r3
 8001e60:	f7ff ff9e 	bl	8001da0 <BSP_LCD_GetYSize>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	462a      	mov	r2, r5
 8001e70:	2100      	movs	r1, #0
 8001e72:	2000      	movs	r0, #0
 8001e74:	47a0      	blx	r4
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000074 	.word	0x20000074

08001e84 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	80fb      	strh	r3, [r7, #6]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	80bb      	strh	r3, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <BSP_LCD_DisplayChar+0x50>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001ea0:	490c      	ldr	r1, [pc, #48]	; (8001ed4 <BSP_LCD_DisplayChar+0x50>)
 8001ea2:	6889      	ldr	r1, [r1, #8]
 8001ea4:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001ea6:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <BSP_LCD_DisplayChar+0x50>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	889b      	ldrh	r3, [r3, #4]
 8001eb0:	3307      	adds	r3, #7
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	da00      	bge.n	8001eb8 <BSP_LCD_DisplayChar+0x34>
 8001eb6:	3307      	adds	r3, #7
 8001eb8:	10db      	asrs	r3, r3, #3
 8001eba:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001ebe:	441a      	add	r2, r3
 8001ec0:	88b9      	ldrh	r1, [r7, #4]
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fa99 	bl	80023fc <DrawChar>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000318 	.word	0x20000318

08001ed8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60ba      	str	r2, [r7, #8]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	81fb      	strh	r3, [r7, #14]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	81bb      	strh	r3, [r7, #12]
 8001eea:	4613      	mov	r3, r2
 8001eec:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	83fb      	strh	r3, [r7, #30]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001f02:	e002      	b.n	8001f0a <BSP_LCD_DisplayStringAt+0x32>
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	3301      	adds	r3, #1
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	617a      	str	r2, [r7, #20]
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f6      	bne.n	8001f04 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8001f16:	f7ff ff37 	bl	8001d88 <BSP_LCD_GetXSize>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b33      	ldr	r3, [pc, #204]	; (8001fec <BSP_LCD_DisplayStringAt+0x114>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	889b      	ldrh	r3, [r3, #4]
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d014      	beq.n	8001f5c <BSP_LCD_DisplayStringAt+0x84>
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d00f      	beq.n	8001f56 <BSP_LCD_DisplayStringAt+0x7e>
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d11e      	bne.n	8001f78 <BSP_LCD_DisplayStringAt+0xa0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	4a2a      	ldr	r2, [pc, #168]	; (8001fec <BSP_LCD_DisplayStringAt+0x114>)
 8001f42:	6892      	ldr	r2, [r2, #8]
 8001f44:	8892      	ldrh	r2, [r2, #4]
 8001f46:	fb02 f303 	mul.w	r3, r2, r3
 8001f4a:	085b      	lsrs	r3, r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	89fb      	ldrh	r3, [r7, #14]
 8001f50:	4413      	add	r3, r2
 8001f52:	83fb      	strh	r3, [r7, #30]
      break;
 8001f54:	e013      	b.n	8001f7e <BSP_LCD_DisplayStringAt+0xa6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001f56:	89fb      	ldrh	r3, [r7, #14]
 8001f58:	83fb      	strh	r3, [r7, #30]
      break;
 8001f5a:	e010      	b.n	8001f7e <BSP_LCD_DisplayStringAt+0xa6>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	4b21      	ldr	r3, [pc, #132]	; (8001fec <BSP_LCD_DisplayStringAt+0x114>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	889b      	ldrh	r3, [r3, #4]
 8001f6a:	fb12 f303 	smulbb	r3, r2, r3
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	89fb      	ldrh	r3, [r7, #14]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	83fb      	strh	r3, [r7, #30]
      break;
 8001f76:	e002      	b.n	8001f7e <BSP_LCD_DisplayStringAt+0xa6>
    }    
  default:
    {
      refcolumn = Xpos;
 8001f78:	89fb      	ldrh	r3, [r7, #14]
 8001f7a:	83fb      	strh	r3, [r7, #30]
      break;
 8001f7c:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8001f7e:	e012      	b.n	8001fa6 <BSP_LCD_DisplayStringAt+0xce>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	781a      	ldrb	r2, [r3, #0]
 8001f84:	89b9      	ldrh	r1, [r7, #12]
 8001f86:	8bfb      	ldrh	r3, [r7, #30]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff7b 	bl	8001e84 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <BSP_LCD_DisplayStringAt+0x114>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	889a      	ldrh	r2, [r3, #4]
 8001f94:	8bfb      	ldrh	r3, [r7, #30]
 8001f96:	4413      	add	r3, r2
 8001f98:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
    i++;
 8001fa0:	8bbb      	ldrh	r3, [r7, #28]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	bf14      	ite	ne
 8001fae:	2301      	movne	r3, #1
 8001fb0:	2300      	moveq	r3, #0
 8001fb2:	b2dc      	uxtb	r4, r3
 8001fb4:	f7ff fee8 	bl	8001d88 <BSP_LCD_GetXSize>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	4619      	mov	r1, r3
 8001fbc:	8bbb      	ldrh	r3, [r7, #28]
 8001fbe:	4a0b      	ldr	r2, [pc, #44]	; (8001fec <BSP_LCD_DisplayStringAt+0x114>)
 8001fc0:	6892      	ldr	r2, [r2, #8]
 8001fc2:	8892      	ldrh	r2, [r2, #4]
 8001fc4:	fb02 f303 	mul.w	r3, r2, r3
 8001fc8:	1acb      	subs	r3, r1, r3
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <BSP_LCD_DisplayStringAt+0x114>)
 8001fce:	6892      	ldr	r2, [r2, #8]
 8001fd0:	8892      	ldrh	r2, [r2, #4]
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	bfac      	ite	ge
 8001fd6:	2301      	movge	r3, #1
 8001fd8:	2300      	movlt	r3, #0
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	4023      	ands	r3, r4
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1cd      	bne.n	8001f80 <BSP_LCD_DisplayStringAt+0xa8>
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3724      	adds	r7, #36	; 0x24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd90      	pop	{r4, r7, pc}
 8001fec:	20000318 	.word	0x20000318

08001ff0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	80fb      	strh	r3, [r7, #6]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	80bb      	strh	r3, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <BSP_LCD_DrawPixel+0x34>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <BSP_LCD_DrawPixel+0x34>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	887a      	ldrh	r2, [r7, #2]
 8002014:	88b9      	ldrh	r1, [r7, #4]
 8002016:	88f8      	ldrh	r0, [r7, #6]
 8002018:	4798      	blx	r3
  }
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000074 	.word	0x20000074

08002028 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	80fb      	strh	r3, [r7, #6]
 8002032:	460b      	mov	r3, r1
 8002034:	80bb      	strh	r3, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <BSP_LCD_DrawHLine+0x6c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <BSP_LCD_DrawHLine+0x6c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6a1c      	ldr	r4, [r3, #32]
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <BSP_LCD_DrawHLine+0x70>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	b298      	uxth	r0, r3
 8002054:	887b      	ldrh	r3, [r7, #2]
 8002056:	88ba      	ldrh	r2, [r7, #4]
 8002058:	88f9      	ldrh	r1, [r7, #6]
 800205a:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800205c:	e015      	b.n	800208a <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	e00e      	b.n	8002082 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	b29a      	uxth	r2, r3
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	4413      	add	r3, r2
 800206c:	b298      	uxth	r0, r3
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <BSP_LCD_DrawHLine+0x70>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	b29a      	uxth	r2, r3
 8002074:	88bb      	ldrh	r3, [r7, #4]
 8002076:	4619      	mov	r1, r3
 8002078:	f7ff ffba 	bl	8001ff0 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3301      	adds	r3, #1
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	429a      	cmp	r2, r3
 8002088:	d3ec      	bcc.n	8002064 <BSP_LCD_DrawHLine+0x3c>
}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bd90      	pop	{r4, r7, pc}
 8002092:	bf00      	nop
 8002094:	20000074 	.word	0x20000074
 8002098:	20000318 	.word	0x20000318

0800209c <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	80fb      	strh	r3, [r7, #6]
 80020a6:	460b      	mov	r3, r1
 80020a8:	80bb      	strh	r3, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <BSP_LCD_DrawVLine+0x6c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <BSP_LCD_DrawVLine+0x6c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <BSP_LCD_DrawVLine+0x70>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	b298      	uxth	r0, r3
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	88ba      	ldrh	r2, [r7, #4]
 80020cc:	88f9      	ldrh	r1, [r7, #6]
 80020ce:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 80020d0:	e015      	b.n	80020fe <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	e00e      	b.n	80020f6 <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	88bb      	ldrh	r3, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	b299      	uxth	r1, r3
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <BSP_LCD_DrawVLine+0x70>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ff80 	bl	8001ff0 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3301      	adds	r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d3ec      	bcc.n	80020d8 <BSP_LCD_DrawVLine+0x3c>
}
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bd90      	pop	{r4, r7, pc}
 8002106:	bf00      	nop
 8002108:	20000074 	.word	0x20000074
 800210c:	20000318 	.word	0x20000318

08002110 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b08b      	sub	sp, #44	; 0x2c
 8002114:	af00      	add	r7, sp, #0
 8002116:	4604      	mov	r4, r0
 8002118:	4608      	mov	r0, r1
 800211a:	4611      	mov	r1, r2
 800211c:	461a      	mov	r2, r3
 800211e:	4623      	mov	r3, r4
 8002120:	80fb      	strh	r3, [r7, #6]
 8002122:	4603      	mov	r3, r0
 8002124:	80bb      	strh	r3, [r7, #4]
 8002126:	460b      	mov	r3, r1
 8002128:	807b      	strh	r3, [r7, #2]
 800212a:	4613      	mov	r3, r2
 800212c:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 800212e:	2300      	movs	r3, #0
 8002130:	823b      	strh	r3, [r7, #16]
 8002132:	2300      	movs	r3, #0
 8002134:	81fb      	strh	r3, [r7, #14]
 8002136:	2300      	movs	r3, #0
 8002138:	84fb      	strh	r3, [r7, #38]	; 0x26
 800213a:	2300      	movs	r3, #0
 800213c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800213e:	2300      	movs	r3, #0
 8002140:	847b      	strh	r3, [r7, #34]	; 0x22
 8002142:	2300      	movs	r3, #0
 8002144:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8002146:	2300      	movs	r3, #0
 8002148:	83fb      	strh	r3, [r7, #30]
 800214a:	2300      	movs	r3, #0
 800214c:	83bb      	strh	r3, [r7, #28]
 800214e:	2300      	movs	r3, #0
 8002150:	837b      	strh	r3, [r7, #26]
 8002152:	2300      	movs	r3, #0
 8002154:	833b      	strh	r3, [r7, #24]
 8002156:	2300      	movs	r3, #0
 8002158:	82fb      	strh	r3, [r7, #22]
 800215a:	2300      	movs	r3, #0
 800215c:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	bfb8      	it	lt
 800216c:	425b      	neglt	r3, r3
 800216e:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002170:	883a      	ldrh	r2, [r7, #0]
 8002172:	88bb      	ldrh	r3, [r7, #4]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	bfb8      	it	lt
 800217a:	425b      	neglt	r3, r3
 800217c:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8002182:	88bb      	ldrh	r3, [r7, #4]
 8002184:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	429a      	cmp	r2, r3
 800218c:	d304      	bcc.n	8002198 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 800218e:	2301      	movs	r3, #1
 8002190:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002192:	2301      	movs	r3, #1
 8002194:	843b      	strh	r3, [r7, #32]
 8002196:	e005      	b.n	80021a4 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002198:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800219c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 800219e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021a2:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 80021a4:	883a      	ldrh	r2, [r7, #0]
 80021a6:	88bb      	ldrh	r3, [r7, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d304      	bcc.n	80021b6 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80021ac:	2301      	movs	r3, #1
 80021ae:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80021b0:	2301      	movs	r3, #1
 80021b2:	83bb      	strh	r3, [r7, #28]
 80021b4:	e005      	b.n	80021c2 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80021b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ba:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80021bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c0:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80021c2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80021c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	db10      	blt.n	80021f0 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80021ce:	2300      	movs	r3, #0
 80021d0:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80021d2:	2300      	movs	r3, #0
 80021d4:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80021d6:	8a3b      	ldrh	r3, [r7, #16]
 80021d8:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80021da:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80021de:	0fda      	lsrs	r2, r3, #31
 80021e0:	4413      	add	r3, r2
 80021e2:	105b      	asrs	r3, r3, #1
 80021e4:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80021e6:	89fb      	ldrh	r3, [r7, #14]
 80021e8:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80021ea:	8a3b      	ldrh	r3, [r7, #16]
 80021ec:	82bb      	strh	r3, [r7, #20]
 80021ee:	e00f      	b.n	8002210 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80021f0:	2300      	movs	r3, #0
 80021f2:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80021f4:	2300      	movs	r3, #0
 80021f6:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80021f8:	89fb      	ldrh	r3, [r7, #14]
 80021fa:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80021fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002200:	0fda      	lsrs	r2, r3, #31
 8002202:	4413      	add	r3, r2
 8002204:	105b      	asrs	r3, r3, #1
 8002206:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002208:	8a3b      	ldrh	r3, [r7, #16]
 800220a:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 800220c:	89fb      	ldrh	r3, [r7, #14]
 800220e:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002210:	2300      	movs	r3, #0
 8002212:	827b      	strh	r3, [r7, #18]
 8002214:	e031      	b.n	800227a <BSP_LCD_DrawLine+0x16a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp.TextColor);  /* Draw the current pixel */
 8002216:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002218:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <BSP_LCD_DrawLine+0x180>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	f7ff fee5 	bl	8001ff0 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8002226:	8b3a      	ldrh	r2, [r7, #24]
 8002228:	8afb      	ldrh	r3, [r7, #22]
 800222a:	4413      	add	r3, r2
 800222c:	b29b      	uxth	r3, r3
 800222e:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002230:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002234:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002238:	429a      	cmp	r2, r3
 800223a:	db0e      	blt.n	800225a <BSP_LCD_DrawLine+0x14a>
    {
      num -= den;                             /* Calculate the new numerator value */
 800223c:	8b3a      	ldrh	r2, [r7, #24]
 800223e:	8b7b      	ldrh	r3, [r7, #26]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	b29b      	uxth	r3, r3
 8002244:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002246:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002248:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800224a:	4413      	add	r3, r2
 800224c:	b29b      	uxth	r3, r3
 800224e:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002250:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002252:	8bfb      	ldrh	r3, [r7, #30]
 8002254:	4413      	add	r3, r2
 8002256:	b29b      	uxth	r3, r3
 8002258:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800225a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800225c:	8c3b      	ldrh	r3, [r7, #32]
 800225e:	4413      	add	r3, r2
 8002260:	b29b      	uxth	r3, r3
 8002262:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002264:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002266:	8bbb      	ldrh	r3, [r7, #28]
 8002268:	4413      	add	r3, r2
 800226a:	b29b      	uxth	r3, r3
 800226c:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800226e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002272:	b29b      	uxth	r3, r3
 8002274:	3301      	adds	r3, #1
 8002276:	b29b      	uxth	r3, r3
 8002278:	827b      	strh	r3, [r7, #18]
 800227a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800227e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002282:	429a      	cmp	r2, r3
 8002284:	ddc7      	ble.n	8002216 <BSP_LCD_DrawLine+0x106>
  }
}
 8002286:	bf00      	nop
 8002288:	372c      	adds	r7, #44	; 0x2c
 800228a:	46bd      	mov	sp, r7
 800228c:	bd90      	pop	{r4, r7, pc}
 800228e:	bf00      	nop
 8002290:	20000318 	.word	0x20000318

08002294 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4604      	mov	r4, r0
 800229c:	4608      	mov	r0, r1
 800229e:	4611      	mov	r1, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	4623      	mov	r3, r4
 80022a4:	80fb      	strh	r3, [r7, #6]
 80022a6:	4603      	mov	r3, r0
 80022a8:	80bb      	strh	r3, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	807b      	strh	r3, [r7, #2]
 80022ae:	4613      	mov	r3, r2
 80022b0:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80022b2:	887a      	ldrh	r2, [r7, #2]
 80022b4:	88b9      	ldrh	r1, [r7, #4]
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff feb5 	bl	8002028 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height - 1), Width);
 80022be:	88ba      	ldrh	r2, [r7, #4]
 80022c0:	883b      	ldrh	r3, [r7, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b299      	uxth	r1, r3
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff feaa 	bl	8002028 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80022d4:	883a      	ldrh	r2, [r7, #0]
 80022d6:	88b9      	ldrh	r1, [r7, #4]
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fede 	bl	800209c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width - 1), Ypos, Height);
 80022e0:	88fa      	ldrh	r2, [r7, #6]
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	4413      	add	r3, r2
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	883a      	ldrh	r2, [r7, #0]
 80022ee:	88b9      	ldrh	r1, [r7, #4]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fed3 	bl	800209c <BSP_LCD_DrawVLine>
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd90      	pop	{r4, r7, pc}
	...

08002300 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	603a      	str	r2, [r7, #0]
 800230a:	80fb      	strh	r3, [r7, #6]
 800230c:	460b      	mov	r3, r1
 800230e:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	3312      	adds	r3, #18
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	3313      	adds	r3, #19
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	441a      	add	r2, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	3314      	adds	r3, #20
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	441a      	add	r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	3315      	adds	r3, #21
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	061b      	lsls	r3, r3, #24
 800233c:	4413      	add	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	3316      	adds	r3, #22
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	3317      	adds	r3, #23
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	441a      	add	r2, r3
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	3318      	adds	r3, #24
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	041b      	lsls	r3, r3, #16
 800235a:	441a      	add	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	3319      	adds	r3, #25
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	061b      	lsls	r3, r3, #24
 8002364:	4413      	add	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	b29b      	uxth	r3, r3
 8002370:	88b9      	ldrh	r1, [r7, #4]
 8002372:	88f8      	ldrh	r0, [r7, #6]
 8002374:	f000 f938 	bl	80025e8 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <BSP_LCD_DrawBitmap+0xb0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <BSP_LCD_DrawBitmap+0xb0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	88b9      	ldrh	r1, [r7, #4]
 800238a:	88f8      	ldrh	r0, [r7, #6]
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8002390:	f7ff fcfa 	bl	8001d88 <BSP_LCD_GetXSize>
 8002394:	4603      	mov	r3, r0
 8002396:	461c      	mov	r4, r3
 8002398:	f7ff fd02 	bl	8001da0 <BSP_LCD_GetYSize>
 800239c:	4603      	mov	r3, r0
 800239e:	4622      	mov	r2, r4
 80023a0:	2100      	movs	r1, #0
 80023a2:	2000      	movs	r0, #0
 80023a4:	f000 f920 	bl	80025e8 <SetDisplayWindow>
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}
 80023b0:	20000074 	.word	0x20000074

080023b4 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80023b4:	b5b0      	push	{r4, r5, r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	4604      	mov	r4, r0
 80023bc:	4608      	mov	r0, r1
 80023be:	4611      	mov	r1, r2
 80023c0:	461a      	mov	r2, r3
 80023c2:	4623      	mov	r3, r4
 80023c4:	80fb      	strh	r3, [r7, #6]
 80023c6:	4603      	mov	r3, r0
 80023c8:	80bb      	strh	r3, [r7, #4]
 80023ca:	460b      	mov	r3, r1
 80023cc:	807b      	strh	r3, [r7, #2]
 80023ce:	4613      	mov	r3, r2
 80023d0:	803b      	strh	r3, [r7, #0]
  lcd_drv->FillRect(Xpos, Ypos, Width, Height, DrawProp.TextColor);
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <BSP_LCD_FillRect+0x40>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <BSP_LCD_FillRect+0x44>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	883d      	ldrh	r5, [r7, #0]
 80023e0:	887a      	ldrh	r2, [r7, #2]
 80023e2:	88b9      	ldrh	r1, [r7, #4]
 80023e4:	88f8      	ldrh	r0, [r7, #6]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	462b      	mov	r3, r5
 80023ea:	47a0      	blx	r4
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bdb0      	pop	{r4, r5, r7, pc}
 80023f4:	20000074 	.word	0x20000074
 80023f8:	20000318 	.word	0x20000318

080023fc <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08c      	sub	sp, #48	; 0x30
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	603a      	str	r2, [r7, #0]
 8002406:	80fb      	strh	r3, [r7, #6]
 8002408:	460b      	mov	r3, r1
 800240a:	80bb      	strh	r3, [r7, #4]
  uint8_t *bitmap = calloc(DrawProp.pFont->Height * DrawProp.pFont->Width*2 + OFFSET_BITMAP, sizeof(uint8_t));
 800240c:	4b75      	ldr	r3, [pc, #468]	; (80025e4 <DrawChar+0x1e8>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	88db      	ldrh	r3, [r3, #6]
 8002412:	461a      	mov	r2, r3
 8002414:	4b73      	ldr	r3, [pc, #460]	; (80025e4 <DrawChar+0x1e8>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	889b      	ldrh	r3, [r3, #4]
 800241a:	fb03 f302 	mul.w	r3, r3, r2
 800241e:	331b      	adds	r3, #27
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2101      	movs	r1, #1
 8002424:	4618      	mov	r0, r3
 8002426:	f006 f931 	bl	800868c <calloc>
 800242a:	4603      	mov	r3, r0
 800242c:	61fb      	str	r3, [r7, #28]

  uint32_t counterh = 0, counterw = 0, index = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002432:	2300      	movs	r3, #0
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	82fb      	strh	r3, [r7, #22]
 800243e:	2300      	movs	r3, #0
 8002440:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
  
  height = DrawProp.pFont->Height;
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <DrawChar+0x1e8>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	88db      	ldrh	r3, [r3, #6]
 8002454:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8002456:	4b63      	ldr	r3, [pc, #396]	; (80025e4 <DrawChar+0x1e8>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	889b      	ldrh	r3, [r3, #4]
 800245c:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 800245e:	8afa      	ldrh	r2, [r7, #22]
 8002460:	8abb      	ldrh	r3, [r7, #20]
 8002462:	fb12 f303 	smulbb	r3, r2, r3
 8002466:	b29b      	uxth	r3, r3
 8002468:	331b      	adds	r3, #27
 800246a:	b29a      	uxth	r2, r3
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	3302      	adds	r3, #2
 8002470:	0052      	lsls	r2, r2, #1
 8002472:	b292      	uxth	r2, r2
 8002474:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8002476:	8afb      	ldrh	r3, [r7, #22]
 8002478:	8aba      	ldrh	r2, [r7, #20]
 800247a:	fb02 f303 	mul.w	r3, r2, r3
 800247e:	331b      	adds	r3, #27
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	141a      	asrs	r2, r3, #16
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	3304      	adds	r3, #4
 8002488:	b292      	uxth	r2, r2
 800248a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	330a      	adds	r3, #10
 8002490:	2236      	movs	r2, #54	; 0x36
 8002492:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	3312      	adds	r3, #18
 8002498:	8aba      	ldrh	r2, [r7, #20]
 800249a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 800249c:	8abb      	ldrh	r3, [r7, #20]
 800249e:	141a      	asrs	r2, r3, #16
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	3314      	adds	r3, #20
 80024a4:	b292      	uxth	r2, r2
 80024a6:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	3316      	adds	r3, #22
 80024ac:	8afa      	ldrh	r2, [r7, #22]
 80024ae:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 80024b0:	8afb      	ldrh	r3, [r7, #22]
 80024b2:	141a      	asrs	r2, r3, #16
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	3318      	adds	r3, #24
 80024b8:	b292      	uxth	r2, r2
 80024ba:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 80024bc:	8abb      	ldrh	r3, [r7, #20]
 80024be:	3307      	adds	r3, #7
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	da00      	bge.n	80024c6 <DrawChar+0xca>
 80024c4:	3307      	adds	r3, #7
 80024c6:	10db      	asrs	r3, r3, #3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	8abb      	ldrh	r3, [r7, #20]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024da:	e072      	b.n	80025c2 <DrawChar+0x1c6>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 80024dc:	8abb      	ldrh	r3, [r7, #20]
 80024de:	3307      	adds	r3, #7
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	da00      	bge.n	80024e6 <DrawChar+0xea>
 80024e4:	3307      	adds	r3, #7
 80024e6:	10db      	asrs	r3, r3, #3
 80024e8:	461a      	mov	r2, r3
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	fb03 f302 	mul.w	r3, r3, r2
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
    
    int bytes = ((width + 7)/8);
 80024f6:	8abb      	ldrh	r3, [r7, #20]
 80024f8:	3307      	adds	r3, #7
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	da00      	bge.n	8002500 <DrawChar+0x104>
 80024fe:	3307      	adds	r3, #7
 8002500:	10db      	asrs	r3, r3, #3
 8002502:	60bb      	str	r3, [r7, #8]
    line = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < bytes; i++) {
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
 800250c:	e00d      	b.n	800252a <DrawChar+0x12e>
        line <<= 8;
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
        line |= pchar[i];
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4413      	add	r3, r2
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	4313      	orrs	r3, r2
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < bytes; i++) {
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	3301      	adds	r3, #1
 8002528:	623b      	str	r3, [r7, #32]
 800252a:	6a3a      	ldr	r2, [r7, #32]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	429a      	cmp	r2, r3
 8002530:	dbed      	blt.n	800250e <DrawChar+0x112>
    }
    
    for (counterw = 0; counterw < width; counterw++)
 8002532:	2300      	movs	r3, #0
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
 8002536:	e03d      	b.n	80025b4 <DrawChar+0x1b8>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8002538:	8afa      	ldrh	r2, [r7, #22]
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	8aba      	ldrh	r2, [r7, #20]
 8002542:	fb02 f203 	mul.w	r2, r2, r3
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	4413      	add	r3, r2
 800254a:	331b      	adds	r3, #27
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8002550:	8aba      	ldrh	r2, [r7, #20]
 8002552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002554:	1ad2      	subs	r2, r2, r3
 8002556:	7cfb      	ldrb	r3, [r7, #19]
 8002558:	4413      	add	r3, r2
 800255a:	3b01      	subs	r3, #1
 800255c:	2201      	movs	r2, #1
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	461a      	mov	r2, r3
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d010      	beq.n	800258e <DrawChar+0x192>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <DrawChar+0x1e8>)
 800256e:	6819      	ldr	r1, [r3, #0]
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4413      	add	r3, r2
 8002576:	b2ca      	uxtb	r2, r1
 8002578:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <DrawChar+0x1e8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	0a19      	lsrs	r1, r3, #8
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	3301      	adds	r3, #1
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	4413      	add	r3, r2
 8002588:	b2ca      	uxtb	r2, r1
 800258a:	701a      	strb	r2, [r3, #0]
 800258c:	e00f      	b.n	80025ae <DrawChar+0x1b2>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <DrawChar+0x1e8>)
 8002590:	6859      	ldr	r1, [r3, #4]
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	4413      	add	r3, r2
 8002598:	b2ca      	uxtb	r2, r1
 800259a:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <DrawChar+0x1e8>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	0a19      	lsrs	r1, r3, #8
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	3301      	adds	r3, #1
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	4413      	add	r3, r2
 80025aa:	b2ca      	uxtb	r2, r1
 80025ac:	701a      	strb	r2, [r3, #0]
    for (counterw = 0; counterw < width; counterw++)
 80025ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b0:	3301      	adds	r3, #1
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80025b4:	8abb      	ldrh	r3, [r7, #20]
 80025b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d3bd      	bcc.n	8002538 <DrawChar+0x13c>
  for(counterh = 0; counterh < height; counterh++)
 80025bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025be:	3301      	adds	r3, #1
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025c2:	8afb      	ldrh	r3, [r7, #22]
 80025c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d388      	bcc.n	80024dc <DrawChar+0xe0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 80025ca:	88b9      	ldrh	r1, [r7, #4]
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fe95 	bl	8002300 <BSP_LCD_DrawBitmap>
  free(bitmap);
 80025d6:	69f8      	ldr	r0, [r7, #28]
 80025d8:	f006 f88c 	bl	80086f4 <free>
}
 80025dc:	bf00      	nop
 80025de:	3730      	adds	r7, #48	; 0x30
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000318 	.word	0x20000318

080025e8 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4604      	mov	r4, r0
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4623      	mov	r3, r4
 80025f8:	80fb      	strh	r3, [r7, #6]
 80025fa:	4603      	mov	r3, r0
 80025fc:	80bb      	strh	r3, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	807b      	strh	r3, [r7, #2]
 8002602:	4613      	mov	r3, r2
 8002604:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <SetDisplayWindow+0x40>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <SetDisplayWindow+0x40>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69dc      	ldr	r4, [r3, #28]
 8002616:	883b      	ldrh	r3, [r7, #0]
 8002618:	887a      	ldrh	r2, [r7, #2]
 800261a:	88b9      	ldrh	r1, [r7, #4]
 800261c:	88f8      	ldrh	r0, [r7, #6]
 800261e:	47a0      	blx	r4
  }  
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bd90      	pop	{r4, r7, pc}
 8002628:	20000074 	.word	0x20000074

0800262c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <HAL_MspInit+0x4c>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	4a0f      	ldr	r2, [pc, #60]	; (8002678 <HAL_MspInit+0x4c>)
 800263c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002640:	6453      	str	r3, [r2, #68]	; 0x44
 8002642:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <HAL_MspInit+0x4c>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_MspInit+0x4c>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a08      	ldr	r2, [pc, #32]	; (8002678 <HAL_MspInit+0x4c>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_MspInit+0x4c>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800266a:	2007      	movs	r0, #7
 800266c:	f001 ff8b 	bl	8004586 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40023800 	.word	0x40023800

0800267c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <HAL_RTC_MspInit+0x24>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d102      	bne.n	8002694 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_RTC_MspInit+0x28>)
 8002690:	2201      	movs	r2, #1
 8002692:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	40002800 	.word	0x40002800
 80026a4:	42470e3c 	.word	0x42470e3c

080026a8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08c      	sub	sp, #48	; 0x30
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 031c 	add.w	r3, r7, #28
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a37      	ldr	r2, [pc, #220]	; (80027a4 <HAL_SD_MspInit+0xfc>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d168      	bne.n	800279c <HAL_SD_MspInit+0xf4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <HAL_SD_MspInit+0x100>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	4a35      	ldr	r2, [pc, #212]	; (80027a8 <HAL_SD_MspInit+0x100>)
 80026d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026d8:	6453      	str	r3, [r2, #68]	; 0x44
 80026da:	4b33      	ldr	r3, [pc, #204]	; (80027a8 <HAL_SD_MspInit+0x100>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	4b2f      	ldr	r3, [pc, #188]	; (80027a8 <HAL_SD_MspInit+0x100>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a2e      	ldr	r2, [pc, #184]	; (80027a8 <HAL_SD_MspInit+0x100>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <HAL_SD_MspInit+0x100>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <HAL_SD_MspInit+0x100>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a27      	ldr	r2, [pc, #156]	; (80027a8 <HAL_SD_MspInit+0x100>)
 800270c:	f043 0304 	orr.w	r3, r3, #4
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <HAL_SD_MspInit+0x100>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <HAL_SD_MspInit+0x100>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a20      	ldr	r2, [pc, #128]	; (80027a8 <HAL_SD_MspInit+0x100>)
 8002728:	f043 0308 	orr.w	r3, r3, #8
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <HAL_SD_MspInit+0x100>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800273a:	2304      	movs	r3, #4
 800273c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800274a:	230c      	movs	r3, #12
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	4619      	mov	r1, r3
 8002754:	4815      	ldr	r0, [pc, #84]	; (80027ac <HAL_SD_MspInit+0x104>)
 8002756:	f001 ff4b 	bl	80045f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800275a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800275e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002768:	2303      	movs	r3, #3
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800276c:	230c      	movs	r3, #12
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002770:	f107 031c 	add.w	r3, r7, #28
 8002774:	4619      	mov	r1, r3
 8002776:	480e      	ldr	r0, [pc, #56]	; (80027b0 <HAL_SD_MspInit+0x108>)
 8002778:	f001 ff3a 	bl	80045f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800277c:	2304      	movs	r3, #4
 800277e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800278c:	230c      	movs	r3, #12
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002790:	f107 031c 	add.w	r3, r7, #28
 8002794:	4619      	mov	r1, r3
 8002796:	4807      	ldr	r0, [pc, #28]	; (80027b4 <HAL_SD_MspInit+0x10c>)
 8002798:	f001 ff2a 	bl	80045f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800279c:	bf00      	nop
 800279e:	3730      	adds	r7, #48	; 0x30
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40012c00 	.word	0x40012c00
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020400 	.word	0x40020400
 80027b0:	40020800 	.word	0x40020800
 80027b4:	40020c00 	.word	0x40020c00

080027b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08c      	sub	sp, #48	; 0x30
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 031c 	add.w	r3, r7, #28
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a49      	ldr	r2, [pc, #292]	; (80028fc <HAL_SPI_MspInit+0x144>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d12c      	bne.n	8002834 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	4b48      	ldr	r3, [pc, #288]	; (8002900 <HAL_SPI_MspInit+0x148>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	4a47      	ldr	r2, [pc, #284]	; (8002900 <HAL_SPI_MspInit+0x148>)
 80027e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027e8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ea:	4b45      	ldr	r3, [pc, #276]	; (8002900 <HAL_SPI_MspInit+0x148>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	4b41      	ldr	r3, [pc, #260]	; (8002900 <HAL_SPI_MspInit+0x148>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a40      	ldr	r2, [pc, #256]	; (8002900 <HAL_SPI_MspInit+0x148>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b3e      	ldr	r3, [pc, #248]	; (8002900 <HAL_SPI_MspInit+0x148>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002812:	23e0      	movs	r3, #224	; 0xe0
 8002814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281e:	2303      	movs	r3, #3
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002822:	2305      	movs	r3, #5
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002826:	f107 031c 	add.w	r3, r7, #28
 800282a:	4619      	mov	r1, r3
 800282c:	4835      	ldr	r0, [pc, #212]	; (8002904 <HAL_SPI_MspInit+0x14c>)
 800282e:	f001 fedf 	bl	80045f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002832:	e05f      	b.n	80028f4 <HAL_SPI_MspInit+0x13c>
  else if(hspi->Instance==SPI2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a33      	ldr	r2, [pc, #204]	; (8002908 <HAL_SPI_MspInit+0x150>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d15a      	bne.n	80028f4 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <HAL_SPI_MspInit+0x148>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a2e      	ldr	r2, [pc, #184]	; (8002900 <HAL_SPI_MspInit+0x148>)
 8002848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
 800284e:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <HAL_SPI_MspInit+0x148>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b28      	ldr	r3, [pc, #160]	; (8002900 <HAL_SPI_MspInit+0x148>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4a27      	ldr	r2, [pc, #156]	; (8002900 <HAL_SPI_MspInit+0x148>)
 8002864:	f043 0304 	orr.w	r3, r3, #4
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
 800286a:	4b25      	ldr	r3, [pc, #148]	; (8002900 <HAL_SPI_MspInit+0x148>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	4b21      	ldr	r3, [pc, #132]	; (8002900 <HAL_SPI_MspInit+0x148>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a20      	ldr	r2, [pc, #128]	; (8002900 <HAL_SPI_MspInit+0x148>)
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <HAL_SPI_MspInit+0x148>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002892:	2302      	movs	r3, #2
 8002894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289e:	2303      	movs	r3, #3
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80028a2:	2307      	movs	r3, #7
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a6:	f107 031c 	add.w	r3, r7, #28
 80028aa:	4619      	mov	r1, r3
 80028ac:	4817      	ldr	r0, [pc, #92]	; (800290c <HAL_SPI_MspInit+0x154>)
 80028ae:	f001 fe9f 	bl	80045f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028b2:	2304      	movs	r3, #4
 80028b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b6:	2302      	movs	r3, #2
 80028b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028be:	2303      	movs	r3, #3
 80028c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028c2:	2305      	movs	r3, #5
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c6:	f107 031c 	add.w	r3, r7, #28
 80028ca:	4619      	mov	r1, r3
 80028cc:	480f      	ldr	r0, [pc, #60]	; (800290c <HAL_SPI_MspInit+0x154>)
 80028ce:	f001 fe8f 	bl	80045f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e0:	2303      	movs	r3, #3
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028e4:	2305      	movs	r3, #5
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	4619      	mov	r1, r3
 80028ee:	4808      	ldr	r0, [pc, #32]	; (8002910 <HAL_SPI_MspInit+0x158>)
 80028f0:	f001 fe7e 	bl	80045f0 <HAL_GPIO_Init>
}
 80028f4:	bf00      	nop
 80028f6:	3730      	adds	r7, #48	; 0x30
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40013000 	.word	0x40013000
 8002900:	40023800 	.word	0x40023800
 8002904:	40020000 	.word	0x40020000
 8002908:	40003800 	.word	0x40003800
 800290c:	40020800 	.word	0x40020800
 8002910:	40020400 	.word	0x40020400

08002914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a19      	ldr	r2, [pc, #100]	; (8002998 <HAL_UART_MspInit+0x84>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d12b      	bne.n	800298e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	4b18      	ldr	r3, [pc, #96]	; (800299c <HAL_UART_MspInit+0x88>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a17      	ldr	r2, [pc, #92]	; (800299c <HAL_UART_MspInit+0x88>)
 8002940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_UART_MspInit+0x88>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_UART_MspInit+0x88>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	4a10      	ldr	r2, [pc, #64]	; (800299c <HAL_UART_MspInit+0x88>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6313      	str	r3, [r2, #48]	; 0x30
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <HAL_UART_MspInit+0x88>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800296e:	230c      	movs	r3, #12
 8002970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002972:	2302      	movs	r3, #2
 8002974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297a:	2303      	movs	r3, #3
 800297c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800297e:	2307      	movs	r3, #7
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	4619      	mov	r1, r3
 8002988:	4805      	ldr	r0, [pc, #20]	; (80029a0 <HAL_UART_MspInit+0x8c>)
 800298a:	f001 fe31 	bl	80045f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800298e:	bf00      	nop
 8002990:	3728      	adds	r7, #40	; 0x28
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40004400 	.word	0x40004400
 800299c:	40023800 	.word	0x40023800
 80029a0:	40020000 	.word	0x40020000

080029a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08c      	sub	sp, #48	; 0x30
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80029b4:	2200      	movs	r2, #0
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	201e      	movs	r0, #30
 80029ba:	f001 fdef 	bl	800459c <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029be:	201e      	movs	r0, #30
 80029c0:	f001 fe08 	bl	80045d4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <HAL_InitTick+0xa4>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	4a1e      	ldr	r2, [pc, #120]	; (8002a48 <HAL_InitTick+0xa4>)
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	6413      	str	r3, [r2, #64]	; 0x40
 80029d4:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <HAL_InitTick+0xa4>)
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029e0:	f107 0210 	add.w	r2, r7, #16
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f002 f916 	bl	8004c1c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80029f0:	f002 f8ec 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 80029f4:	4603      	mov	r3, r0
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <HAL_InitTick+0xa8>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0c9b      	lsrs	r3, r3, #18
 8002a04:	3b01      	subs	r3, #1
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_InitTick+0xac>)
 8002a0a:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <HAL_InitTick+0xb0>)
 8002a0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <HAL_InitTick+0xac>)
 8002a10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a14:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002a16:	4a0e      	ldr	r2, [pc, #56]	; (8002a50 <HAL_InitTick+0xac>)
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <HAL_InitTick+0xac>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_InitTick+0xac>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002a28:	4809      	ldr	r0, [pc, #36]	; (8002a50 <HAL_InitTick+0xac>)
 8002a2a:	f004 f933 	bl	8006c94 <HAL_TIM_Base_Init>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d104      	bne.n	8002a3e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002a34:	4806      	ldr	r0, [pc, #24]	; (8002a50 <HAL_InitTick+0xac>)
 8002a36:	f004 f962 	bl	8006cfe <HAL_TIM_Base_Start_IT>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	e000      	b.n	8002a40 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3730      	adds	r7, #48	; 0x30
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	431bde83 	.word	0x431bde83
 8002a50:	20000324 	.word	0x20000324
 8002a54:	40000800 	.word	0x40000800

08002a58 <SDTimerHandler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimerHandler(void){
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
	if(Timer1 > 0){
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <SDTimerHandler+0x40>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d006      	beq.n	8002a74 <SDTimerHandler+0x1c>
		Timer1--;
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <SDTimerHandler+0x40>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <SDTimerHandler+0x40>)
 8002a72:	701a      	strb	r2, [r3, #0]
	}

	if(Timer2 > 0){
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <SDTimerHandler+0x44>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <SDTimerHandler+0x34>
		Timer2--;
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <SDTimerHandler+0x44>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <SDTimerHandler+0x44>)
 8002a8a:	701a      	strb	r2, [r3, #0]
	}
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000365 	.word	0x20000365
 8002a9c:	20000364 	.word	0x20000364

08002aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <HardFault_Handler+0x4>

08002ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <MemManage_Handler+0x4>

08002aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002abe:	e7fe      	b.n	8002abe <BusFault_Handler+0x4>

08002ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac4:	e7fe      	b.n	8002ac4 <UsageFault_Handler+0x4>

08002ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <SysTick_Handler+0x2c>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <SysTick_Handler+0x2c>)
 8002b00:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <SysTick_Handler+0x2c>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b09      	cmp	r3, #9
 8002b0a:	d904      	bls.n	8002b16 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <SysTick_Handler+0x2c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
		SDTimerHandler();
 8002b12:	f7ff ffa1 	bl	8002a58 <SDTimerHandler>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200002f8 	.word	0x200002f8

08002b20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <TIM4_IRQHandler+0x10>)
 8002b26:	f004 f90e 	bl	8006d46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000324 	.word	0x20000324

08002b34 <_sbrk>:
		ITM_SendChar(*ptr++);
	return len;
}

void * _sbrk(int32_t incr)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <_sbrk+0x38>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <_sbrk+0x16>
		heap_end = & end;
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <_sbrk+0x38>)
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <_sbrk+0x3c>)
 8002b48:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <_sbrk+0x38>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <_sbrk+0x38>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4413      	add	r3, r2
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <_sbrk+0x38>)
 8002b5a:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	200002fc 	.word	0x200002fc
 8002b70:	20002588 	.word	0x20002588

08002b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <SystemInit+0x28>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <SystemInit+0x28>)
 8002b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <SystemInit+0x28>)
 8002b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <changeDriver>:
    { "Acceleration", 20, 10, 12, 10 },
    { "Skidpad", 11, 3, 55, 50 },
    { "Autocross", 45, 1, 57, 100 }
};

void changeDriver(Driver_Profile driver_profile){
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	463b      	mov	r3, r7
 8002ba8:	e883 0003 	stmia.w	r3, {r0, r1}
	current_driver = driver_profile;
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <changeDriver+0x28>)
 8002bae:	461a      	mov	r2, r3
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002bb6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	200000ec 	.word	0x200000ec

08002bcc <changeEvent>:

void changeEvent(Event_Profile event_profile){
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	463b      	mov	r3, r7
 8002bd4:	e883 0003 	stmia.w	r3, {r0, r1}
	current_event = event_profile;
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <changeEvent+0x28>)
 8002bda:	461a      	mov	r2, r3
 8002bdc:	463b      	mov	r3, r7
 8002bde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002be2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	20000500 	.word	0x20000500

08002bf8 <clearArea>:
char* menus[4] = { "Driver Select", "Event Select", "Car Config", "Advanced" };
bool menu_pot_incremented = false;
bool menu_pot_decremented = false;

/* General UI functions */
void clearArea(uint16_t x, uint16_t y, uint16_t width, uint16_t height){
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4604      	mov	r4, r0
 8002c00:	4608      	mov	r0, r1
 8002c02:	4611      	mov	r1, r2
 8002c04:	461a      	mov	r2, r3
 8002c06:	4623      	mov	r3, r4
 8002c08:	80fb      	strh	r3, [r7, #6]
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	80bb      	strh	r3, [r7, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	807b      	strh	r3, [r7, #2]
 8002c12:	4613      	mov	r3, r2
 8002c14:	803b      	strh	r3, [r7, #0]
    // Save existing color settings
    uint32_t text_color_backup = BSP_LCD_GetTextColor();
 8002c16:	f7ff f8cf 	bl	8001db8 <BSP_LCD_GetTextColor>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	60fb      	str	r3, [r7, #12]
    uint32_t back_color_backup = BSP_LCD_GetBackColor();
 8002c1e:	f7ff f8d7 	bl	8001dd0 <BSP_LCD_GetBackColor>
 8002c22:	4603      	mov	r3, r0
 8002c24:	60bb      	str	r3, [r7, #8]

    /* Draw a rectangle with background color */
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8002c26:	2000      	movs	r0, #0
 8002c28:	f7ff f8ee 	bl	8001e08 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7ff f8db 	bl	8001de8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(x, y, width, height);
 8002c32:	883b      	ldrh	r3, [r7, #0]
 8002c34:	887a      	ldrh	r2, [r7, #2]
 8002c36:	88b9      	ldrh	r1, [r7, #4]
 8002c38:	88f8      	ldrh	r0, [r7, #6]
 8002c3a:	f7ff fbbb 	bl	80023b4 <BSP_LCD_FillRect>

    // Restore existing color settings
    BSP_LCD_SetTextColor(text_color_backup);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff f8d0 	bl	8001de8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(back_color_backup);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff f8db 	bl	8001e08 <BSP_LCD_SetBackColor>
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd90      	pop	{r4, r7, pc}
	...

08002c5c <drawScreen>:
void drawScreen(UI_Screen ui_screen) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7ff f8ee 	bl	8001e48 <BSP_LCD_Clear>
    selected_menu_option = 0; // Reset menu selection
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <drawScreen+0x7c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
    switch (ui_screen) {
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d825      	bhi.n	8002cc4 <drawScreen+0x68>
 8002c78:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <drawScreen+0x24>)
 8002c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7e:	bf00      	nop
 8002c80:	08002c95 	.word	0x08002c95
 8002c84:	08002cc5 	.word	0x08002cc5
 8002c88:	08002ca1 	.word	0x08002ca1
 8002c8c:	08002cad 	.word	0x08002cad
 8002c90:	08002cb9 	.word	0x08002cb9
        case SM_SCREEN:
            drawSMScreen();
 8002c94:	f000 fa62 	bl	800315c <drawSMScreen>
			max_menu_option = 4;
 8002c98:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <drawScreen+0x80>)
 8002c9a:	2204      	movs	r2, #4
 8002c9c:	701a      	strb	r2, [r3, #0]
            break;
 8002c9e:	e017      	b.n	8002cd0 <drawScreen+0x74>
        case DRIVER_SELECTION_SCREEN:
            drawDriverSelectionScreen();
 8002ca0:	f000 fb04 	bl	80032ac <drawDriverSelectionScreen>
			max_menu_option = sizeof(drivers) / sizeof(drivers[0]);
 8002ca4:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <drawScreen+0x80>)
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	701a      	strb	r2, [r3, #0]
            break;
 8002caa:	e011      	b.n	8002cd0 <drawScreen+0x74>
        case EVENT_SELECTION_SCREEN:
            drawEventSelectionScreen();
 8002cac:	f000 fb94 	bl	80033d8 <drawEventSelectionScreen>
			max_menu_option = sizeof(events) / sizeof(events[0]);
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <drawScreen+0x80>)
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	701a      	strb	r2, [r3, #0]
            break;
 8002cb6:	e00b      	b.n	8002cd0 <drawScreen+0x74>
        case CAR_CONFIGURATION_SCREEN:
            drawCarConfigurationScreen();
 8002cb8:	f000 fc1a 	bl	80034f0 <drawCarConfigurationScreen>
			max_menu_option = 4;
 8002cbc:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <drawScreen+0x80>)
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	701a      	strb	r2, [r3, #0]
            break;
 8002cc2:	e005      	b.n	8002cd0 <drawScreen+0x74>
        default:
            drawRTDScreen();
 8002cc4:	f000 f84e 	bl	8002d64 <drawRTDScreen>
			max_menu_option = 0;
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <drawScreen+0x80>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
            break;
 8002cce:	bf00      	nop
    }
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000508 	.word	0x20000508
 8002cdc:	20000509 	.word	0x20000509

08002ce0 <updateMenuScroll>:
void updateMenuScroll() {
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
	if (menu_pot_incremented && selected_menu_option < max_menu_option) {
 8002ce4:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <updateMenuScroll+0x4c>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00c      	beq.n	8002d06 <updateMenuScroll+0x26>
 8002cec:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <updateMenuScroll+0x50>)
 8002cee:	781a      	ldrb	r2, [r3, #0]
 8002cf0:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <updateMenuScroll+0x54>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d206      	bcs.n	8002d06 <updateMenuScroll+0x26>
		selected_menu_option++;
 8002cf8:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <updateMenuScroll+0x50>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <updateMenuScroll+0x50>)
 8002d02:	701a      	strb	r2, [r3, #0]
	}
	else if (menu_pot_decremented && selected_menu_option > 0) {
		selected_menu_option--;
	}
}
 8002d04:	e00d      	b.n	8002d22 <updateMenuScroll+0x42>
	else if (menu_pot_decremented && selected_menu_option > 0) {
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <updateMenuScroll+0x58>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <updateMenuScroll+0x42>
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <updateMenuScroll+0x50>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <updateMenuScroll+0x42>
		selected_menu_option--;
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <updateMenuScroll+0x50>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <updateMenuScroll+0x50>)
 8002d20:	701a      	strb	r2, [r3, #0]
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	20000300 	.word	0x20000300
 8002d30:	20000508 	.word	0x20000508
 8002d34:	20000509 	.word	0x20000509
 8002d38:	20000301 	.word	0x20000301

08002d3c <drawStartupScreen>:

/* UI Pages */
void drawStartupScreen() {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
    BSP_LCD_SetTextColor(primary_back_color);
 8002d40:	201f      	movs	r0, #31
 8002d42:	f7ff f851 	bl	8001de8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font_RobotoMedium24);
 8002d46:	4805      	ldr	r0, [pc, #20]	; (8002d5c <drawStartupScreen+0x20>)
 8002d48:	f7ff f86e 	bl	8001e28 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(screen_margin - 10, 24 + ((31 / 2) - 12), "START SCREEN", CENTER_MODE);
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <drawStartupScreen+0x24>)
 8002d50:	211b      	movs	r1, #27
 8002d52:	2004      	movs	r0, #4
 8002d54:	f7ff f8c0 	bl	8001ed8 <BSP_LCD_DisplayStringAt>
}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000018 	.word	0x20000018
 8002d60:	0800a860 	.word	0x0800a860

08002d64 <drawRTDScreen>:

void drawRTDScreen() {
 8002d64:	b5b0      	push	{r4, r5, r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af00      	add	r7, sp, #0
	// Draw header bar
	drawHeaderBar(READY_TO_DRIVE);
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	f000 fc1a 	bl	80035a4 <drawHeaderBar>

	// Draw accumulator bars
	drawAccumulatorDeltaBar(38);
 8002d70:	2026      	movs	r0, #38	; 0x26
 8002d72:	f000 fc47 	bl	8003604 <drawAccumulatorDeltaBar>
	drawAccumulatorTotalBar(138);
 8002d76:	208a      	movs	r0, #138	; 0x8a
 8002d78:	f000 fdda 	bl	8003930 <drawAccumulatorTotalBar>

	// Draw divider bar
	BSP_LCD_SetTextColor(primary_back_color);
 8002d7c:	201f      	movs	r0, #31
 8002d7e:	f7ff f833 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 240, 320, 5);
 8002d82:	2305      	movs	r3, #5
 8002d84:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d88:	21f0      	movs	r1, #240	; 0xf0
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7ff fb12 	bl	80023b4 <BSP_LCD_FillRect>

	char* reading[5] = { "Accumul (v)", "Accumul (C)", "Gearbox (C)", "Inverter (C)", "Motor   (C)"};
 8002d90:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <drawRTDScreen+0xa0>)
 8002d92:	1d3c      	adds	r4, r7, #4
 8002d94:	461d      	mov	r5, r3
 8002d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d9a:	682b      	ldr	r3, [r5, #0]
 8002d9c:	6023      	str	r3, [r4, #0]
	uint16_t startingXPos = 245;
 8002d9e:	23f5      	movs	r3, #245	; 0xf5
 8002da0:	837b      	strh	r3, [r7, #26]
	drawReading(startingXPos, reading[0], "?", false);
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	8b78      	ldrh	r0, [r7, #26]
 8002da6:	2300      	movs	r3, #0
 8002da8:	4a17      	ldr	r2, [pc, #92]	; (8002e08 <drawRTDScreen+0xa4>)
 8002daa:	f000 fea5 	bl	8003af8 <drawReading>
	for (int i = 1; i < 4; i++) {
 8002dae:	2301      	movs	r3, #1
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	e018      	b.n	8002de6 <drawRTDScreen+0x82>
		drawReading(startingXPos + (reading_line_height * i), reading[i], "?", true);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	0052      	lsls	r2, r2, #1
 8002dbc:	441a      	add	r2, r3
 8002dbe:	0112      	lsls	r2, r2, #4
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	8b7b      	ldrh	r3, [r7, #26]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b298      	uxth	r0, r3
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	f107 0220 	add.w	r2, r7, #32
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 8002dd8:	2301      	movs	r3, #1
 8002dda:	4a0b      	ldr	r2, [pc, #44]	; (8002e08 <drawRTDScreen+0xa4>)
 8002ddc:	f000 fe8c 	bl	8003af8 <drawReading>
	for (int i = 1; i < 4; i++) {
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	3301      	adds	r3, #1
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	dde3      	ble.n	8002db4 <drawRTDScreen+0x50>
	}
	drawReading(startingXPos + (reading_line_height * 4), reading[4], "?", false);
 8002dec:	8b7b      	ldrh	r3, [r7, #26]
 8002dee:	33bc      	adds	r3, #188	; 0xbc
 8002df0:	b298      	uxth	r0, r3
 8002df2:	6979      	ldr	r1, [r7, #20]
 8002df4:	2300      	movs	r3, #0
 8002df6:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <drawRTDScreen+0xa4>)
 8002df8:	f000 fe7e 	bl	8003af8 <drawReading>
}
 8002dfc:	bf00      	nop
 8002dfe:	3720      	adds	r7, #32
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bdb0      	pop	{r4, r5, r7, pc}
 8002e04:	0800a8b4 	.word	0x0800a8b4
 8002e08:	0800a870 	.word	0x0800a870

08002e0c <updateRTDScreen>:
void updateRTDScreen() {
 8002e0c:	b590      	push	{r4, r7, lr}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
    // Update accumulator bars
    updateAccumulatorDeltaBar(38);
 8002e12:	2026      	movs	r0, #38	; 0x26
 8002e14:	f000 fcec 	bl	80037f0 <updateAccumulatorDeltaBar>
    updateAccumulatorTotalBar(138);
 8002e18:	208a      	movs	r0, #138	; 0x8a
 8002e1a:	f000 fdff 	bl	8003a1c <updateAccumulatorTotalBar>

    // Update critical readings
    uint32_t reading_value;
    uint16_t startingYPos = 245;
 8002e1e:	23f5      	movs	r3, #245	; 0xf5
 8002e20:	80fb      	strh	r3, [r7, #6]

    // Accumul. (v)
    clearArea(screen_width - 60, startingYPos + (reading_line_height * 0) + ((reading_line_height / 2) - 12), 90, 24);
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	330b      	adds	r3, #11
 8002e26:	b299      	uxth	r1, r3
 8002e28:	2318      	movs	r3, #24
 8002e2a:	225a      	movs	r2, #90	; 0x5a
 8002e2c:	f44f 7082 	mov.w	r0, #260	; 0x104
 8002e30:	f7ff fee2 	bl	8002bf8 <clearArea>
    sprintf(reading_value, "%.0f", accumul_volts);
 8002e34:	683c      	ldr	r4, [r7, #0]
 8002e36:	4bc2      	ldr	r3, [pc, #776]	; (8003140 <updateRTDScreen+0x334>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd fba4 	bl	8000588 <__aeabi_f2d>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	49bf      	ldr	r1, [pc, #764]	; (8003144 <updateRTDScreen+0x338>)
 8002e46:	4620      	mov	r0, r4
 8002e48:	f006 f986 	bl	8009158 <siprintf>
    if (accumul_volts > 50) {
 8002e4c:	4bbc      	ldr	r3, [pc, #752]	; (8003140 <updateRTDScreen+0x334>)
 8002e4e:	edd3 7a00 	vldr	s15, [r3]
 8002e52:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8003148 <updateRTDScreen+0x33c>
 8002e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5e:	dd07      	ble.n	8002e70 <updateRTDScreen+0x64>
        updateReading(startingYPos + (reading_line_height * 0), reading_value, warning_color);
 8002e60:	6839      	ldr	r1, [r7, #0]
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fe97 	bl	8003b9c <updateReading>
 8002e6e:	e022      	b.n	8002eb6 <updateRTDScreen+0xaa>
    }
    else if (accumul_volts <= 50 && accumul_volts > 30) {
 8002e70:	4bb3      	ldr	r3, [pc, #716]	; (8003140 <updateRTDScreen+0x334>)
 8002e72:	edd3 7a00 	vldr	s15, [r3]
 8002e76:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8003148 <updateRTDScreen+0x33c>
 8002e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e82:	d811      	bhi.n	8002ea8 <updateRTDScreen+0x9c>
 8002e84:	4bae      	ldr	r3, [pc, #696]	; (8003140 <updateRTDScreen+0x334>)
 8002e86:	edd3 7a00 	vldr	s15, [r3]
 8002e8a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e96:	dd07      	ble.n	8002ea8 <updateRTDScreen+0x9c>
        updateReading(startingYPos + (reading_line_height * 0), reading_value, caution_color);
 8002e98:	6839      	ldr	r1, [r7, #0]
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fe7b 	bl	8003b9c <updateReading>
 8002ea6:	e006      	b.n	8002eb6 <updateRTDScreen+0xaa>
    }
    else {
        updateReading(startingYPos + (reading_line_height * 0), reading_value, nominal_color);
 8002ea8:	6839      	ldr	r1, [r7, #0]
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fe73 	bl	8003b9c <updateReading>
    }

    // Accumul. (C)
    clearArea(screen_width - 60, startingYPos + (reading_line_height * 1) + ((reading_line_height / 2) - 12), 90, 24);
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	333a      	adds	r3, #58	; 0x3a
 8002eba:	b299      	uxth	r1, r3
 8002ebc:	2318      	movs	r3, #24
 8002ebe:	225a      	movs	r2, #90	; 0x5a
 8002ec0:	f44f 7082 	mov.w	r0, #260	; 0x104
 8002ec4:	f7ff fe98 	bl	8002bf8 <clearArea>
    sprintf(reading_value, "%.0f", accumul_temp);
 8002ec8:	683c      	ldr	r4, [r7, #0]
 8002eca:	4ba0      	ldr	r3, [pc, #640]	; (800314c <updateRTDScreen+0x340>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd fb5a 	bl	8000588 <__aeabi_f2d>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	499a      	ldr	r1, [pc, #616]	; (8003144 <updateRTDScreen+0x338>)
 8002eda:	4620      	mov	r0, r4
 8002edc:	f006 f93c 	bl	8009158 <siprintf>
    if (accumul_temp > 50) {
 8002ee0:	4b9a      	ldr	r3, [pc, #616]	; (800314c <updateRTDScreen+0x340>)
 8002ee2:	edd3 7a00 	vldr	s15, [r3]
 8002ee6:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8003148 <updateRTDScreen+0x33c>
 8002eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef2:	dd09      	ble.n	8002f08 <updateRTDScreen+0xfc>
		updateReading(startingYPos + (reading_line_height * 1), reading_value, warning_color);
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	332f      	adds	r3, #47	; 0x2f
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	6839      	ldr	r1, [r7, #0]
 8002efc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fe4b 	bl	8003b9c <updateReading>
 8002f06:	e026      	b.n	8002f56 <updateRTDScreen+0x14a>
	}
	else if (accumul_temp <= 50 && accumul_temp > 30) {
 8002f08:	4b90      	ldr	r3, [pc, #576]	; (800314c <updateRTDScreen+0x340>)
 8002f0a:	edd3 7a00 	vldr	s15, [r3]
 8002f0e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8003148 <updateRTDScreen+0x33c>
 8002f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1a:	d813      	bhi.n	8002f44 <updateRTDScreen+0x138>
 8002f1c:	4b8b      	ldr	r3, [pc, #556]	; (800314c <updateRTDScreen+0x340>)
 8002f1e:	edd3 7a00 	vldr	s15, [r3]
 8002f22:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2e:	dd09      	ble.n	8002f44 <updateRTDScreen+0x138>
		updateReading(startingYPos + (reading_line_height * 1), reading_value, caution_color);
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	332f      	adds	r3, #47	; 0x2f
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	6839      	ldr	r1, [r7, #0]
 8002f38:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fe2d 	bl	8003b9c <updateReading>
 8002f42:	e008      	b.n	8002f56 <updateRTDScreen+0x14a>
	}
	else {
		updateReading(startingYPos + (reading_line_height * 1), reading_value, nominal_color);
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	332f      	adds	r3, #47	; 0x2f
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	6839      	ldr	r1, [r7, #0]
 8002f4c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fe23 	bl	8003b9c <updateReading>
	}

    // Gearbox  (C)
    clearArea(screen_width - 60, startingYPos + (reading_line_height * 2) + ((reading_line_height / 2) - 12), 90, 24);
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	3369      	adds	r3, #105	; 0x69
 8002f5a:	b299      	uxth	r1, r3
 8002f5c:	2318      	movs	r3, #24
 8002f5e:	225a      	movs	r2, #90	; 0x5a
 8002f60:	f44f 7082 	mov.w	r0, #260	; 0x104
 8002f64:	f7ff fe48 	bl	8002bf8 <clearArea>
	sprintf(reading_value, "%.0f", gearbox_temp);
 8002f68:	683c      	ldr	r4, [r7, #0]
 8002f6a:	4b79      	ldr	r3, [pc, #484]	; (8003150 <updateRTDScreen+0x344>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd fb0a 	bl	8000588 <__aeabi_f2d>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4972      	ldr	r1, [pc, #456]	; (8003144 <updateRTDScreen+0x338>)
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	f006 f8ec 	bl	8009158 <siprintf>
	if (gearbox_temp > 50) {
 8002f80:	4b73      	ldr	r3, [pc, #460]	; (8003150 <updateRTDScreen+0x344>)
 8002f82:	edd3 7a00 	vldr	s15, [r3]
 8002f86:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003148 <updateRTDScreen+0x33c>
 8002f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f92:	dd09      	ble.n	8002fa8 <updateRTDScreen+0x19c>
		updateReading(startingYPos + (reading_line_height * 2), reading_value, warning_color);
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	335e      	adds	r3, #94	; 0x5e
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	6839      	ldr	r1, [r7, #0]
 8002f9c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fdfb 	bl	8003b9c <updateReading>
 8002fa6:	e026      	b.n	8002ff6 <updateRTDScreen+0x1ea>
	}
	else if (gearbox_temp <= 50 && gearbox_temp > 30) {
 8002fa8:	4b69      	ldr	r3, [pc, #420]	; (8003150 <updateRTDScreen+0x344>)
 8002faa:	edd3 7a00 	vldr	s15, [r3]
 8002fae:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8003148 <updateRTDScreen+0x33c>
 8002fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fba:	d813      	bhi.n	8002fe4 <updateRTDScreen+0x1d8>
 8002fbc:	4b64      	ldr	r3, [pc, #400]	; (8003150 <updateRTDScreen+0x344>)
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fce:	dd09      	ble.n	8002fe4 <updateRTDScreen+0x1d8>
		updateReading(startingYPos + (reading_line_height * 2), reading_value, caution_color);
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	335e      	adds	r3, #94	; 0x5e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	6839      	ldr	r1, [r7, #0]
 8002fd8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fddd 	bl	8003b9c <updateReading>
 8002fe2:	e008      	b.n	8002ff6 <updateRTDScreen+0x1ea>
	}
	else {
		updateReading(startingYPos + (reading_line_height * 2), reading_value, nominal_color);
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	335e      	adds	r3, #94	; 0x5e
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	6839      	ldr	r1, [r7, #0]
 8002fec:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fdd3 	bl	8003b9c <updateReading>
	}

    // Inverter (C)
	clearArea(screen_width - 60, startingYPos + (reading_line_height * 3) + ((reading_line_height / 2) - 12), 90, 24);
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	3398      	adds	r3, #152	; 0x98
 8002ffa:	b299      	uxth	r1, r3
 8002ffc:	2318      	movs	r3, #24
 8002ffe:	225a      	movs	r2, #90	; 0x5a
 8003000:	f44f 7082 	mov.w	r0, #260	; 0x104
 8003004:	f7ff fdf8 	bl	8002bf8 <clearArea>
	sprintf(reading_value, "%.0f", inverter_temp);
 8003008:	683c      	ldr	r4, [r7, #0]
 800300a:	4b52      	ldr	r3, [pc, #328]	; (8003154 <updateRTDScreen+0x348>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd faba 	bl	8000588 <__aeabi_f2d>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	494a      	ldr	r1, [pc, #296]	; (8003144 <updateRTDScreen+0x338>)
 800301a:	4620      	mov	r0, r4
 800301c:	f006 f89c 	bl	8009158 <siprintf>
	if (inverter_temp > 50) {
 8003020:	4b4c      	ldr	r3, [pc, #304]	; (8003154 <updateRTDScreen+0x348>)
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003148 <updateRTDScreen+0x33c>
 800302a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800302e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003032:	dd09      	ble.n	8003048 <updateRTDScreen+0x23c>
		updateReading(startingYPos + (reading_line_height * 3), reading_value, warning_color);
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	338d      	adds	r3, #141	; 0x8d
 8003038:	b29b      	uxth	r3, r3
 800303a:	6839      	ldr	r1, [r7, #0]
 800303c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003040:	4618      	mov	r0, r3
 8003042:	f000 fdab 	bl	8003b9c <updateReading>
 8003046:	e026      	b.n	8003096 <updateRTDScreen+0x28a>
	}
	else if (inverter_temp <= 50 && inverter_temp > 30) {
 8003048:	4b42      	ldr	r3, [pc, #264]	; (8003154 <updateRTDScreen+0x348>)
 800304a:	edd3 7a00 	vldr	s15, [r3]
 800304e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003148 <updateRTDScreen+0x33c>
 8003052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305a:	d813      	bhi.n	8003084 <updateRTDScreen+0x278>
 800305c:	4b3d      	ldr	r3, [pc, #244]	; (8003154 <updateRTDScreen+0x348>)
 800305e:	edd3 7a00 	vldr	s15, [r3]
 8003062:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800306a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306e:	dd09      	ble.n	8003084 <updateRTDScreen+0x278>
		updateReading(startingYPos + (reading_line_height * 3), reading_value, caution_color);
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	338d      	adds	r3, #141	; 0x8d
 8003074:	b29b      	uxth	r3, r3
 8003076:	6839      	ldr	r1, [r7, #0]
 8003078:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fd8d 	bl	8003b9c <updateReading>
 8003082:	e008      	b.n	8003096 <updateRTDScreen+0x28a>
	}
	else {
		updateReading(startingYPos + (reading_line_height * 3), reading_value, nominal_color);
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	338d      	adds	r3, #141	; 0x8d
 8003088:	b29b      	uxth	r3, r3
 800308a:	6839      	ldr	r1, [r7, #0]
 800308c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fd83 	bl	8003b9c <updateReading>
	}

    // Motor    (C)
	clearArea(screen_width - 60, startingYPos + (reading_line_height * 4) + ((reading_line_height / 2) - 12), 90, 24);
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	33c7      	adds	r3, #199	; 0xc7
 800309a:	b299      	uxth	r1, r3
 800309c:	2318      	movs	r3, #24
 800309e:	225a      	movs	r2, #90	; 0x5a
 80030a0:	f44f 7082 	mov.w	r0, #260	; 0x104
 80030a4:	f7ff fda8 	bl	8002bf8 <clearArea>
	sprintf(reading_value, "%.0f", motor_temp);
 80030a8:	683c      	ldr	r4, [r7, #0]
 80030aa:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <updateRTDScreen+0x34c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fa6a 	bl	8000588 <__aeabi_f2d>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4922      	ldr	r1, [pc, #136]	; (8003144 <updateRTDScreen+0x338>)
 80030ba:	4620      	mov	r0, r4
 80030bc:	f006 f84c 	bl	8009158 <siprintf>
	if (inverter_temp > 50) {
 80030c0:	4b24      	ldr	r3, [pc, #144]	; (8003154 <updateRTDScreen+0x348>)
 80030c2:	edd3 7a00 	vldr	s15, [r3]
 80030c6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003148 <updateRTDScreen+0x33c>
 80030ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d2:	dd09      	ble.n	80030e8 <updateRTDScreen+0x2dc>
		updateReading(startingYPos + (reading_line_height * 4), reading_value, warning_color);
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	33bc      	adds	r3, #188	; 0xbc
 80030d8:	b29b      	uxth	r3, r3
 80030da:	6839      	ldr	r1, [r7, #0]
 80030dc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fd5b 	bl	8003b9c <updateReading>
	}
	else {
		updateReading(startingYPos + (reading_line_height * 4), reading_value, nominal_color);
	}

}
 80030e6:	e026      	b.n	8003136 <updateRTDScreen+0x32a>
	else if (motor_temp <= 50 && motor_temp > 30) {
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <updateRTDScreen+0x34c>)
 80030ea:	edd3 7a00 	vldr	s15, [r3]
 80030ee:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003148 <updateRTDScreen+0x33c>
 80030f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fa:	d813      	bhi.n	8003124 <updateRTDScreen+0x318>
 80030fc:	4b16      	ldr	r3, [pc, #88]	; (8003158 <updateRTDScreen+0x34c>)
 80030fe:	edd3 7a00 	vldr	s15, [r3]
 8003102:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310e:	dd09      	ble.n	8003124 <updateRTDScreen+0x318>
		updateReading(startingYPos + (reading_line_height * 4), reading_value, caution_color);
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	33bc      	adds	r3, #188	; 0xbc
 8003114:	b29b      	uxth	r3, r3
 8003116:	6839      	ldr	r1, [r7, #0]
 8003118:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fd3d 	bl	8003b9c <updateReading>
}
 8003122:	e008      	b.n	8003136 <updateRTDScreen+0x32a>
		updateReading(startingYPos + (reading_line_height * 4), reading_value, nominal_color);
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	33bc      	adds	r3, #188	; 0xbc
 8003128:	b29b      	uxth	r3, r3
 800312a:	6839      	ldr	r1, [r7, #0]
 800312c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fd33 	bl	8003b9c <updateReading>
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bd90      	pop	{r4, r7, pc}
 800313e:	bf00      	nop
 8003140:	200000d0 	.word	0x200000d0
 8003144:	0800a8c8 	.word	0x0800a8c8
 8003148:	42480000 	.word	0x42480000
 800314c:	200000d4 	.word	0x200000d4
 8003150:	200000d8 	.word	0x200000d8
 8003154:	200000dc 	.word	0x200000dc
 8003158:	200000e0 	.word	0x200000e0

0800315c <drawSMScreen>:

void drawSMScreen() {
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
	// Draw header bar
	drawHeaderBar(STATIC_MODE);
 8003162:	2000      	movs	r0, #0
 8003164:	f000 fa1e 	bl	80035a4 <drawHeaderBar>

	// Draw accumulator bars
	drawAccumulatorDeltaBar(38);
 8003168:	2026      	movs	r0, #38	; 0x26
 800316a:	f000 fa4b 	bl	8003604 <drawAccumulatorDeltaBar>
	drawAccumulatorTotalBar(138);
 800316e:	208a      	movs	r0, #138	; 0x8a
 8003170:	f000 fbde 	bl	8003930 <drawAccumulatorTotalBar>

	// Draw divider bar
	BSP_LCD_SetTextColor(primary_back_color);
 8003174:	201f      	movs	r0, #31
 8003176:	f7fe fe37 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 240, screen_width, 5);
 800317a:	2305      	movs	r3, #5
 800317c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003180:	21f0      	movs	r1, #240	; 0xf0
 8003182:	2000      	movs	r0, #0
 8003184:	f7ff f916 	bl	80023b4 <BSP_LCD_FillRect>

	// Draw configuration options
	uint16_t startingXPos = 245;
 8003188:	23f5      	movs	r3, #245	; 0xf5
 800318a:	807b      	strh	r3, [r7, #2]
	drawMenuItem(startingXPos, menus[0], false);
 800318c:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <drawSMScreen+0x94>)
 800318e:	6819      	ldr	r1, [r3, #0]
 8003190:	887b      	ldrh	r3, [r7, #2]
 8003192:	2200      	movs	r2, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fd21 	bl	8003bdc <drawMenuItem>
	for (int i = 1; i < 3; i++) {
 800319a:	2301      	movs	r3, #1
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	e016      	b.n	80031ce <drawSMScreen+0x72>
		drawMenuItem(startingXPos + (menu_line_height * i), menus[i], true);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	00d2      	lsls	r2, r2, #3
 80031a8:	1ad2      	subs	r2, r2, r3
 80031aa:	0092      	lsls	r2, r2, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	887b      	ldrh	r3, [r7, #2]
 80031b4:	4413      	add	r3, r2
 80031b6:	b298      	uxth	r0, r3
 80031b8:	4a0d      	ldr	r2, [pc, #52]	; (80031f0 <drawSMScreen+0x94>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c0:	2201      	movs	r2, #1
 80031c2:	4619      	mov	r1, r3
 80031c4:	f000 fd0a 	bl	8003bdc <drawMenuItem>
	for (int i = 1; i < 3; i++) {
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3301      	adds	r3, #1
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	dde5      	ble.n	80031a0 <drawSMScreen+0x44>
	}
	drawMenuItem(startingXPos + (menu_line_height * 3), menus[3], false);
 80031d4:	887b      	ldrh	r3, [r7, #2]
 80031d6:	33ae      	adds	r3, #174	; 0xae
 80031d8:	b298      	uxth	r0, r3
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <drawSMScreen+0x94>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	4619      	mov	r1, r3
 80031e2:	f000 fcfb 	bl	8003bdc <drawMenuItem>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	200000bc 	.word	0x200000bc

080031f4 <updateSMScreen>:
void updateSMScreen() {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
    // Update accumulator bar
    updateAccumulatorTotalBar(138);
 80031fa:	208a      	movs	r0, #138	; 0x8a
 80031fc:	f000 fc0e 	bl	8003a1c <updateAccumulatorTotalBar>

    // Draw configuration options
    uint16_t startingXPos = 245;
 8003200:	23f5      	movs	r3, #245	; 0xf5
 8003202:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < 4; i++) {
 8003204:	2300      	movs	r3, #0
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	e045      	b.n	8003296 <updateSMScreen+0xa2>
        if (i == selected_menu_option) {
 800320a:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <updateSMScreen+0xb0>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4293      	cmp	r3, r2
 8003214:	d128      	bne.n	8003268 <updateSMScreen+0x74>
            clearArea(0, startingXPos + (menu_line_height * i) + ((menu_line_height / 2) - 12), screen_width, 24);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	b29b      	uxth	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	00d2      	lsls	r2, r2, #3
 800321e:	1ad2      	subs	r2, r2, r3
 8003220:	0092      	lsls	r2, r2, #2
 8003222:	4413      	add	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	887b      	ldrh	r3, [r7, #2]
 800322a:	4413      	add	r3, r2
 800322c:	b29b      	uxth	r3, r3
 800322e:	3311      	adds	r3, #17
 8003230:	b299      	uxth	r1, r3
 8003232:	2318      	movs	r3, #24
 8003234:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003238:	2000      	movs	r0, #0
 800323a:	f7ff fcdd 	bl	8002bf8 <clearArea>
            updateMenuItem(startingXPos + (menu_line_height * i), menus[i], true); // Highlight selected item
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	b29b      	uxth	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	00d2      	lsls	r2, r2, #3
 8003246:	1ad2      	subs	r2, r2, r3
 8003248:	0092      	lsls	r2, r2, #2
 800324a:	4413      	add	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	4413      	add	r3, r2
 8003254:	b298      	uxth	r0, r3
 8003256:	4a14      	ldr	r2, [pc, #80]	; (80032a8 <updateSMScreen+0xb4>)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325e:	2201      	movs	r2, #1
 8003260:	4619      	mov	r1, r3
 8003262:	f000 fcf1 	bl	8003c48 <updateMenuItem>
 8003266:	e013      	b.n	8003290 <updateSMScreen+0x9c>
        }
        else updateMenuItem(startingXPos + (menu_line_height * i), menus[i], false);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	b29b      	uxth	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	00d2      	lsls	r2, r2, #3
 8003270:	1ad2      	subs	r2, r2, r3
 8003272:	0092      	lsls	r2, r2, #2
 8003274:	4413      	add	r3, r2
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	887b      	ldrh	r3, [r7, #2]
 800327c:	4413      	add	r3, r2
 800327e:	b298      	uxth	r0, r3
 8003280:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <updateSMScreen+0xb4>)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003288:	2200      	movs	r2, #0
 800328a:	4619      	mov	r1, r3
 800328c:	f000 fcdc 	bl	8003c48 <updateMenuItem>
    for (int i = 0; i < 4; i++) {
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3301      	adds	r3, #1
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b03      	cmp	r3, #3
 800329a:	ddb6      	ble.n	800320a <updateSMScreen+0x16>
    }
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20000508 	.word	0x20000508
 80032a8:	200000bc 	.word	0x200000bc

080032ac <drawDriverSelectionScreen>:

void drawDriverSelectionScreen() {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
	// Draw header bar
	drawHeaderBar(STATIC_MODE);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f000 f976 	bl	80035a4 <drawHeaderBar>
	BSP_LCD_SetTextColor(primary_back_color);
 80032b8:	201f      	movs	r0, #31
 80032ba:	f7fe fd95 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 27, screen_width, 27);
 80032be:	231b      	movs	r3, #27
 80032c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032c4:	211b      	movs	r1, #27
 80032c6:	2000      	movs	r0, #0
 80032c8:	f7ff f874 	bl	80023b4 <BSP_LCD_FillRect>

	// Draw page label
	BSP_LCD_SetBackColor(primary_back_color);
 80032cc:	201f      	movs	r0, #31
 80032ce:	f7fe fd9b 	bl	8001e08 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(primary_text_color);
 80032d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032d6:	f7fe fd87 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font_RobotoMedium24);
 80032da:	481a      	ldr	r0, [pc, #104]	; (8003344 <drawDriverSelectionScreen+0x98>)
 80032dc:	f7fe fda4 	bl	8001e28 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 24 + ((31 / 2) - 12), "Driver Select", CENTER_MODE);
 80032e0:	2301      	movs	r3, #1
 80032e2:	4a19      	ldr	r2, [pc, #100]	; (8003348 <drawDriverSelectionScreen+0x9c>)
 80032e4:	211b      	movs	r1, #27
 80032e6:	2000      	movs	r0, #0
 80032e8:	f7fe fdf6 	bl	8001ed8 <BSP_LCD_DisplayStringAt>

	// Draw settings
	uint8_t startingYPosition = 54;
 80032ec:	2336      	movs	r3, #54	; 0x36
 80032ee:	70fb      	strb	r3, [r7, #3]
	drawMenuItem(startingYPosition, drivers[0].driver_name, false);
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	b298      	uxth	r0, r3
 80032f4:	4b15      	ldr	r3, [pc, #84]	; (800334c <drawDriverSelectionScreen+0xa0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2200      	movs	r2, #0
 80032fa:	4619      	mov	r1, r3
 80032fc:	f000 fc6e 	bl	8003bdc <drawMenuItem>
	for (int i = 1; i < 4; i++) {
 8003300:	2301      	movs	r3, #1
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	e017      	b.n	8003336 <drawDriverSelectionScreen+0x8a>
		drawMenuItem(startingYPosition + (menu_line_height * i), drivers[i].driver_name, true);
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	b29a      	uxth	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	b29b      	uxth	r3, r3
 800330e:	4619      	mov	r1, r3
 8003310:	00c9      	lsls	r1, r1, #3
 8003312:	1ac9      	subs	r1, r1, r3
 8003314:	0089      	lsls	r1, r1, #2
 8003316:	440b      	add	r3, r1
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	b29b      	uxth	r3, r3
 800331c:	4413      	add	r3, r2
 800331e:	b298      	uxth	r0, r3
 8003320:	4a0a      	ldr	r2, [pc, #40]	; (800334c <drawDriverSelectionScreen+0xa0>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003328:	2201      	movs	r2, #1
 800332a:	4619      	mov	r1, r3
 800332c:	f000 fc56 	bl	8003bdc <drawMenuItem>
	for (int i = 1; i < 4; i++) {
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3301      	adds	r3, #1
 8003334:	607b      	str	r3, [r7, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b03      	cmp	r3, #3
 800333a:	dde4      	ble.n	8003306 <drawDriverSelectionScreen+0x5a>
	}
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20000018 	.word	0x20000018
 8003348:	0800a828 	.word	0x0800a828
 800334c:	2000007c 	.word	0x2000007c

08003350 <updateDriverSelectionScreen>:
void updateDriverSelectionScreen(){
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
	uint8_t startingYPosition = 54;
 8003356:	2336      	movs	r3, #54	; 0x36
 8003358:	70fb      	strb	r3, [r7, #3]

    // Draw settings
    for (int i = 0; i < 4; i++) {
 800335a:	2300      	movs	r3, #0
 800335c:	607b      	str	r3, [r7, #4]
 800335e:	e017      	b.n	8003390 <updateDriverSelectionScreen+0x40>
        updateMenuItem(startingYPosition + (menu_line_height * i), drivers[i].driver_name, false);
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	b29a      	uxth	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	b29b      	uxth	r3, r3
 8003368:	4619      	mov	r1, r3
 800336a:	00c9      	lsls	r1, r1, #3
 800336c:	1ac9      	subs	r1, r1, r3
 800336e:	0089      	lsls	r1, r1, #2
 8003370:	440b      	add	r3, r1
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	b29b      	uxth	r3, r3
 8003376:	4413      	add	r3, r2
 8003378:	b298      	uxth	r0, r3
 800337a:	4a15      	ldr	r2, [pc, #84]	; (80033d0 <updateDriverSelectionScreen+0x80>)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003382:	2200      	movs	r2, #0
 8003384:	4619      	mov	r1, r3
 8003386:	f000 fc5f 	bl	8003c48 <updateMenuItem>
    for (int i = 0; i < 4; i++) {
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3301      	adds	r3, #1
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b03      	cmp	r3, #3
 8003394:	dde4      	ble.n	8003360 <updateDriverSelectionScreen+0x10>
    }

    // Redraw selected item
    updateMenuItem(startingYPosition + (menu_line_height * selected_menu_option), drivers[selected_menu_option].driver_name, true);
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	b29a      	uxth	r2, r3
 800339a:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <updateDriverSelectionScreen+0x84>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	4619      	mov	r1, r3
 80033a2:	00c9      	lsls	r1, r1, #3
 80033a4:	1ac9      	subs	r1, r1, r3
 80033a6:	0089      	lsls	r1, r1, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	b298      	uxth	r0, r3
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <updateDriverSelectionScreen+0x84>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <updateDriverSelectionScreen+0x80>)
 80033ba:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80033be:	2201      	movs	r2, #1
 80033c0:	4619      	mov	r1, r3
 80033c2:	f000 fc41 	bl	8003c48 <updateMenuItem>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	2000007c 	.word	0x2000007c
 80033d4:	20000508 	.word	0x20000508

080033d8 <drawEventSelectionScreen>:

void drawEventSelectionScreen() {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
	// Draw header bar
	drawHeaderBar(STATIC_MODE);
 80033de:	2000      	movs	r0, #0
 80033e0:	f000 f8e0 	bl	80035a4 <drawHeaderBar>
	BSP_LCD_SetTextColor(primary_back_color);
 80033e4:	201f      	movs	r0, #31
 80033e6:	f7fe fcff 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 24, screen_width, 31);
 80033ea:	231f      	movs	r3, #31
 80033ec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80033f0:	2118      	movs	r1, #24
 80033f2:	2000      	movs	r0, #0
 80033f4:	f7fe ffde 	bl	80023b4 <BSP_LCD_FillRect>

	// Draw page label
	BSP_LCD_SetBackColor(primary_back_color);
 80033f8:	201f      	movs	r0, #31
 80033fa:	f7fe fd05 	bl	8001e08 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(primary_text_color);
 80033fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003402:	f7fe fcf1 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font_RobotoMedium24);
 8003406:	4818      	ldr	r0, [pc, #96]	; (8003468 <drawEventSelectionScreen+0x90>)
 8003408:	f7fe fd0e 	bl	8001e28 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(screen_margin - 10, 24 + ((31 / 2) - 12), "Event Select", CENTER_MODE);
 800340c:	2301      	movs	r3, #1
 800340e:	4a17      	ldr	r2, [pc, #92]	; (800346c <drawEventSelectionScreen+0x94>)
 8003410:	211b      	movs	r1, #27
 8003412:	2004      	movs	r0, #4
 8003414:	f7fe fd60 	bl	8001ed8 <BSP_LCD_DisplayStringAt>

	// Draw settings
	drawMenuItem(55, events[0].event_name, false);
 8003418:	4b15      	ldr	r3, [pc, #84]	; (8003470 <drawEventSelectionScreen+0x98>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2200      	movs	r2, #0
 800341e:	4619      	mov	r1, r3
 8003420:	2037      	movs	r0, #55	; 0x37
 8003422:	f000 fbdb 	bl	8003bdc <drawMenuItem>
	for (int i = 1; i < 4; i++) {
 8003426:	2301      	movs	r3, #1
 8003428:	607b      	str	r3, [r7, #4]
 800342a:	e015      	b.n	8003458 <drawEventSelectionScreen+0x80>
		drawMenuItem(55 + (menu_line_height * i), events[i].event_name, true);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	b29b      	uxth	r3, r3
 8003430:	461a      	mov	r2, r3
 8003432:	00d2      	lsls	r2, r2, #3
 8003434:	1ad2      	subs	r2, r2, r3
 8003436:	0092      	lsls	r2, r2, #2
 8003438:	4413      	add	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	b29b      	uxth	r3, r3
 800343e:	3337      	adds	r3, #55	; 0x37
 8003440:	b298      	uxth	r0, r3
 8003442:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <drawEventSelectionScreen+0x98>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800344a:	2201      	movs	r2, #1
 800344c:	4619      	mov	r1, r3
 800344e:	f000 fbc5 	bl	8003bdc <drawMenuItem>
	for (int i = 1; i < 4; i++) {
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3301      	adds	r3, #1
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b03      	cmp	r3, #3
 800345c:	dde6      	ble.n	800342c <drawEventSelectionScreen+0x54>
	}
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000018 	.word	0x20000018
 800346c:	0800a838 	.word	0x0800a838
 8003470:	2000009c 	.word	0x2000009c

08003474 <updateEventSelectionScreen>:
void updateEventSelectionScreen() {
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
    // Draw settings
    for (int i = 0; i < 4; i++) {
 800347a:	2300      	movs	r3, #0
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	e015      	b.n	80034ac <updateEventSelectionScreen+0x38>
        updateMenuItem(55 + (menu_line_height * i), events[i].event_name, false);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	b29b      	uxth	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	00d2      	lsls	r2, r2, #3
 8003488:	1ad2      	subs	r2, r2, r3
 800348a:	0092      	lsls	r2, r2, #2
 800348c:	4413      	add	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	b29b      	uxth	r3, r3
 8003492:	3337      	adds	r3, #55	; 0x37
 8003494:	b298      	uxth	r0, r3
 8003496:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <updateEventSelectionScreen+0x74>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800349e:	2200      	movs	r2, #0
 80034a0:	4619      	mov	r1, r3
 80034a2:	f000 fbd1 	bl	8003c48 <updateMenuItem>
    for (int i = 0; i < 4; i++) {
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3301      	adds	r3, #1
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	dde6      	ble.n	8003480 <updateEventSelectionScreen+0xc>
    }

    // Redraw selected item
    updateMenuItem(55 + (menu_line_height * selected_menu_option), events[selected_menu_option].event_name, true);
 80034b2:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <updateEventSelectionScreen+0x78>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	00d2      	lsls	r2, r2, #3
 80034bc:	1ad2      	subs	r2, r2, r3
 80034be:	0092      	lsls	r2, r2, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3337      	adds	r3, #55	; 0x37
 80034c8:	b298      	uxth	r0, r3
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <updateEventSelectionScreen+0x78>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <updateEventSelectionScreen+0x74>)
 80034d2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80034d6:	2201      	movs	r2, #1
 80034d8:	4619      	mov	r1, r3
 80034da:	f000 fbb5 	bl	8003c48 <updateMenuItem>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	2000009c 	.word	0x2000009c
 80034ec:	20000508 	.word	0x20000508

080034f0 <drawCarConfigurationScreen>:

void drawCarConfigurationScreen() {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
	// Draw header bar
	drawHeaderBar(STATIC_MODE);
 80034f6:	2000      	movs	r0, #0
 80034f8:	f000 f854 	bl	80035a4 <drawHeaderBar>
	BSP_LCD_SetTextColor(primary_back_color);
 80034fc:	201f      	movs	r0, #31
 80034fe:	f7fe fc73 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 27, screen_width, 27);
 8003502:	231b      	movs	r3, #27
 8003504:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003508:	211b      	movs	r1, #27
 800350a:	2000      	movs	r0, #0
 800350c:	f7fe ff52 	bl	80023b4 <BSP_LCD_FillRect>

	// Draw page label
	BSP_LCD_SetBackColor(primary_back_color);
 8003510:	201f      	movs	r0, #31
 8003512:	f7fe fc79 	bl	8001e08 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(primary_text_color);
 8003516:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800351a:	f7fe fc65 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font_RobotoMedium24);
 800351e:	481a      	ldr	r0, [pc, #104]	; (8003588 <drawCarConfigurationScreen+0x98>)
 8003520:	f7fe fc82 	bl	8001e28 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(screen_margin - 10, 24 + ((31 / 2) - 12), "Car Config", CENTER_MODE);
 8003524:	2301      	movs	r3, #1
 8003526:	4a19      	ldr	r2, [pc, #100]	; (800358c <drawCarConfigurationScreen+0x9c>)
 8003528:	211b      	movs	r1, #27
 800352a:	2004      	movs	r0, #4
 800352c:	f7fe fcd4 	bl	8001ed8 <BSP_LCD_DisplayStringAt>

	// Draw settings
	uint8_t startingYPos = 54;
 8003530:	2336      	movs	r3, #54	; 0x36
 8003532:	71fb      	strb	r3, [r7, #7]
	drawMenuItemWithValue(startingYPos + (menu_line_height * 0), "Reg Braking", current_driver.car_configuration.regen_braking, false);
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	b298      	uxth	r0, r3
 8003538:	4b15      	ldr	r3, [pc, #84]	; (8003590 <drawCarConfigurationScreen+0xa0>)
 800353a:	791a      	ldrb	r2, [r3, #4]
 800353c:	2300      	movs	r3, #0
 800353e:	4915      	ldr	r1, [pc, #84]	; (8003594 <drawCarConfigurationScreen+0xa4>)
 8003540:	f000 fbaa 	bl	8003c98 <drawMenuItemWithValue>
    drawMenuItemWithValue(startingYPos + (menu_line_height * 1), "Torq Vector", current_driver.car_configuration.torque_vectoring, true);
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	b29b      	uxth	r3, r3
 8003548:	333a      	adds	r3, #58	; 0x3a
 800354a:	b298      	uxth	r0, r3
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <drawCarConfigurationScreen+0xa0>)
 800354e:	795a      	ldrb	r2, [r3, #5]
 8003550:	2301      	movs	r3, #1
 8003552:	4911      	ldr	r1, [pc, #68]	; (8003598 <drawCarConfigurationScreen+0xa8>)
 8003554:	f000 fba0 	bl	8003c98 <drawMenuItemWithValue>
    drawMenuItemWithValue(startingYPos + (menu_line_height * 2), "Dash Bright", current_driver.car_configuration.dash_led_brightness, true);
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	b29b      	uxth	r3, r3
 800355c:	3374      	adds	r3, #116	; 0x74
 800355e:	b298      	uxth	r0, r3
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <drawCarConfigurationScreen+0xa0>)
 8003562:	799a      	ldrb	r2, [r3, #6]
 8003564:	2301      	movs	r3, #1
 8003566:	490d      	ldr	r1, [pc, #52]	; (800359c <drawCarConfigurationScreen+0xac>)
 8003568:	f000 fb96 	bl	8003c98 <drawMenuItemWithValue>
    drawMenuItemWithValue(startingYPos + (menu_line_height * 3), "Scrn Bright", current_driver.car_configuration.screen_brightness, true);
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	b29b      	uxth	r3, r3
 8003570:	33ae      	adds	r3, #174	; 0xae
 8003572:	b298      	uxth	r0, r3
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <drawCarConfigurationScreen+0xa0>)
 8003576:	79da      	ldrb	r2, [r3, #7]
 8003578:	2301      	movs	r3, #1
 800357a:	4909      	ldr	r1, [pc, #36]	; (80035a0 <drawCarConfigurationScreen+0xb0>)
 800357c:	f000 fb8c 	bl	8003c98 <drawMenuItemWithValue>
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	20000018 	.word	0x20000018
 800358c:	0800a848 	.word	0x0800a848
 8003590:	200000ec 	.word	0x200000ec
 8003594:	0800a8d0 	.word	0x0800a8d0
 8003598:	0800a8dc 	.word	0x0800a8dc
 800359c:	0800a8e8 	.word	0x0800a8e8
 80035a0:	0800a8f4 	.word	0x0800a8f4

080035a4 <drawHeaderBar>:
    updateMenuItemWithValue(startingYPos + (menu_line_height * 2), "Dash Bright", current_driver.car_configuration.dash_led_brightness, false);
    updateMenuItemWithValue(startingYPos + (menu_line_height * 3), "Scrn Bright", current_driver.car_configuration.screen_brightness, false);
}

/* UI Components */
void drawHeaderBar(Drive_Mode drive_mode){
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
	// Draw background bar
	BSP_LCD_SetBackColor(primary_back_color);
 80035ae:	201f      	movs	r0, #31
 80035b0:	f7fe fc2a 	bl	8001e08 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(primary_back_color);
 80035b4:	201f      	movs	r0, #31
 80035b6:	f7fe fc17 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, screen_width, 27);
 80035ba:	231b      	movs	r3, #27
 80035bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80035c0:	2100      	movs	r1, #0
 80035c2:	2000      	movs	r0, #0
 80035c4:	f7fe fef6 	bl	80023b4 <BSP_LCD_FillRect>

	// Draw drive mode
	char* drive_mode_label = "SM"; // Defaults to Static Mode
 80035c8:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <drawHeaderBar+0x54>)
 80035ca:	60fb      	str	r3, [r7, #12]
	if (drive_mode == READY_TO_DRIVE) {
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <drawHeaderBar+0x32>
		drive_mode_label = "RTD";
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <drawHeaderBar+0x58>)
 80035d4:	60fb      	str	r3, [r7, #12]
	}

	BSP_LCD_SetTextColor(primary_text_color);
 80035d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80035da:	f7fe fc05 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font_RobotoMedium24);
 80035de:	4808      	ldr	r0, [pc, #32]	; (8003600 <drawHeaderBar+0x5c>)
 80035e0:	f7fe fc22 	bl	8001e28 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 0, drive_mode_label, CENTER_MODE);
 80035e4:	2301      	movs	r3, #1
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	2100      	movs	r1, #0
 80035ea:	2000      	movs	r0, #0
 80035ec:	f7fe fc74 	bl	8001ed8 <BSP_LCD_DisplayStringAt>
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	0800a918 	.word	0x0800a918
 80035fc:	0800a91c 	.word	0x0800a91c
 8003600:	20000018 	.word	0x20000018

08003604 <drawAccumulatorDeltaBar>:

void drawAccumulatorDeltaBar(uint16_t yPos) {
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	80fb      	strh	r3, [r7, #6]
	uint8_t barHeight = 90;
 800360e:	235a      	movs	r3, #90	; 0x5a
 8003610:	75fb      	strb	r3, [r7, #23]
	uint16_t barWidth = screen_width - (screen_margin * 2);
 8003612:	f44f 7392 	mov.w	r3, #292	; 0x124
 8003616:	82bb      	strh	r3, [r7, #20]
	uint16_t maxDelta = (barWidth / 2) - 2; // -2 is for center line and end border
 8003618:	8abb      	ldrh	r3, [r7, #20]
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b02      	subs	r3, #2
 8003620:	827b      	strh	r3, [r7, #18]
	uint16_t currentDelta = abs(maxDelta * accumul_delta);
 8003622:	8a7b      	ldrh	r3, [r7, #18]
 8003624:	ee07 3a90 	vmov	s15, r3
 8003628:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800362c:	4b6d      	ldr	r3, [pc, #436]	; (80037e4 <drawAccumulatorDeltaBar+0x1e0>)
 800362e:	edd3 7a00 	vldr	s15, [r3]
 8003632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800363a:	ee17 3a90 	vmov	r3, s15
 800363e:	2b00      	cmp	r3, #0
 8003640:	bfb8      	it	lt
 8003642:	425b      	neglt	r3, r3
 8003644:	823b      	strh	r3, [r7, #16]

	// Draw outline
	BSP_LCD_SetTextColor(primary_back_color);
 8003646:	201f      	movs	r0, #31
 8003648:	f7fe fbce 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(screen_margin, yPos, barWidth, barHeight); // Outer stroke
 800364c:	7dfb      	ldrb	r3, [r7, #23]
 800364e:	b29b      	uxth	r3, r3
 8003650:	8aba      	ldrh	r2, [r7, #20]
 8003652:	88f9      	ldrh	r1, [r7, #6]
 8003654:	200e      	movs	r0, #14
 8003656:	f7fe fe1d 	bl	8002294 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(screen_margin + 1, yPos + 1, barWidth - 2, barHeight - 2); // Inner stroke
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	3301      	adds	r3, #1
 800365e:	b299      	uxth	r1, r3
 8003660:	8abb      	ldrh	r3, [r7, #20]
 8003662:	3b02      	subs	r3, #2
 8003664:	b29a      	uxth	r2, r3
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b02      	subs	r3, #2
 800366c:	b29b      	uxth	r3, r3
 800366e:	200f      	movs	r0, #15
 8003670:	f7fe fe10 	bl	8002294 <BSP_LCD_DrawRect>

	// Draw center line
	BSP_LCD_SetTextColor(primary_back_color);
 8003674:	201f      	movs	r0, #31
 8003676:	f7fe fbb7 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(screen_margin + (barWidth/2) - 1, yPos, screen_margin + (barWidth/2) - 1, yPos + barHeight - 1);
 800367a:	8abb      	ldrh	r3, [r7, #20]
 800367c:	085b      	lsrs	r3, r3, #1
 800367e:	b29b      	uxth	r3, r3
 8003680:	330d      	adds	r3, #13
 8003682:	b298      	uxth	r0, r3
 8003684:	8abb      	ldrh	r3, [r7, #20]
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	b29b      	uxth	r3, r3
 800368a:	330d      	adds	r3, #13
 800368c:	b29c      	uxth	r4, r3
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	b29a      	uxth	r2, r3
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	4413      	add	r3, r2
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29b      	uxth	r3, r3
 800369c:	88f9      	ldrh	r1, [r7, #6]
 800369e:	4622      	mov	r2, r4
 80036a0:	f7fe fd36 	bl	8002110 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(screen_margin + (barWidth/2), yPos, screen_margin + (barWidth/2), yPos + barHeight - 1);
 80036a4:	8abb      	ldrh	r3, [r7, #20]
 80036a6:	085b      	lsrs	r3, r3, #1
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	330e      	adds	r3, #14
 80036ac:	b298      	uxth	r0, r3
 80036ae:	8abb      	ldrh	r3, [r7, #20]
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	330e      	adds	r3, #14
 80036b6:	b29c      	uxth	r4, r3
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	88fb      	ldrh	r3, [r7, #6]
 80036be:	4413      	add	r3, r2
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	88f9      	ldrh	r1, [r7, #6]
 80036c8:	4622      	mov	r2, r4
 80036ca:	f7fe fd21 	bl	8002110 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(screen_margin + (barWidth/2) + 1, yPos, screen_margin + (barWidth/2) + 1, yPos + barHeight - 1);
 80036ce:	8abb      	ldrh	r3, [r7, #20]
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	330f      	adds	r3, #15
 80036d6:	b298      	uxth	r0, r3
 80036d8:	8abb      	ldrh	r3, [r7, #20]
 80036da:	085b      	lsrs	r3, r3, #1
 80036dc:	b29b      	uxth	r3, r3
 80036de:	330f      	adds	r3, #15
 80036e0:	b29c      	uxth	r4, r3
 80036e2:	7dfb      	ldrb	r3, [r7, #23]
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	4413      	add	r3, r2
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	88f9      	ldrh	r1, [r7, #6]
 80036f2:	4622      	mov	r2, r4
 80036f4:	f7fe fd0c 	bl	8002110 <BSP_LCD_DrawLine>


	// Draw inner fill and percentage text
	BSP_LCD_SetFont(&Font_RobotoBlack36);
 80036f8:	483b      	ldr	r0, [pc, #236]	; (80037e8 <drawAccumulatorDeltaBar+0x1e4>)
 80036fa:	f7fe fb95 	bl	8001e28 <BSP_LCD_SetFont>
	uint8_t displayText[5];
	sprintf(displayText, "%.2f", accumul_delta);
 80036fe:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <drawAccumulatorDeltaBar+0x1e0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7fc ff40 	bl	8000588 <__aeabi_f2d>
 8003708:	4603      	mov	r3, r0
 800370a:	460c      	mov	r4, r1
 800370c:	f107 0008 	add.w	r0, r7, #8
 8003710:	461a      	mov	r2, r3
 8003712:	4623      	mov	r3, r4
 8003714:	4935      	ldr	r1, [pc, #212]	; (80037ec <drawAccumulatorDeltaBar+0x1e8>)
 8003716:	f005 fd1f 	bl	8009158 <siprintf>
	if (accumul_delta < 0) {
 800371a:	4b32      	ldr	r3, [pc, #200]	; (80037e4 <drawAccumulatorDeltaBar+0x1e0>)
 800371c:	edd3 7a00 	vldr	s15, [r3]
 8003720:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003728:	d52c      	bpl.n	8003784 <drawAccumulatorDeltaBar+0x180>
		BSP_LCD_SetTextColor(warning_color);
 800372a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800372e:	f7fe fb5b 	bl	8001de8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((screen_margin + (barWidth / 2)) - currentDelta - 2, yPos + 2, currentDelta, barHeight - 4);
 8003732:	8abb      	ldrh	r3, [r7, #20]
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	8a3b      	ldrh	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	b29b      	uxth	r3, r3
 800373e:	330c      	adds	r3, #12
 8003740:	b298      	uxth	r0, r3
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	3302      	adds	r3, #2
 8003746:	b299      	uxth	r1, r3
 8003748:	7dfb      	ldrb	r3, [r7, #23]
 800374a:	b29b      	uxth	r3, r3
 800374c:	3b04      	subs	r3, #4
 800374e:	b29b      	uxth	r3, r3
 8003750:	8a3a      	ldrh	r2, [r7, #16]
 8003752:	f7fe fe2f 	bl	80023b4 <BSP_LCD_FillRect>

		BSP_LCD_SetTextColor(primary_text_color);
 8003756:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800375a:	f7fe fb45 	bl	8001de8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800375e:	2000      	movs	r0, #0
 8003760:	f7fe fb52 	bl	8001e08 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, yPos + (barHeight / 2) - 21, displayText, CENTER_MODE);
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	085b      	lsrs	r3, r3, #1
 8003768:	b2db      	uxtb	r3, r3
 800376a:	b29a      	uxth	r2, r3
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	4413      	add	r3, r2
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b15      	subs	r3, #21
 8003774:	b299      	uxth	r1, r3
 8003776:	f107 0208 	add.w	r2, r7, #8
 800377a:	2301      	movs	r3, #1
 800377c:	2000      	movs	r0, #0
 800377e:	f7fe fbab 	bl	8001ed8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, yPos + (barHeight / 2) -  21, displayText, CENTER_MODE);
	}

	

}
 8003782:	e02a      	b.n	80037da <drawAccumulatorDeltaBar+0x1d6>
		BSP_LCD_SetTextColor(nominal_color);
 8003784:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8003788:	f7fe fb2e 	bl	8001de8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(screen_margin + (barWidth / 2) + 2, yPos + 2, currentDelta + 1, barHeight - 4);
 800378c:	8abb      	ldrh	r3, [r7, #20]
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	b29b      	uxth	r3, r3
 8003792:	3310      	adds	r3, #16
 8003794:	b298      	uxth	r0, r3
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	3302      	adds	r3, #2
 800379a:	b299      	uxth	r1, r3
 800379c:	8a3b      	ldrh	r3, [r7, #16]
 800379e:	3301      	adds	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	7dfb      	ldrb	r3, [r7, #23]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b04      	subs	r3, #4
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f7fe fe03 	bl	80023b4 <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(primary_text_color);
 80037ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80037b2:	f7fe fb19 	bl	8001de8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80037b6:	2000      	movs	r0, #0
 80037b8:	f7fe fb26 	bl	8001e08 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, yPos + (barHeight / 2) -  21, displayText, CENTER_MODE);
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	085b      	lsrs	r3, r3, #1
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	4413      	add	r3, r2
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b15      	subs	r3, #21
 80037cc:	b299      	uxth	r1, r3
 80037ce:	f107 0208 	add.w	r2, r7, #8
 80037d2:	2301      	movs	r3, #1
 80037d4:	2000      	movs	r0, #0
 80037d6:	f7fe fb7f 	bl	8001ed8 <BSP_LCD_DisplayStringAt>
}
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd90      	pop	{r4, r7, pc}
 80037e2:	bf00      	nop
 80037e4:	200000e8 	.word	0x200000e8
 80037e8:	20000010 	.word	0x20000010
 80037ec:	0800a920 	.word	0x0800a920

080037f0 <updateAccumulatorDeltaBar>:

void updateAccumulatorDeltaBar(uint16_t yPos) {
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	80fb      	strh	r3, [r7, #6]
	uint8_t barHeight = 90;
 80037fa:	235a      	movs	r3, #90	; 0x5a
 80037fc:	75fb      	strb	r3, [r7, #23]
	uint16_t barWidth = screen_width - (screen_margin * 2);
 80037fe:	f44f 7392 	mov.w	r3, #292	; 0x124
 8003802:	82bb      	strh	r3, [r7, #20]
	uint16_t maxDelta = (barWidth / 2) - 2; // -2 is for center line and end border
 8003804:	8abb      	ldrh	r3, [r7, #20]
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b02      	subs	r3, #2
 800380c:	827b      	strh	r3, [r7, #18]
	uint16_t currentDelta = abs(maxDelta * accumul_delta);
 800380e:	8a7b      	ldrh	r3, [r7, #18]
 8003810:	ee07 3a90 	vmov	s15, r3
 8003814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003818:	4b42      	ldr	r3, [pc, #264]	; (8003924 <updateAccumulatorDeltaBar+0x134>)
 800381a:	edd3 7a00 	vldr	s15, [r3]
 800381e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003822:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003826:	ee17 3a90 	vmov	r3, s15
 800382a:	2b00      	cmp	r3, #0
 800382c:	bfb8      	it	lt
 800382e:	425b      	neglt	r3, r3
 8003830:	823b      	strh	r3, [r7, #16]

	// Draw inner fill and percentage text
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8003832:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8003836:	f7fe fad7 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font_RobotoBlack36);
 800383a:	483b      	ldr	r0, [pc, #236]	; (8003928 <updateAccumulatorDeltaBar+0x138>)
 800383c:	f7fe faf4 	bl	8001e28 <BSP_LCD_SetFont>
	uint8_t displayText[5];
	sprintf(displayText, "%.2f", accumul_delta);
 8003840:	4b38      	ldr	r3, [pc, #224]	; (8003924 <updateAccumulatorDeltaBar+0x134>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fc fe9f 	bl	8000588 <__aeabi_f2d>
 800384a:	4603      	mov	r3, r0
 800384c:	460c      	mov	r4, r1
 800384e:	f107 0008 	add.w	r0, r7, #8
 8003852:	461a      	mov	r2, r3
 8003854:	4623      	mov	r3, r4
 8003856:	4935      	ldr	r1, [pc, #212]	; (800392c <updateAccumulatorDeltaBar+0x13c>)
 8003858:	f005 fc7e 	bl	8009158 <siprintf>
	if (accumul_delta < 0) {
 800385c:	4b31      	ldr	r3, [pc, #196]	; (8003924 <updateAccumulatorDeltaBar+0x134>)
 800385e:	edd3 7a00 	vldr	s15, [r3]
 8003862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386a:	d52c      	bpl.n	80038c6 <updateAccumulatorDeltaBar+0xd6>
		BSP_LCD_SetTextColor(warning_color);
 800386c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003870:	f7fe faba 	bl	8001de8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((screen_margin + (barWidth / 2)) - currentDelta - 2, yPos + 2, currentDelta, barHeight - 4);
 8003874:	8abb      	ldrh	r3, [r7, #20]
 8003876:	085b      	lsrs	r3, r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	8a3b      	ldrh	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	b29b      	uxth	r3, r3
 8003880:	330c      	adds	r3, #12
 8003882:	b298      	uxth	r0, r3
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	3302      	adds	r3, #2
 8003888:	b299      	uxth	r1, r3
 800388a:	7dfb      	ldrb	r3, [r7, #23]
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b04      	subs	r3, #4
 8003890:	b29b      	uxth	r3, r3
 8003892:	8a3a      	ldrh	r2, [r7, #16]
 8003894:	f7fe fd8e 	bl	80023b4 <BSP_LCD_FillRect>

		BSP_LCD_SetTextColor(primary_text_color);
 8003898:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800389c:	f7fe faa4 	bl	8001de8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80038a0:	2000      	movs	r0, #0
 80038a2:	f7fe fab1 	bl	8001e08 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, yPos + (barHeight / 2) - 21, displayText, CENTER_MODE);
 80038a6:	7dfb      	ldrb	r3, [r7, #23]
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	88fb      	ldrh	r3, [r7, #6]
 80038b0:	4413      	add	r3, r2
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b15      	subs	r3, #21
 80038b6:	b299      	uxth	r1, r3
 80038b8:	f107 0208 	add.w	r2, r7, #8
 80038bc:	2301      	movs	r3, #1
 80038be:	2000      	movs	r0, #0
 80038c0:	f7fe fb0a 	bl	8001ed8 <BSP_LCD_DisplayStringAt>

		BSP_LCD_SetTextColor(primary_text_color);
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
		BSP_LCD_DisplayStringAt(0, yPos + (barHeight / 2) -  21, displayText, CENTER_MODE);
	}
}
 80038c4:	e02a      	b.n	800391c <updateAccumulatorDeltaBar+0x12c>
		BSP_LCD_SetTextColor(nominal_color);
 80038c6:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80038ca:	f7fe fa8d 	bl	8001de8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(screen_margin + (barWidth / 2) + 2, yPos + 2, currentDelta + 1, barHeight - 4);
 80038ce:	8abb      	ldrh	r3, [r7, #20]
 80038d0:	085b      	lsrs	r3, r3, #1
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3310      	adds	r3, #16
 80038d6:	b298      	uxth	r0, r3
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	3302      	adds	r3, #2
 80038dc:	b299      	uxth	r1, r3
 80038de:	8a3b      	ldrh	r3, [r7, #16]
 80038e0:	3301      	adds	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b04      	subs	r3, #4
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f7fe fd62 	bl	80023b4 <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(primary_text_color);
 80038f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80038f4:	f7fe fa78 	bl	8001de8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80038f8:	2000      	movs	r0, #0
 80038fa:	f7fe fa85 	bl	8001e08 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(0, yPos + (barHeight / 2) -  21, displayText, CENTER_MODE);
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	b2db      	uxtb	r3, r3
 8003904:	b29a      	uxth	r2, r3
 8003906:	88fb      	ldrh	r3, [r7, #6]
 8003908:	4413      	add	r3, r2
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b15      	subs	r3, #21
 800390e:	b299      	uxth	r1, r3
 8003910:	f107 0208 	add.w	r2, r7, #8
 8003914:	2301      	movs	r3, #1
 8003916:	2000      	movs	r0, #0
 8003918:	f7fe fade 	bl	8001ed8 <BSP_LCD_DisplayStringAt>
}
 800391c:	bf00      	nop
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	bd90      	pop	{r4, r7, pc}
 8003924:	200000e8 	.word	0x200000e8
 8003928:	20000010 	.word	0x20000010
 800392c:	0800a920 	.word	0x0800a920

08003930 <drawAccumulatorTotalBar>:

void drawAccumulatorTotalBar(uint16_t yPos) {
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	80fb      	strh	r3, [r7, #6]
	uint16_t currentCharge = accumul_charge;
 800393a:	4b35      	ldr	r3, [pc, #212]	; (8003a10 <drawAccumulatorTotalBar+0xe0>)
 800393c:	edd3 7a00 	vldr	s15, [r3]
 8003940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003944:	ee17 3a90 	vmov	r3, s15
 8003948:	82fb      	strh	r3, [r7, #22]
	uint8_t barHeight = 90;
 800394a:	235a      	movs	r3, #90	; 0x5a
 800394c:	757b      	strb	r3, [r7, #21]
	uint16_t barWidth = screen_width - (screen_margin * 2);
 800394e:	f44f 7392 	mov.w	r3, #292	; 0x124
 8003952:	827b      	strh	r3, [r7, #18]

	// Draw outline
	BSP_LCD_SetTextColor(primary_back_color);
 8003954:	201f      	movs	r0, #31
 8003956:	f7fe fa47 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(screen_margin, yPos, barWidth, barHeight); // Outer stroke
 800395a:	7d7b      	ldrb	r3, [r7, #21]
 800395c:	b29b      	uxth	r3, r3
 800395e:	8a7a      	ldrh	r2, [r7, #18]
 8003960:	88f9      	ldrh	r1, [r7, #6]
 8003962:	200e      	movs	r0, #14
 8003964:	f7fe fc96 	bl	8002294 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(screen_margin + 1, yPos + 1, barWidth - 2, barHeight - 2); // Inner stroke
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	3301      	adds	r3, #1
 800396c:	b299      	uxth	r1, r3
 800396e:	8a7b      	ldrh	r3, [r7, #18]
 8003970:	3b02      	subs	r3, #2
 8003972:	b29a      	uxth	r2, r3
 8003974:	7d7b      	ldrb	r3, [r7, #21]
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b02      	subs	r3, #2
 800397a:	b29b      	uxth	r3, r3
 800397c:	200f      	movs	r0, #15
 800397e:	f7fe fc89 	bl	8002294 <BSP_LCD_DrawRect>

	if(accumul_charge < 0){
 8003982:	4b23      	ldr	r3, [pc, #140]	; (8003a10 <drawAccumulatorTotalBar+0xe0>)
 8003984:	edd3 7a00 	vldr	s15, [r3]
 8003988:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800398c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003990:	d503      	bpl.n	800399a <drawAccumulatorTotalBar+0x6a>
		accumul_charge = 0;
 8003992:	4b1f      	ldr	r3, [pc, #124]	; (8003a10 <drawAccumulatorTotalBar+0xe0>)
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
	}

	// Draw inner fill
	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800399a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800399e:	f7fe fa23 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(screen_margin + 2, yPos + 2, currentCharge, barHeight - 4);
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	3302      	adds	r3, #2
 80039a6:	b299      	uxth	r1, r3
 80039a8:	7d7b      	ldrb	r3, [r7, #21]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b04      	subs	r3, #4
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	8afa      	ldrh	r2, [r7, #22]
 80039b2:	2010      	movs	r0, #16
 80039b4:	f7fe fcfe 	bl	80023b4 <BSP_LCD_FillRect>

	// Draw percentage text
	uint8_t displayText[5];
	sprintf(displayText, "%.0f", accumul_charge);
 80039b8:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <drawAccumulatorTotalBar+0xe0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fc fde3 	bl	8000588 <__aeabi_f2d>
 80039c2:	4603      	mov	r3, r0
 80039c4:	460c      	mov	r4, r1
 80039c6:	f107 000c 	add.w	r0, r7, #12
 80039ca:	461a      	mov	r2, r3
 80039cc:	4623      	mov	r3, r4
 80039ce:	4911      	ldr	r1, [pc, #68]	; (8003a14 <drawAccumulatorTotalBar+0xe4>)
 80039d0:	f005 fbc2 	bl	8009158 <siprintf>

	BSP_LCD_SetTextColor(primary_text_color);
 80039d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80039d8:	f7fe fa06 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font_RobotoBlack36);
 80039dc:	480e      	ldr	r0, [pc, #56]	; (8003a18 <drawAccumulatorTotalBar+0xe8>)
 80039de:	f7fe fa23 	bl	8001e28 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80039e2:	2000      	movs	r0, #0
 80039e4:	f7fe fa10 	bl	8001e08 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, yPos + (barHeight/2) - 21, displayText, CENTER_MODE);
 80039e8:	7d7b      	ldrb	r3, [r7, #21]
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	88fb      	ldrh	r3, [r7, #6]
 80039f2:	4413      	add	r3, r2
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b15      	subs	r3, #21
 80039f8:	b299      	uxth	r1, r3
 80039fa:	f107 020c 	add.w	r2, r7, #12
 80039fe:	2301      	movs	r3, #1
 8003a00:	2000      	movs	r0, #0
 8003a02:	f7fe fa69 	bl	8001ed8 <BSP_LCD_DisplayStringAt>
}
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd90      	pop	{r4, r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	200000e4 	.word	0x200000e4
 8003a14:	0800a8c8 	.word	0x0800a8c8
 8003a18:	20000010 	.word	0x20000010

08003a1c <updateAccumulatorTotalBar>:
void updateAccumulatorTotalBar(uint16_t yPos) {
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	80fb      	strh	r3, [r7, #6]
	uint8_t barHeight = 90;
 8003a26:	235a      	movs	r3, #90	; 0x5a
 8003a28:	75fb      	strb	r3, [r7, #23]
	uint16_t barWidth = screen_width - (screen_margin * 2);
 8003a2a:	f44f 7392 	mov.w	r3, #292	; 0x124
 8003a2e:	82bb      	strh	r3, [r7, #20]

	// Clear inner fill
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003a30:	2000      	movs	r0, #0
 8003a32:	f7fe f9d9 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(screen_margin + 2, yPos + 2, barWidth - 4, barHeight - 4);
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	3302      	adds	r3, #2
 8003a3a:	b299      	uxth	r1, r3
 8003a3c:	8abb      	ldrh	r3, [r7, #20]
 8003a3e:	3b04      	subs	r3, #4
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b04      	subs	r3, #4
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2010      	movs	r0, #16
 8003a4c:	f7fe fcb2 	bl	80023b4 <BSP_LCD_FillRect>

	if(accumul_charge < 0){
 8003a50:	4b26      	ldr	r3, [pc, #152]	; (8003aec <updateAccumulatorTotalBar+0xd0>)
 8003a52:	edd3 7a00 	vldr	s15, [r3]
 8003a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5e:	d503      	bpl.n	8003a68 <updateAccumulatorTotalBar+0x4c>
		accumul_charge = 0;
 8003a60:	4b22      	ldr	r3, [pc, #136]	; (8003aec <updateAccumulatorTotalBar+0xd0>)
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
	}

	// Draw inner fill
	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8003a68:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8003a6c:	f7fe f9bc 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(screen_margin + 2, yPos + 2, accumul_charge, barHeight - 4);
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	3302      	adds	r3, #2
 8003a74:	b299      	uxth	r1, r3
 8003a76:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <updateAccumulatorTotalBar+0xd0>)
 8003a78:	edd3 7a00 	vldr	s15, [r3]
 8003a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a80:	ee17 3a90 	vmov	r3, s15
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b04      	subs	r3, #4
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2010      	movs	r0, #16
 8003a90:	f7fe fc90 	bl	80023b4 <BSP_LCD_FillRect>

	// Draw percentage text
	uint8_t displayText[5];
	sprintf(displayText, "%.0f", accumul_charge);
 8003a94:	4b15      	ldr	r3, [pc, #84]	; (8003aec <updateAccumulatorTotalBar+0xd0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fc fd75 	bl	8000588 <__aeabi_f2d>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	460c      	mov	r4, r1
 8003aa2:	f107 000c 	add.w	r0, r7, #12
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4623      	mov	r3, r4
 8003aaa:	4911      	ldr	r1, [pc, #68]	; (8003af0 <updateAccumulatorTotalBar+0xd4>)
 8003aac:	f005 fb54 	bl	8009158 <siprintf>

	BSP_LCD_SetTextColor(primary_text_color);
 8003ab0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003ab4:	f7fe f998 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font_RobotoBlack36);
 8003ab8:	480e      	ldr	r0, [pc, #56]	; (8003af4 <updateAccumulatorTotalBar+0xd8>)
 8003aba:	f7fe f9b5 	bl	8001e28 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003abe:	2000      	movs	r0, #0
 8003ac0:	f7fe f9a2 	bl	8001e08 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, yPos + (barHeight / 2) - 21, displayText, CENTER_MODE);
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
 8003ac6:	085b      	lsrs	r3, r3, #1
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	4413      	add	r3, r2
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b15      	subs	r3, #21
 8003ad4:	b299      	uxth	r1, r3
 8003ad6:	f107 020c 	add.w	r2, r7, #12
 8003ada:	2301      	movs	r3, #1
 8003adc:	2000      	movs	r0, #0
 8003ade:	f7fe f9fb 	bl	8001ed8 <BSP_LCD_DisplayStringAt>
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd90      	pop	{r4, r7, pc}
 8003aea:	bf00      	nop
 8003aec:	200000e4 	.word	0x200000e4
 8003af0:	0800a8c8 	.word	0x0800a8c8
 8003af4:	20000010 	.word	0x20000010

08003af8 <drawReading>:

void drawReading(uint16_t y, uint8_t* label, uint8_t* value, bool draw_borders) {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
 8003b02:	461a      	mov	r2, r3
 8003b04:	4603      	mov	r3, r0
 8003b06:	81fb      	strh	r3, [r7, #14]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	737b      	strb	r3, [r7, #13]
	// Draw outline
	BSP_LCD_SetTextColor(primary_back_color);
 8003b0c:	201f      	movs	r0, #31
 8003b0e:	f7fe f96b 	bl	8001de8 <BSP_LCD_SetTextColor>
	if (draw_borders) {
 8003b12:	7b7b      	ldrb	r3, [r7, #13]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00f      	beq.n	8003b38 <drawReading+0x40>
		// Top line
		BSP_LCD_DrawHLine(0, y, screen_width);
 8003b18:	89fb      	ldrh	r3, [r7, #14]
 8003b1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b1e:	4619      	mov	r1, r3
 8003b20:	2000      	movs	r0, #0
 8003b22:	f7fe fa81 	bl	8002028 <BSP_LCD_DrawHLine>
		// Bottom line
		BSP_LCD_DrawHLine(0, y + reading_line_height, screen_width);
 8003b26:	89fb      	ldrh	r3, [r7, #14]
 8003b28:	332f      	adds	r3, #47	; 0x2f
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b30:	4619      	mov	r1, r3
 8003b32:	2000      	movs	r0, #0
 8003b34:	f7fe fa78 	bl	8002028 <BSP_LCD_DrawHLine>
	}
	// Value vertical divider
	BSP_LCD_DrawLine(244, y, 244, y + reading_line_height);
 8003b38:	89fb      	ldrh	r3, [r7, #14]
 8003b3a:	332f      	adds	r3, #47	; 0x2f
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	89f9      	ldrh	r1, [r7, #14]
 8003b40:	22f4      	movs	r2, #244	; 0xf4
 8003b42:	20f4      	movs	r0, #244	; 0xf4
 8003b44:	f7fe fae4 	bl	8002110 <BSP_LCD_DrawLine>

	// Draw label text
	BSP_LCD_SetTextColor(primary_text_color);
 8003b48:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003b4c:	f7fe f94c 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font_RobotoMedium26);
 8003b50:	4810      	ldr	r0, [pc, #64]	; (8003b94 <drawReading+0x9c>)
 8003b52:	f7fe f969 	bl	8001e28 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003b56:	2000      	movs	r0, #0
 8003b58:	f7fe f956 	bl	8001e08 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(15, y + ((reading_line_height / 2) - 13), label, LEFT_MODE);
 8003b5c:	89fb      	ldrh	r3, [r7, #14]
 8003b5e:	330a      	adds	r3, #10
 8003b60:	b299      	uxth	r1, r3
 8003b62:	2303      	movs	r3, #3
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	200f      	movs	r0, #15
 8003b68:	f7fe f9b6 	bl	8001ed8 <BSP_LCD_DisplayStringAt>

	// Draw value text
	BSP_LCD_SetFont(&Font_RobotoMedium28);
 8003b6c:	480a      	ldr	r0, [pc, #40]	; (8003b98 <drawReading+0xa0>)
 8003b6e:	f7fe f95b 	bl	8001e28 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8003b72:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8003b76:	f7fe f937 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(screen_width / 2 - 28, y + ((reading_line_height / 2) - 16), value, CENTER_MODE);
 8003b7a:	89fb      	ldrh	r3, [r7, #14]
 8003b7c:	3307      	adds	r3, #7
 8003b7e:	b299      	uxth	r1, r3
 8003b80:	2301      	movs	r3, #1
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	2084      	movs	r0, #132	; 0x84
 8003b86:	f7fe f9a7 	bl	8001ed8 <BSP_LCD_DisplayStringAt>
}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000020 	.word	0x20000020
 8003b98:	20000028 	.word	0x20000028

08003b9c <updateReading>:
void updateReading(uint16_t y, uint8_t* value, uint32_t text_color) {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	81fb      	strh	r3, [r7, #14]
    // Update value text
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003baa:	2000      	movs	r0, #0
 8003bac:	f7fe f92c 	bl	8001e08 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(text_color);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fe f917 	bl	8001de8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font_RobotoMedium28);
 8003bba:	4807      	ldr	r0, [pc, #28]	; (8003bd8 <updateReading+0x3c>)
 8003bbc:	f7fe f934 	bl	8001e28 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(screen_width / 2 - 28, y + ((reading_line_height / 2) - 16), value, CENTER_MODE);
 8003bc0:	89fb      	ldrh	r3, [r7, #14]
 8003bc2:	3307      	adds	r3, #7
 8003bc4:	b299      	uxth	r1, r3
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	2084      	movs	r0, #132	; 0x84
 8003bcc:	f7fe f984 	bl	8001ed8 <BSP_LCD_DisplayStringAt>
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000028 	.word	0x20000028

08003bdc <drawMenuItem>:

void drawMenuItem(uint16_t y, uint8_t* label, bool draw_borders) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	6039      	str	r1, [r7, #0]
 8003be6:	80fb      	strh	r3, [r7, #6]
 8003be8:	4613      	mov	r3, r2
 8003bea:	717b      	strb	r3, [r7, #5]
	// Draw outline
	BSP_LCD_SetTextColor(primary_back_color);
 8003bec:	201f      	movs	r0, #31
 8003bee:	f7fe f8fb 	bl	8001de8 <BSP_LCD_SetTextColor>
	if (draw_borders) {
 8003bf2:	797b      	ldrb	r3, [r7, #5]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00f      	beq.n	8003c18 <drawMenuItem+0x3c>
		// Top line
		BSP_LCD_DrawHLine(0, y, screen_width);
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003bfe:	4619      	mov	r1, r3
 8003c00:	2000      	movs	r0, #0
 8003c02:	f7fe fa11 	bl	8002028 <BSP_LCD_DrawHLine>
		// Bottom line
		BSP_LCD_DrawHLine(0, y + menu_line_height, screen_width);
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	333a      	adds	r3, #58	; 0x3a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003c10:	4619      	mov	r1, r3
 8003c12:	2000      	movs	r0, #0
 8003c14:	f7fe fa08 	bl	8002028 <BSP_LCD_DrawHLine>
	}

	// Draw label text
	BSP_LCD_SetTextColor(primary_text_color);
 8003c18:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003c1c:	f7fe f8e4 	bl	8001de8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003c20:	2000      	movs	r0, #0
 8003c22:	f7fe f8f1 	bl	8001e08 <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font_RobotoMedium26);
 8003c26:	4807      	ldr	r0, [pc, #28]	; (8003c44 <drawMenuItem+0x68>)
 8003c28:	f7fe f8fe 	bl	8001e28 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, y + ((menu_line_height / 2) - 13), label, CENTER_MODE);
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	3310      	adds	r3, #16
 8003c30:	b299      	uxth	r1, r3
 8003c32:	2301      	movs	r3, #1
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	2000      	movs	r0, #0
 8003c38:	f7fe f94e 	bl	8001ed8 <BSP_LCD_DisplayStringAt>
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20000020 	.word	0x20000020

08003c48 <updateMenuItem>:
void updateMenuItem(uint16_t y, uint8_t* label, bool selected) {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	6039      	str	r1, [r7, #0]
 8003c52:	80fb      	strh	r3, [r7, #6]
 8003c54:	4613      	mov	r3, r2
 8003c56:	717b      	strb	r3, [r7, #5]
    // Draw label text
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003c58:	2000      	movs	r0, #0
 8003c5a:	f7fe f8d5 	bl	8001e08 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(primary_text_color);
 8003c5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003c62:	f7fe f8c1 	bl	8001de8 <BSP_LCD_SetTextColor>
    if(selected) BSP_LCD_SetTextColor(selection_color);
 8003c66:	797b      	ldrb	r3, [r7, #5]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <updateMenuItem+0x2c>
 8003c6c:	f64f 2020 	movw	r0, #64032	; 0xfa20
 8003c70:	f7fe f8ba 	bl	8001de8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font_RobotoMedium26);
 8003c74:	4807      	ldr	r0, [pc, #28]	; (8003c94 <updateMenuItem+0x4c>)
 8003c76:	f7fe f8d7 	bl	8001e28 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, y + ((menu_line_height / 2) - 13), label, CENTER_MODE);
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	3310      	adds	r3, #16
 8003c7e:	b299      	uxth	r1, r3
 8003c80:	2301      	movs	r3, #1
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	2000      	movs	r0, #0
 8003c86:	f7fe f927 	bl	8001ed8 <BSP_LCD_DisplayStringAt>
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20000020 	.word	0x20000020

08003c98 <drawMenuItemWithValue>:

void drawMenuItemWithValue(uint16_t y, uint8_t* label, uint8_t value, bool draw_borders) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6039      	str	r1, [r7, #0]
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	80fb      	strh	r3, [r7, #6]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	717b      	strb	r3, [r7, #5]
 8003cac:	4613      	mov	r3, r2
 8003cae:	713b      	strb	r3, [r7, #4]
    // Draw outline
    BSP_LCD_SetTextColor(primary_back_color);
 8003cb0:	201f      	movs	r0, #31
 8003cb2:	f7fe f899 	bl	8001de8 <BSP_LCD_SetTextColor>
    if (draw_borders) {
 8003cb6:	793b      	ldrb	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00f      	beq.n	8003cdc <drawMenuItemWithValue+0x44>
        // Top line
        BSP_LCD_DrawHLine(0, y, screen_width);
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f7fe f9af 	bl	8002028 <BSP_LCD_DrawHLine>
        // Bottom line
        BSP_LCD_DrawHLine(0, y + menu_line_height, screen_width);
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	333a      	adds	r3, #58	; 0x3a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	f7fe f9a6 	bl	8002028 <BSP_LCD_DrawHLine>
    }
    // Value vertical divider
    BSP_LCD_DrawLine(244, y, 244, y + menu_line_height);
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	333a      	adds	r3, #58	; 0x3a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	88f9      	ldrh	r1, [r7, #6]
 8003ce4:	22f4      	movs	r2, #244	; 0xf4
 8003ce6:	20f4      	movs	r0, #244	; 0xf4
 8003ce8:	f7fe fa12 	bl	8002110 <BSP_LCD_DrawLine>

    // Draw label text
    BSP_LCD_SetTextColor(primary_text_color);
 8003cec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003cf0:	f7fe f87a 	bl	8001de8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font_RobotoMedium26);
 8003cf4:	4812      	ldr	r0, [pc, #72]	; (8003d40 <drawMenuItemWithValue+0xa8>)
 8003cf6:	f7fe f897 	bl	8001e28 <BSP_LCD_SetFont>
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f7fe f884 	bl	8001e08 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(15, y + ((menu_line_height / 2) - 13), label, LEFT_MODE);
 8003d00:	88fb      	ldrh	r3, [r7, #6]
 8003d02:	3310      	adds	r3, #16
 8003d04:	b299      	uxth	r1, r3
 8003d06:	2303      	movs	r3, #3
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	200f      	movs	r0, #15
 8003d0c:	f7fe f8e4 	bl	8001ed8 <BSP_LCD_DisplayStringAt>

    // Draw value text
	uint8_t displayValue[5];
	sprintf(displayValue, "%.0f", value);
 8003d10:	797a      	ldrb	r2, [r7, #5]
 8003d12:	f107 0308 	add.w	r3, r7, #8
 8003d16:	490b      	ldr	r1, [pc, #44]	; (8003d44 <drawMenuItemWithValue+0xac>)
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f005 fa1d 	bl	8009158 <siprintf>
    BSP_LCD_SetFont(&Font_RobotoBlack26);
 8003d1e:	480a      	ldr	r0, [pc, #40]	; (8003d48 <drawMenuItemWithValue+0xb0>)
 8003d20:	f7fe f882 	bl	8001e28 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(screen_width / 2 - 28, y + ((menu_line_height / 2) - 13), displayValue, CENTER_MODE);
 8003d24:	88fb      	ldrh	r3, [r7, #6]
 8003d26:	3310      	adds	r3, #16
 8003d28:	b299      	uxth	r1, r3
 8003d2a:	f107 0208 	add.w	r2, r7, #8
 8003d2e:	2301      	movs	r3, #1
 8003d30:	2084      	movs	r0, #132	; 0x84
 8003d32:	f7fe f8d1 	bl	8001ed8 <BSP_LCD_DisplayStringAt>
}
 8003d36:	bf00      	nop
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000020 	.word	0x20000020
 8003d44:	0800a8c8 	.word	0x0800a8c8
 8003d48:	20000008 	.word	0x20000008

08003d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d50:	f000 fb08 	bl	8004364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d54:	f000 f8b4 	bl	8003ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d58:	f000 fa26 	bl	80041a8 <MX_GPIO_Init>
  MX_RTC_Init();
 8003d5c:	f000 f948 	bl	8003ff0 <MX_RTC_Init>
  MX_SPI1_Init();
 8003d60:	f000 f98c 	bl	800407c <MX_SPI1_Init>
  MX_SPI2_Init();
 8003d64:	f000 f9c0 	bl	80040e8 <MX_SPI2_Init>
  MX_SDIO_SD_Init();
 8003d68:	f000 f968 	bl	800403c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003d6c:	f004 fabc 	bl	80082e8 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8003d70:	f000 f9f0 	bl	8004154 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  // Setup LCD
  BSP_LCD_Init();
 8003d74:	f7fd ffe8 	bl	8001d48 <BSP_LCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Show startup screen
  drawStartupScreen();
 8003d78:	f7fe ffe0 	bl	8002d3c <drawStartupScreen>
  HAL_Delay(1000);
 8003d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d80:	f000 fb32 	bl	80043e8 <HAL_Delay>

  // Show first screen
  drawScreen(current_screen);
 8003d84:	4b47      	ldr	r3, [pc, #284]	; (8003ea4 <main+0x158>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fe ff67 	bl	8002c5c <drawScreen>
  //create_sd_file("can_log.txt");

  // start can
  //Configure_CAN(&hcan);
  //mount_sd_card();
  selected_menu_option = 1;
 8003d8e:	4b46      	ldr	r3, [pc, #280]	; (8003ea8 <main+0x15c>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	701a      	strb	r2, [r3, #0]
  current_driver = drivers[0];
 8003d94:	4b45      	ldr	r3, [pc, #276]	; (8003eac <main+0x160>)
 8003d96:	4a46      	ldr	r2, [pc, #280]	; (8003eb0 <main+0x164>)
 8003d98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d9c:	e883 0003 	stmia.w	r3, {r0, r1}
    //HAL_ADC_Start(&hadc1);
    //HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
    //raw = HAL_ADC_GetValue(&hadc1);

    // Update screen
    if (current_screen == RTD_SCREEN) {
 8003da0:	4b40      	ldr	r3, [pc, #256]	; (8003ea4 <main+0x158>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d102      	bne.n	8003dae <main+0x62>
    	// Update screen
    	updateRTDScreen();
 8003da8:	f7ff f830 	bl	8002e0c <updateRTDScreen>
 8003dac:	e074      	b.n	8003e98 <main+0x14c>
    }
    else if (current_screen == SM_SCREEN) {
 8003dae:	4b3d      	ldr	r3, [pc, #244]	; (8003ea4 <main+0x158>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d124      	bne.n	8003e00 <main+0xb4>
        // Update screen
    	updateSMScreen();
 8003db6:	f7ff fa1d 	bl	80031f4 <updateSMScreen>

        // Handle navigation
        updateMenuScroll();
 8003dba:	f7fe ff91 	bl	8002ce0 <updateMenuScroll>

        // Handle activate of settings
        if (activate_btn_pressed) {
 8003dbe:	4b3d      	ldr	r3, [pc, #244]	; (8003eb4 <main+0x168>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d067      	beq.n	8003e98 <main+0x14c>
            switch (selected_menu_option) {
 8003dc8:	4b37      	ldr	r3, [pc, #220]	; (8003ea8 <main+0x15c>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d863      	bhi.n	8003e98 <main+0x14c>
 8003dd0:	a201      	add	r2, pc, #4	; (adr r2, 8003dd8 <main+0x8c>)
 8003dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd6:	bf00      	nop
 8003dd8:	08003de9 	.word	0x08003de9
 8003ddc:	08003df1 	.word	0x08003df1
 8003de0:	08003df9 	.word	0x08003df9
 8003de4:	08003e99 	.word	0x08003e99
            case 0:
                drawScreen(DRIVER_SELECTION_SCREEN);
 8003de8:	2002      	movs	r0, #2
 8003dea:	f7fe ff37 	bl	8002c5c <drawScreen>
                break;
 8003dee:	e053      	b.n	8003e98 <main+0x14c>
            case 1:
                drawScreen(EVENT_SELECTION_SCREEN);
 8003df0:	2003      	movs	r0, #3
 8003df2:	f7fe ff33 	bl	8002c5c <drawScreen>
                break;
 8003df6:	e04f      	b.n	8003e98 <main+0x14c>
            case 2:
                drawScreen(CAR_CONFIGURATION_SCREEN);
 8003df8:	2004      	movs	r0, #4
 8003dfa:	f7fe ff2f 	bl	8002c5c <drawScreen>
                break;
 8003dfe:	e04b      	b.n	8003e98 <main+0x14c>
                //drawAdvancedScreen();
                break;
            }
        }
    }
    else if (current_screen == DRIVER_SELECTION_SCREEN) {
 8003e00:	4b28      	ldr	r3, [pc, #160]	; (8003ea4 <main+0x158>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d11a      	bne.n	8003e3e <main+0xf2>
    	// Update screen
    	updateDriverSelectionScreen();
 8003e08:	f7ff faa2 	bl	8003350 <updateDriverSelectionScreen>

    	// Handle navigation
    	updateMenuScroll();
 8003e0c:	f7fe ff68 	bl	8002ce0 <updateMenuScroll>

        // Handle activate of settings
        if (activate_btn_pressed) {
 8003e10:	4b28      	ldr	r3, [pc, #160]	; (8003eb4 <main+0x168>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d008      	beq.n	8003e2c <main+0xe0>
            changeDriver(drivers[selected_menu_option]);
 8003e1a:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <main+0x15c>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	4a24      	ldr	r2, [pc, #144]	; (8003eb0 <main+0x164>)
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e28:	f7fe feba 	bl	8002ba0 <changeDriver>
        }
        
        if (back_btn_pressed) {
 8003e2c:	4b22      	ldr	r3, [pc, #136]	; (8003eb8 <main+0x16c>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d030      	beq.n	8003e98 <main+0x14c>
            drawScreen(SM_SCREEN);
 8003e36:	2000      	movs	r0, #0
 8003e38:	f7fe ff10 	bl	8002c5c <drawScreen>
 8003e3c:	e02c      	b.n	8003e98 <main+0x14c>
        }
    }
    else if (current_screen == EVENT_SELECTION_SCREEN) {
 8003e3e:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <main+0x158>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d11a      	bne.n	8003e7c <main+0x130>
    	// Update screen
        updateEventSelectionScreen();
 8003e46:	f7ff fb15 	bl	8003474 <updateEventSelectionScreen>

        // Handle navigation
        updateMenuScroll();
 8003e4a:	f7fe ff49 	bl	8002ce0 <updateMenuScroll>

        // Handle activate of settings
        if (activate_btn_pressed) {
 8003e4e:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <main+0x168>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <main+0x11e>
            changeEvent(events[selected_menu_option]);
 8003e58:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <main+0x15c>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	4a17      	ldr	r2, [pc, #92]	; (8003ebc <main+0x170>)
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e66:	f7fe feb1 	bl	8002bcc <changeEvent>
        }

        if (back_btn_pressed) {
 8003e6a:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <main+0x16c>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d011      	beq.n	8003e98 <main+0x14c>
            drawScreen(SM_SCREEN);
 8003e74:	2000      	movs	r0, #0
 8003e76:	f7fe fef1 	bl	8002c5c <drawScreen>
 8003e7a:	e00d      	b.n	8003e98 <main+0x14c>
        }
    }
    else if (current_screen == CAR_CONFIGURATION_SCREEN) {
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <main+0x158>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d109      	bne.n	8003e98 <main+0x14c>
    	// Update screen
    	//updateCarConfigurationScreen();

        // Handle navigation
        updateMenuScroll();
 8003e84:	f7fe ff2c 	bl	8002ce0 <updateMenuScroll>

        // Handle activate/value change of settings


        if (back_btn_pressed) {
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <main+0x16c>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <main+0x14c>
            drawScreen(SM_SCREEN);
 8003e92:	2000      	movs	r0, #0
 8003e94:	f7fe fee2 	bl	8002c5c <drawScreen>
//      }
//      update_sd_file("can_log.txt", can_log_buffer);

      // Handle back button 

      HAL_Delay(400);
 8003e98:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003e9c:	f000 faa4 	bl	80043e8 <HAL_Delay>
    if (current_screen == RTD_SCREEN) {
 8003ea0:	e77e      	b.n	8003da0 <main+0x54>
 8003ea2:	bf00      	nop
 8003ea4:	200000cc 	.word	0x200000cc
 8003ea8:	20000508 	.word	0x20000508
 8003eac:	200000ec 	.word	0x200000ec
 8003eb0:	2000007c 	.word	0x2000007c
 8003eb4:	20000302 	.word	0x20000302
 8003eb8:	20000303 	.word	0x20000303
 8003ebc:	2000009c 	.word	0x2000009c

08003ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b0ac      	sub	sp, #176	; 0xb0
 8003ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ec6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003eca:	2234      	movs	r2, #52	; 0x34
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f004 fc18 	bl	8008704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ed4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	60da      	str	r2, [r3, #12]
 8003ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ee4:	f107 030c 	add.w	r3, r7, #12
 8003ee8:	225c      	movs	r2, #92	; 0x5c
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f004 fc09 	bl	8008704 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	4b3c      	ldr	r3, [pc, #240]	; (8003fe8 <SystemClock_Config+0x128>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a3b      	ldr	r2, [pc, #236]	; (8003fe8 <SystemClock_Config+0x128>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40
 8003f02:	4b39      	ldr	r3, [pc, #228]	; (8003fe8 <SystemClock_Config+0x128>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	607b      	str	r3, [r7, #4]
 8003f12:	4b36      	ldr	r3, [pc, #216]	; (8003fec <SystemClock_Config+0x12c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a35      	ldr	r2, [pc, #212]	; (8003fec <SystemClock_Config+0x12c>)
 8003f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	4b33      	ldr	r3, [pc, #204]	; (8003fec <SystemClock_Config+0x12c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003f2a:	2305      	movs	r3, #5
 8003f2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f4a:	2304      	movs	r3, #4
 8003f4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003f50:	23b4      	movs	r3, #180	; 0xb4
 8003f52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f56:	2302      	movs	r3, #2
 8003f58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003f62:	2302      	movs	r3, #2
 8003f64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f68:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f001 fb51 	bl	8005614 <HAL_RCC_OscConfig>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003f78:	f000 f9c2 	bl	8004300 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003f7c:	f000 fce4 	bl	8004948 <HAL_PWREx_EnableOverDrive>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003f86:	f000 f9bb 	bl	8004300 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f8a:	230f      	movs	r3, #15
 8003f8c:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f92:	2300      	movs	r3, #0
 8003f94:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f9a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fa0:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003fa2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003fa6:	2105      	movs	r1, #5
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fd1d 	bl	80049e8 <HAL_RCC_ClockConfig>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8003fb4:	f000 f9a4 	bl	8004300 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_SDIO
 8003fb8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003fbc:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fcc:	f107 030c 	add.w	r3, r7, #12
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fe55 	bl	8004c80 <HAL_RCCEx_PeriphCLKConfig>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8003fdc:	f000 f990 	bl	8004300 <Error_Handler>
  }
}
 8003fe0:	bf00      	nop
 8003fe2:	37b0      	adds	r7, #176	; 0xb0
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40007000 	.word	0x40007000

08003ff0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003ff4:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <MX_RTC_Init+0x44>)
 8003ff6:	4a10      	ldr	r2, [pc, #64]	; (8004038 <MX_RTC_Init+0x48>)
 8003ff8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003ffa:	4b0e      	ldr	r3, [pc, #56]	; (8004034 <MX_RTC_Init+0x44>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <MX_RTC_Init+0x44>)
 8004002:	227f      	movs	r2, #127	; 0x7f
 8004004:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004006:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <MX_RTC_Init+0x44>)
 8004008:	22ff      	movs	r2, #255	; 0xff
 800400a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <MX_RTC_Init+0x44>)
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004012:	4b08      	ldr	r3, [pc, #32]	; (8004034 <MX_RTC_Init+0x44>)
 8004014:	2200      	movs	r2, #0
 8004016:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <MX_RTC_Init+0x44>)
 800401a:	2200      	movs	r2, #0
 800401c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800401e:	4805      	ldr	r0, [pc, #20]	; (8004034 <MX_RTC_Init+0x44>)
 8004020:	f001 fd52 	bl	8005ac8 <HAL_RTC_Init>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800402a:	f000 f969 	bl	8004300 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800402e:	bf00      	nop
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	200003c0 	.word	0x200003c0
 8004038:	40002800 	.word	0x40002800

0800403c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004040:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <MX_SDIO_SD_Init+0x38>)
 8004042:	4a0d      	ldr	r2, [pc, #52]	; (8004078 <MX_SDIO_SD_Init+0x3c>)
 8004044:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004046:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <MX_SDIO_SD_Init+0x38>)
 8004048:	2200      	movs	r2, #0
 800404a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800404c:	4b09      	ldr	r3, [pc, #36]	; (8004074 <MX_SDIO_SD_Init+0x38>)
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004052:	4b08      	ldr	r3, [pc, #32]	; (8004074 <MX_SDIO_SD_Init+0x38>)
 8004054:	2200      	movs	r2, #0
 8004056:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <MX_SDIO_SD_Init+0x38>)
 800405a:	2200      	movs	r2, #0
 800405c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <MX_SDIO_SD_Init+0x38>)
 8004060:	2200      	movs	r2, #0
 8004062:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8004064:	4b03      	ldr	r3, [pc, #12]	; (8004074 <MX_SDIO_SD_Init+0x38>)
 8004066:	2200      	movs	r2, #0
 8004068:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800406a:	bf00      	nop
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	200003e4 	.word	0x200003e4
 8004078:	40012c00 	.word	0x40012c00

0800407c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004080:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <MX_SPI1_Init+0x64>)
 8004082:	4a18      	ldr	r2, [pc, #96]	; (80040e4 <MX_SPI1_Init+0x68>)
 8004084:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004086:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <MX_SPI1_Init+0x64>)
 8004088:	f44f 7282 	mov.w	r2, #260	; 0x104
 800408c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800408e:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <MX_SPI1_Init+0x64>)
 8004090:	2200      	movs	r2, #0
 8004092:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004094:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <MX_SPI1_Init+0x64>)
 8004096:	2200      	movs	r2, #0
 8004098:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <MX_SPI1_Init+0x64>)
 800409c:	2200      	movs	r2, #0
 800409e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <MX_SPI1_Init+0x64>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80040a6:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <MX_SPI1_Init+0x64>)
 80040a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040ae:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <MX_SPI1_Init+0x64>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <MX_SPI1_Init+0x64>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <MX_SPI1_Init+0x64>)
 80040bc:	2200      	movs	r2, #0
 80040be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <MX_SPI1_Init+0x64>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80040c6:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <MX_SPI1_Init+0x64>)
 80040c8:	220a      	movs	r2, #10
 80040ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80040cc:	4804      	ldr	r0, [pc, #16]	; (80040e0 <MX_SPI1_Init+0x64>)
 80040ce:	f002 fd7d 	bl	8006bcc <HAL_SPI_Init>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80040d8:	f000 f912 	bl	8004300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80040dc:	bf00      	nop
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20000468 	.word	0x20000468
 80040e4:	40013000 	.word	0x40013000

080040e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80040ec:	4b17      	ldr	r3, [pc, #92]	; (800414c <MX_SPI2_Init+0x64>)
 80040ee:	4a18      	ldr	r2, [pc, #96]	; (8004150 <MX_SPI2_Init+0x68>)
 80040f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80040f2:	4b16      	ldr	r3, [pc, #88]	; (800414c <MX_SPI2_Init+0x64>)
 80040f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80040f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80040fa:	4b14      	ldr	r3, [pc, #80]	; (800414c <MX_SPI2_Init+0x64>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004100:	4b12      	ldr	r3, [pc, #72]	; (800414c <MX_SPI2_Init+0x64>)
 8004102:	2200      	movs	r2, #0
 8004104:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004106:	4b11      	ldr	r3, [pc, #68]	; (800414c <MX_SPI2_Init+0x64>)
 8004108:	2200      	movs	r2, #0
 800410a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800410c:	4b0f      	ldr	r3, [pc, #60]	; (800414c <MX_SPI2_Init+0x64>)
 800410e:	2200      	movs	r2, #0
 8004110:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004112:	4b0e      	ldr	r3, [pc, #56]	; (800414c <MX_SPI2_Init+0x64>)
 8004114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004118:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800411a:	4b0c      	ldr	r3, [pc, #48]	; (800414c <MX_SPI2_Init+0x64>)
 800411c:	2210      	movs	r2, #16
 800411e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <MX_SPI2_Init+0x64>)
 8004122:	2200      	movs	r2, #0
 8004124:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <MX_SPI2_Init+0x64>)
 8004128:	2200      	movs	r2, #0
 800412a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <MX_SPI2_Init+0x64>)
 800412e:	2200      	movs	r2, #0
 8004130:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <MX_SPI2_Init+0x64>)
 8004134:	220a      	movs	r2, #10
 8004136:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004138:	4804      	ldr	r0, [pc, #16]	; (800414c <MX_SPI2_Init+0x64>)
 800413a:	f002 fd47 	bl	8006bcc <HAL_SPI_Init>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004144:	f000 f8dc 	bl	8004300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004148:	bf00      	nop
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20000368 	.word	0x20000368
 8004150:	40003800 	.word	0x40003800

08004154 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004158:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <MX_USART2_UART_Init+0x4c>)
 800415a:	4a12      	ldr	r2, [pc, #72]	; (80041a4 <MX_USART2_UART_Init+0x50>)
 800415c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <MX_USART2_UART_Init+0x4c>)
 8004160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004164:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004166:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <MX_USART2_UART_Init+0x4c>)
 8004168:	2200      	movs	r2, #0
 800416a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800416c:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <MX_USART2_UART_Init+0x4c>)
 800416e:	2200      	movs	r2, #0
 8004170:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004172:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <MX_USART2_UART_Init+0x4c>)
 8004174:	2200      	movs	r2, #0
 8004176:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <MX_USART2_UART_Init+0x4c>)
 800417a:	220c      	movs	r2, #12
 800417c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800417e:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <MX_USART2_UART_Init+0x4c>)
 8004180:	2200      	movs	r2, #0
 8004182:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004184:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <MX_USART2_UART_Init+0x4c>)
 8004186:	2200      	movs	r2, #0
 8004188:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800418a:	4805      	ldr	r0, [pc, #20]	; (80041a0 <MX_USART2_UART_Init+0x4c>)
 800418c:	f002 ffc0 	bl	8007110 <HAL_UART_Init>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004196:	f000 f8b3 	bl	8004300 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800419a:	bf00      	nop
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	200004c0 	.word	0x200004c0
 80041a4:	40004400 	.word	0x40004400

080041a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08a      	sub	sp, #40	; 0x28
 80041ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ae:	f107 0314 	add.w	r3, r7, #20
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	605a      	str	r2, [r3, #4]
 80041b8:	609a      	str	r2, [r3, #8]
 80041ba:	60da      	str	r2, [r3, #12]
 80041bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	4b42      	ldr	r3, [pc, #264]	; (80042cc <MX_GPIO_Init+0x124>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	4a41      	ldr	r2, [pc, #260]	; (80042cc <MX_GPIO_Init+0x124>)
 80041c8:	f043 0304 	orr.w	r3, r3, #4
 80041cc:	6313      	str	r3, [r2, #48]	; 0x30
 80041ce:	4b3f      	ldr	r3, [pc, #252]	; (80042cc <MX_GPIO_Init+0x124>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	4b3b      	ldr	r3, [pc, #236]	; (80042cc <MX_GPIO_Init+0x124>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	4a3a      	ldr	r2, [pc, #232]	; (80042cc <MX_GPIO_Init+0x124>)
 80041e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e8:	6313      	str	r3, [r2, #48]	; 0x30
 80041ea:	4b38      	ldr	r3, [pc, #224]	; (80042cc <MX_GPIO_Init+0x124>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	4b34      	ldr	r3, [pc, #208]	; (80042cc <MX_GPIO_Init+0x124>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	4a33      	ldr	r2, [pc, #204]	; (80042cc <MX_GPIO_Init+0x124>)
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	6313      	str	r3, [r2, #48]	; 0x30
 8004206:	4b31      	ldr	r3, [pc, #196]	; (80042cc <MX_GPIO_Init+0x124>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	4b2d      	ldr	r3, [pc, #180]	; (80042cc <MX_GPIO_Init+0x124>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	4a2c      	ldr	r2, [pc, #176]	; (80042cc <MX_GPIO_Init+0x124>)
 800421c:	f043 0302 	orr.w	r3, r3, #2
 8004220:	6313      	str	r3, [r2, #48]	; 0x30
 8004222:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <MX_GPIO_Init+0x124>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	607b      	str	r3, [r7, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	603b      	str	r3, [r7, #0]
 8004232:	4b26      	ldr	r3, [pc, #152]	; (80042cc <MX_GPIO_Init+0x124>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	4a25      	ldr	r2, [pc, #148]	; (80042cc <MX_GPIO_Init+0x124>)
 8004238:	f043 0308 	orr.w	r3, r3, #8
 800423c:	6313      	str	r3, [r2, #48]	; 0x30
 800423e:	4b23      	ldr	r3, [pc, #140]	; (80042cc <MX_GPIO_Init+0x124>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800424a:	2200      	movs	r2, #0
 800424c:	f244 0140 	movw	r1, #16448	; 0x4040
 8004250:	481f      	ldr	r0, [pc, #124]	; (80042d0 <MX_GPIO_Init+0x128>)
 8004252:	f000 fb5f 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8004256:	2200      	movs	r2, #0
 8004258:	2180      	movs	r1, #128	; 0x80
 800425a:	481e      	ldr	r0, [pc, #120]	; (80042d4 <MX_GPIO_Init+0x12c>)
 800425c:	f000 fb5a 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8004260:	2200      	movs	r2, #0
 8004262:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004266:	481c      	ldr	r0, [pc, #112]	; (80042d8 <MX_GPIO_Init+0x130>)
 8004268:	f000 fb54 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LCD_CS_Pin;
 800426c:	f244 0340 	movw	r3, #16448	; 0x4040
 8004270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004272:	2301      	movs	r3, #1
 8004274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427a:	2300      	movs	r3, #0
 800427c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800427e:	f107 0314 	add.w	r3, r7, #20
 8004282:	4619      	mov	r1, r3
 8004284:	4812      	ldr	r0, [pc, #72]	; (80042d0 <MX_GPIO_Init+0x128>)
 8004286:	f000 f9b3 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 800428a:	2380      	movs	r3, #128	; 0x80
 800428c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800428e:	2301      	movs	r3, #1
 8004290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004292:	2300      	movs	r3, #0
 8004294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004296:	2300      	movs	r3, #0
 8004298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800429a:	f107 0314 	add.w	r3, r7, #20
 800429e:	4619      	mov	r1, r3
 80042a0:	480c      	ldr	r0, [pc, #48]	; (80042d4 <MX_GPIO_Init+0x12c>)
 80042a2:	f000 f9a5 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RST_Pin;
 80042a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042ac:	2301      	movs	r3, #1
 80042ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b4:	2300      	movs	r3, #0
 80042b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b8:	f107 0314 	add.w	r3, r7, #20
 80042bc:	4619      	mov	r1, r3
 80042be:	4806      	ldr	r0, [pc, #24]	; (80042d8 <MX_GPIO_Init+0x130>)
 80042c0:	f000 f996 	bl	80045f0 <HAL_GPIO_Init>

}
 80042c4:	bf00      	nop
 80042c6:	3728      	adds	r7, #40	; 0x28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40023800 	.word	0x40023800
 80042d0:	40020400 	.word	0x40020400
 80042d4:	40020800 	.word	0x40020800
 80042d8:	40020000 	.word	0x40020000

080042dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a04      	ldr	r2, [pc, #16]	; (80042fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d101      	bne.n	80042f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80042ee:	f000 f85b 	bl	80043a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40000800 	.word	0x40000800

08004300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004304:	bf00      	nop
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004348 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004314:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004316:	e003      	b.n	8004320 <LoopCopyDataInit>

08004318 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800431a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800431c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800431e:	3104      	adds	r1, #4

08004320 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004320:	480b      	ldr	r0, [pc, #44]	; (8004350 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004322:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004324:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004326:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004328:	d3f6      	bcc.n	8004318 <CopyDataInit>
  ldr  r2, =_sbss
 800432a:	4a0b      	ldr	r2, [pc, #44]	; (8004358 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800432c:	e002      	b.n	8004334 <LoopFillZerobss>

0800432e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800432e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004330:	f842 3b04 	str.w	r3, [r2], #4

08004334 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004334:	4b09      	ldr	r3, [pc, #36]	; (800435c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004336:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004338:	d3f9      	bcc.n	800432e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800433a:	f7fe fc1b 	bl	8002b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800433e:	f004 f9ad 	bl	800869c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004342:	f7ff fd03 	bl	8003d4c <main>
  bx  lr    
 8004346:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004348:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800434c:	08017a20 	.word	0x08017a20
  ldr  r0, =_sdata
 8004350:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004354:	200002cc 	.word	0x200002cc
  ldr  r2, =_sbss
 8004358:	200002cc 	.word	0x200002cc
  ldr  r3, = _ebss
 800435c:	20002584 	.word	0x20002584

08004360 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004360:	e7fe      	b.n	8004360 <ADC_IRQHandler>
	...

08004364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004368:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <HAL_Init+0x40>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a0d      	ldr	r2, [pc, #52]	; (80043a4 <HAL_Init+0x40>)
 800436e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004372:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_Init+0x40>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a0a      	ldr	r2, [pc, #40]	; (80043a4 <HAL_Init+0x40>)
 800437a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800437e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004380:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <HAL_Init+0x40>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a07      	ldr	r2, [pc, #28]	; (80043a4 <HAL_Init+0x40>)
 8004386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800438c:	2003      	movs	r0, #3
 800438e:	f000 f8fa 	bl	8004586 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004392:	2000      	movs	r0, #0
 8004394:	f7fe fb06 	bl	80029a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004398:	f7fe f948 	bl	800262c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40023c00 	.word	0x40023c00

080043a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_IncTick+0x20>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <HAL_IncTick+0x24>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4413      	add	r3, r2
 80043b8:	4a04      	ldr	r2, [pc, #16]	; (80043cc <HAL_IncTick+0x24>)
 80043ba:	6013      	str	r3, [r2, #0]
}
 80043bc:	bf00      	nop
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	200000f8 	.word	0x200000f8
 80043cc:	2000050c 	.word	0x2000050c

080043d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  return uwTick;
 80043d4:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <HAL_GetTick+0x14>)
 80043d6:	681b      	ldr	r3, [r3, #0]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	2000050c 	.word	0x2000050c

080043e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043f0:	f7ff ffee 	bl	80043d0 <HAL_GetTick>
 80043f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004400:	d005      	beq.n	800440e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <HAL_Delay+0x40>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800440e:	bf00      	nop
 8004410:	f7ff ffde 	bl	80043d0 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	429a      	cmp	r2, r3
 800441e:	d8f7      	bhi.n	8004410 <HAL_Delay+0x28>
  {
  }
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	200000f8 	.word	0x200000f8

0800442c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800443c:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <__NVIC_SetPriorityGrouping+0x44>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004448:	4013      	ands	r3, r2
 800444a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800445c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800445e:	4a04      	ldr	r2, [pc, #16]	; (8004470 <__NVIC_SetPriorityGrouping+0x44>)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	60d3      	str	r3, [r2, #12]
}
 8004464:	bf00      	nop
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	e000ed00 	.word	0xe000ed00

08004474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004478:	4b04      	ldr	r3, [pc, #16]	; (800448c <__NVIC_GetPriorityGrouping+0x18>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	0a1b      	lsrs	r3, r3, #8
 800447e:	f003 0307 	and.w	r3, r3, #7
}
 8004482:	4618      	mov	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	e000ed00 	.word	0xe000ed00

08004490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800449a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	db0b      	blt.n	80044ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	f003 021f 	and.w	r2, r3, #31
 80044a8:	4907      	ldr	r1, [pc, #28]	; (80044c8 <__NVIC_EnableIRQ+0x38>)
 80044aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2001      	movs	r0, #1
 80044b2:	fa00 f202 	lsl.w	r2, r0, r2
 80044b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	e000e100 	.word	0xe000e100

080044cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	6039      	str	r1, [r7, #0]
 80044d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	db0a      	blt.n	80044f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	490c      	ldr	r1, [pc, #48]	; (8004518 <__NVIC_SetPriority+0x4c>)
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	0112      	lsls	r2, r2, #4
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	440b      	add	r3, r1
 80044f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044f4:	e00a      	b.n	800450c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	4908      	ldr	r1, [pc, #32]	; (800451c <__NVIC_SetPriority+0x50>)
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	3b04      	subs	r3, #4
 8004504:	0112      	lsls	r2, r2, #4
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	440b      	add	r3, r1
 800450a:	761a      	strb	r2, [r3, #24]
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	e000e100 	.word	0xe000e100
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004520:	b480      	push	{r7}
 8004522:	b089      	sub	sp, #36	; 0x24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f1c3 0307 	rsb	r3, r3, #7
 800453a:	2b04      	cmp	r3, #4
 800453c:	bf28      	it	cs
 800453e:	2304      	movcs	r3, #4
 8004540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	3304      	adds	r3, #4
 8004546:	2b06      	cmp	r3, #6
 8004548:	d902      	bls.n	8004550 <NVIC_EncodePriority+0x30>
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	3b03      	subs	r3, #3
 800454e:	e000      	b.n	8004552 <NVIC_EncodePriority+0x32>
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004554:	f04f 32ff 	mov.w	r2, #4294967295
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43da      	mvns	r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	401a      	ands	r2, r3
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004568:	f04f 31ff 	mov.w	r1, #4294967295
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	fa01 f303 	lsl.w	r3, r1, r3
 8004572:	43d9      	mvns	r1, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004578:	4313      	orrs	r3, r2
         );
}
 800457a:	4618      	mov	r0, r3
 800457c:	3724      	adds	r7, #36	; 0x24
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff ff4c 	bl	800442c <__NVIC_SetPriorityGrouping>
}
 8004594:	bf00      	nop
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045ae:	f7ff ff61 	bl	8004474 <__NVIC_GetPriorityGrouping>
 80045b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	68b9      	ldr	r1, [r7, #8]
 80045b8:	6978      	ldr	r0, [r7, #20]
 80045ba:	f7ff ffb1 	bl	8004520 <NVIC_EncodePriority>
 80045be:	4602      	mov	r2, r0
 80045c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045c4:	4611      	mov	r1, r2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff ff80 	bl	80044cc <__NVIC_SetPriority>
}
 80045cc:	bf00      	nop
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff ff54 	bl	8004490 <__NVIC_EnableIRQ>
}
 80045e8:	bf00      	nop
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b089      	sub	sp, #36	; 0x24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045fe:	2300      	movs	r3, #0
 8004600:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004602:	2300      	movs	r3, #0
 8004604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004606:	2300      	movs	r3, #0
 8004608:	61fb      	str	r3, [r7, #28]
 800460a:	e165      	b.n	80048d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800460c:	2201      	movs	r2, #1
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4013      	ands	r3, r2
 800461e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	429a      	cmp	r2, r3
 8004626:	f040 8154 	bne.w	80048d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d00b      	beq.n	800464a <HAL_GPIO_Init+0x5a>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d007      	beq.n	800464a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800463e:	2b11      	cmp	r3, #17
 8004640:	d003      	beq.n	800464a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b12      	cmp	r3, #18
 8004648:	d130      	bne.n	80046ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	2203      	movs	r2, #3
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4013      	ands	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4313      	orrs	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004680:	2201      	movs	r2, #1
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	43db      	mvns	r3, r3
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4013      	ands	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	f003 0201 	and.w	r2, r3, #1
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	2203      	movs	r2, #3
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d003      	beq.n	80046ec <HAL_GPIO_Init+0xfc>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b12      	cmp	r3, #18
 80046ea:	d123      	bne.n	8004734 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	08da      	lsrs	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3208      	adds	r2, #8
 80046f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	220f      	movs	r2, #15
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	08da      	lsrs	r2, r3, #3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3208      	adds	r2, #8
 800472e:	69b9      	ldr	r1, [r7, #24]
 8004730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	2203      	movs	r2, #3
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	43db      	mvns	r3, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4013      	ands	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 0203 	and.w	r2, r3, #3
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4313      	orrs	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 80ae 	beq.w	80048d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	4b5c      	ldr	r3, [pc, #368]	; (80048ec <HAL_GPIO_Init+0x2fc>)
 800477c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477e:	4a5b      	ldr	r2, [pc, #364]	; (80048ec <HAL_GPIO_Init+0x2fc>)
 8004780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004784:	6453      	str	r3, [r2, #68]	; 0x44
 8004786:	4b59      	ldr	r3, [pc, #356]	; (80048ec <HAL_GPIO_Init+0x2fc>)
 8004788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004792:	4a57      	ldr	r2, [pc, #348]	; (80048f0 <HAL_GPIO_Init+0x300>)
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	3302      	adds	r3, #2
 800479a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	220f      	movs	r2, #15
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	43db      	mvns	r3, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a4e      	ldr	r2, [pc, #312]	; (80048f4 <HAL_GPIO_Init+0x304>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d025      	beq.n	800480a <HAL_GPIO_Init+0x21a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a4d      	ldr	r2, [pc, #308]	; (80048f8 <HAL_GPIO_Init+0x308>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d01f      	beq.n	8004806 <HAL_GPIO_Init+0x216>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a4c      	ldr	r2, [pc, #304]	; (80048fc <HAL_GPIO_Init+0x30c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d019      	beq.n	8004802 <HAL_GPIO_Init+0x212>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a4b      	ldr	r2, [pc, #300]	; (8004900 <HAL_GPIO_Init+0x310>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d013      	beq.n	80047fe <HAL_GPIO_Init+0x20e>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a4a      	ldr	r2, [pc, #296]	; (8004904 <HAL_GPIO_Init+0x314>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00d      	beq.n	80047fa <HAL_GPIO_Init+0x20a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a49      	ldr	r2, [pc, #292]	; (8004908 <HAL_GPIO_Init+0x318>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d007      	beq.n	80047f6 <HAL_GPIO_Init+0x206>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a48      	ldr	r2, [pc, #288]	; (800490c <HAL_GPIO_Init+0x31c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d101      	bne.n	80047f2 <HAL_GPIO_Init+0x202>
 80047ee:	2306      	movs	r3, #6
 80047f0:	e00c      	b.n	800480c <HAL_GPIO_Init+0x21c>
 80047f2:	2307      	movs	r3, #7
 80047f4:	e00a      	b.n	800480c <HAL_GPIO_Init+0x21c>
 80047f6:	2305      	movs	r3, #5
 80047f8:	e008      	b.n	800480c <HAL_GPIO_Init+0x21c>
 80047fa:	2304      	movs	r3, #4
 80047fc:	e006      	b.n	800480c <HAL_GPIO_Init+0x21c>
 80047fe:	2303      	movs	r3, #3
 8004800:	e004      	b.n	800480c <HAL_GPIO_Init+0x21c>
 8004802:	2302      	movs	r3, #2
 8004804:	e002      	b.n	800480c <HAL_GPIO_Init+0x21c>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <HAL_GPIO_Init+0x21c>
 800480a:	2300      	movs	r3, #0
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	f002 0203 	and.w	r2, r2, #3
 8004812:	0092      	lsls	r2, r2, #2
 8004814:	4093      	lsls	r3, r2
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4313      	orrs	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800481c:	4934      	ldr	r1, [pc, #208]	; (80048f0 <HAL_GPIO_Init+0x300>)
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	089b      	lsrs	r3, r3, #2
 8004822:	3302      	adds	r3, #2
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800482a:	4b39      	ldr	r3, [pc, #228]	; (8004910 <HAL_GPIO_Init+0x320>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	43db      	mvns	r3, r3
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4013      	ands	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800484e:	4a30      	ldr	r2, [pc, #192]	; (8004910 <HAL_GPIO_Init+0x320>)
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004854:	4b2e      	ldr	r3, [pc, #184]	; (8004910 <HAL_GPIO_Init+0x320>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	43db      	mvns	r3, r3
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	4013      	ands	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004878:	4a25      	ldr	r2, [pc, #148]	; (8004910 <HAL_GPIO_Init+0x320>)
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800487e:	4b24      	ldr	r3, [pc, #144]	; (8004910 <HAL_GPIO_Init+0x320>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	43db      	mvns	r3, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048a2:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <HAL_GPIO_Init+0x320>)
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <HAL_GPIO_Init+0x320>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4013      	ands	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048cc:	4a10      	ldr	r2, [pc, #64]	; (8004910 <HAL_GPIO_Init+0x320>)
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	3301      	adds	r3, #1
 80048d6:	61fb      	str	r3, [r7, #28]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	2b0f      	cmp	r3, #15
 80048dc:	f67f ae96 	bls.w	800460c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048e0:	bf00      	nop
 80048e2:	3724      	adds	r7, #36	; 0x24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	40023800 	.word	0x40023800
 80048f0:	40013800 	.word	0x40013800
 80048f4:	40020000 	.word	0x40020000
 80048f8:	40020400 	.word	0x40020400
 80048fc:	40020800 	.word	0x40020800
 8004900:	40020c00 	.word	0x40020c00
 8004904:	40021000 	.word	0x40021000
 8004908:	40021400 	.word	0x40021400
 800490c:	40021800 	.word	0x40021800
 8004910:	40013c00 	.word	0x40013c00

08004914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	807b      	strh	r3, [r7, #2]
 8004920:	4613      	mov	r3, r2
 8004922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004924:	787b      	ldrb	r3, [r7, #1]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800492a:	887a      	ldrh	r2, [r7, #2]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004930:	e003      	b.n	800493a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004932:	887b      	ldrh	r3, [r7, #2]
 8004934:	041a      	lsls	r2, r3, #16
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	619a      	str	r2, [r3, #24]
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004952:	2300      	movs	r3, #0
 8004954:	603b      	str	r3, [r7, #0]
 8004956:	4b20      	ldr	r3, [pc, #128]	; (80049d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	4a1f      	ldr	r2, [pc, #124]	; (80049d8 <HAL_PWREx_EnableOverDrive+0x90>)
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004960:	6413      	str	r3, [r2, #64]	; 0x40
 8004962:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800496e:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <HAL_PWREx_EnableOverDrive+0x94>)
 8004970:	2201      	movs	r2, #1
 8004972:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004974:	f7ff fd2c 	bl	80043d0 <HAL_GetTick>
 8004978:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800497a:	e009      	b.n	8004990 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800497c:	f7ff fd28 	bl	80043d0 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800498a:	d901      	bls.n	8004990 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e01f      	b.n	80049d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004990:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499c:	d1ee      	bne.n	800497c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800499e:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049a0:	2201      	movs	r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049a4:	f7ff fd14 	bl	80043d0 <HAL_GetTick>
 80049a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049aa:	e009      	b.n	80049c0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049ac:	f7ff fd10 	bl	80043d0 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ba:	d901      	bls.n	80049c0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e007      	b.n	80049d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049c0:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <HAL_PWREx_EnableOverDrive+0x98>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049cc:	d1ee      	bne.n	80049ac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40023800 	.word	0x40023800
 80049dc:	420e0040 	.word	0x420e0040
 80049e0:	40007000 	.word	0x40007000
 80049e4:	420e0044 	.word	0x420e0044

080049e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0cc      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049fc:	4b68      	ldr	r3, [pc, #416]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d90c      	bls.n	8004a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0a:	4b65      	ldr	r3, [pc, #404]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a12:	4b63      	ldr	r3, [pc, #396]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0b8      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d020      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a3c:	4b59      	ldr	r3, [pc, #356]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	4a58      	ldr	r2, [pc, #352]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a54:	4b53      	ldr	r3, [pc, #332]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	4a52      	ldr	r2, [pc, #328]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a60:	4b50      	ldr	r3, [pc, #320]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	494d      	ldr	r1, [pc, #308]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d044      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a86:	4b47      	ldr	r3, [pc, #284]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d119      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e07f      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d107      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa6:	4b3f      	ldr	r3, [pc, #252]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e06f      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab6:	4b3b      	ldr	r3, [pc, #236]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e067      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ac6:	4b37      	ldr	r3, [pc, #220]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f023 0203 	bic.w	r2, r3, #3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	4934      	ldr	r1, [pc, #208]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ad8:	f7ff fc7a 	bl	80043d0 <HAL_GetTick>
 8004adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ade:	e00a      	b.n	8004af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae0:	f7ff fc76 	bl	80043d0 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e04f      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af6:	4b2b      	ldr	r3, [pc, #172]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 020c 	and.w	r2, r3, #12
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d1eb      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b08:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d20c      	bcs.n	8004b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	4b22      	ldr	r3, [pc, #136]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1e:	4b20      	ldr	r3, [pc, #128]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e032      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b3c:	4b19      	ldr	r3, [pc, #100]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4916      	ldr	r1, [pc, #88]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b5a:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	490e      	ldr	r1, [pc, #56]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b6e:	f000 fbb1 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 8004b72:	4601      	mov	r1, r0
 8004b74:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b80:	5cd3      	ldrb	r3, [r2, r3]
 8004b82:	fa21 f303 	lsr.w	r3, r1, r3
 8004b86:	4a09      	ldr	r2, [pc, #36]	; (8004bac <HAL_RCC_ClockConfig+0x1c4>)
 8004b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b8a:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fd ff08 	bl	80029a4 <HAL_InitTick>

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40023c00 	.word	0x40023c00
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	08017788 	.word	0x08017788
 8004bac:	20000078 	.word	0x20000078
 8004bb0:	200000f4 	.word	0x200000f4

08004bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb8:	4b03      	ldr	r3, [pc, #12]	; (8004bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bba:	681b      	ldr	r3, [r3, #0]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	20000078 	.word	0x20000078

08004bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bd0:	f7ff fff0 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 8004bd4:	4601      	mov	r1, r0
 8004bd6:	4b05      	ldr	r3, [pc, #20]	; (8004bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	0a9b      	lsrs	r3, r3, #10
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	4a03      	ldr	r2, [pc, #12]	; (8004bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004be2:	5cd3      	ldrb	r3, [r2, r3]
 8004be4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	08017798 	.word	0x08017798

08004bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bf8:	f7ff ffdc 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 8004bfc:	4601      	mov	r1, r0
 8004bfe:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	0b5b      	lsrs	r3, r3, #13
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	4a03      	ldr	r2, [pc, #12]	; (8004c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c0a:	5cd3      	ldrb	r3, [r2, r3]
 8004c0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40023800 	.word	0x40023800
 8004c18:	08017798 	.word	0x08017798

08004c1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	220f      	movs	r2, #15
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c2c:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 0203 	and.w	r2, r3, #3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c44:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c50:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	08db      	lsrs	r3, r3, #3
 8004c56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c5e:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <HAL_RCC_GetClockConfig+0x60>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 020f 	and.w	r2, r3, #15
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40023c00 	.word	0x40023c00

08004c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08c      	sub	sp, #48	; 0x30
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d010      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004cb8:	4b6f      	ldr	r3, [pc, #444]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cbe:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	496c      	ldr	r1, [pc, #432]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d010      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004ce6:	4b64      	ldr	r3, [pc, #400]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cec:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf4:	4960      	ldr	r1, [pc, #384]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004d04:	2301      	movs	r3, #1
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d017      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d14:	4b58      	ldr	r3, [pc, #352]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	4955      	ldr	r1, [pc, #340]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d32:	d101      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004d34:	2301      	movs	r3, #1
 8004d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004d40:	2301      	movs	r3, #1
 8004d42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d017      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d50:	4b49      	ldr	r3, [pc, #292]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5e:	4946      	ldr	r1, [pc, #280]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d6e:	d101      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004d70:	2301      	movs	r3, #1
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 808a 	beq.w	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	4b39      	ldr	r3, [pc, #228]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	4a38      	ldr	r2, [pc, #224]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d9e:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004daa:	4b34      	ldr	r3, [pc, #208]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a33      	ldr	r2, [pc, #204]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004db6:	f7ff fb0b 	bl	80043d0 <HAL_GetTick>
 8004dba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dbe:	f7ff fb07 	bl	80043d0 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e278      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dd0:	4b2a      	ldr	r3, [pc, #168]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0f0      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ddc:	4b26      	ldr	r3, [pc, #152]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d02f      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df4:	6a3a      	ldr	r2, [r7, #32]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d028      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dfa:	4b1f      	ldr	r3, [pc, #124]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e02:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e04:	4b1e      	ldr	r3, [pc, #120]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e0a:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e10:	4a19      	ldr	r2, [pc, #100]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e16:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d114      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e22:	f7ff fad5 	bl	80043d0 <HAL_GetTick>
 8004e26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e28:	e00a      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2a:	f7ff fad1 	bl	80043d0 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e240      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e40:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0ee      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e58:	d114      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004e5a:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e6e:	4902      	ldr	r1, [pc, #8]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	608b      	str	r3, [r1, #8]
 8004e74:	e00c      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004e76:	bf00      	nop
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	40007000 	.word	0x40007000
 8004e80:	42470e40 	.word	0x42470e40
 8004e84:	4b4a      	ldr	r3, [pc, #296]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4a49      	ldr	r2, [pc, #292]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e8e:	6093      	str	r3, [r2, #8]
 8004e90:	4b47      	ldr	r3, [pc, #284]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9c:	4944      	ldr	r1, [pc, #272]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0310 	and.w	r3, r3, #16
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004eb4:	4b3f      	ldr	r3, [pc, #252]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004eb6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004ec4:	4b3a      	ldr	r3, [pc, #232]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed2:	4937      	ldr	r1, [pc, #220]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ee6:	4b32      	ldr	r3, [pc, #200]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eec:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef4:	492e      	ldr	r1, [pc, #184]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d011      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f08:	4b29      	ldr	r3, [pc, #164]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f0e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	4926      	ldr	r1, [pc, #152]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f26:	d101      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004f38:	4b1d      	ldr	r3, [pc, #116]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	491a      	ldr	r1, [pc, #104]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d011      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004f5a:	4b15      	ldr	r3, [pc, #84]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f60:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f68:	4911      	ldr	r1, [pc, #68]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f78:	d101      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d005      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f8c:	f040 80ff 	bne.w	800518e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f90:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f96:	f7ff fa1b 	bl	80043d0 <HAL_GetTick>
 8004f9a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f9c:	e00e      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f9e:	f7ff fa17 	bl	80043d0 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d907      	bls.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e188      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	424711e0 	.word	0x424711e0
 8004fb8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fbc:	4b7e      	ldr	r3, [pc, #504]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1ea      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d009      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d028      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d124      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004ff0:	4b71      	ldr	r3, [pc, #452]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff6:	0c1b      	lsrs	r3, r3, #16
 8004ff8:	f003 0303 	and.w	r3, r3, #3
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005002:	4b6d      	ldr	r3, [pc, #436]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005008:	0e1b      	lsrs	r3, r3, #24
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	019b      	lsls	r3, r3, #6
 800501a:	431a      	orrs	r2, r3
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	3b01      	subs	r3, #1
 8005022:	041b      	lsls	r3, r3, #16
 8005024:	431a      	orrs	r2, r3
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	061b      	lsls	r3, r3, #24
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	071b      	lsls	r3, r3, #28
 8005032:	4961      	ldr	r1, [pc, #388]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	d004      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800504e:	d00a      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005058:	2b00      	cmp	r3, #0
 800505a:	d035      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005064:	d130      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005066:	4b54      	ldr	r3, [pc, #336]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800506c:	0c1b      	lsrs	r3, r3, #16
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	3301      	adds	r3, #1
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005078:	4b4f      	ldr	r3, [pc, #316]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800507a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800507e:	0f1b      	lsrs	r3, r3, #28
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	019b      	lsls	r3, r3, #6
 8005090:	431a      	orrs	r2, r3
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	085b      	lsrs	r3, r3, #1
 8005096:	3b01      	subs	r3, #1
 8005098:	041b      	lsls	r3, r3, #16
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	061b      	lsls	r3, r3, #24
 80050a2:	431a      	orrs	r2, r3
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	071b      	lsls	r3, r3, #28
 80050a8:	4943      	ldr	r1, [pc, #268]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050b0:	4b41      	ldr	r3, [pc, #260]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050b6:	f023 021f 	bic.w	r2, r3, #31
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	3b01      	subs	r3, #1
 80050c0:	493d      	ldr	r1, [pc, #244]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d029      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050dc:	d124      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80050de:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e4:	0c1b      	lsrs	r3, r3, #16
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	3301      	adds	r3, #1
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050f0:	4b31      	ldr	r3, [pc, #196]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f6:	0f1b      	lsrs	r3, r3, #28
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	019b      	lsls	r3, r3, #6
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	085b      	lsrs	r3, r3, #1
 8005110:	3b01      	subs	r3, #1
 8005112:	041b      	lsls	r3, r3, #16
 8005114:	431a      	orrs	r2, r3
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	061b      	lsls	r3, r3, #24
 800511a:	431a      	orrs	r2, r3
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	071b      	lsls	r3, r3, #28
 8005120:	4925      	ldr	r1, [pc, #148]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005130:	2b00      	cmp	r3, #0
 8005132:	d016      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	019b      	lsls	r3, r3, #6
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	085b      	lsrs	r3, r3, #1
 8005146:	3b01      	subs	r3, #1
 8005148:	041b      	lsls	r3, r3, #16
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	061b      	lsls	r3, r3, #24
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	071b      	lsls	r3, r3, #28
 800515a:	4917      	ldr	r1, [pc, #92]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005162:	4b16      	ldr	r3, [pc, #88]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005168:	f7ff f932 	bl	80043d0 <HAL_GetTick>
 800516c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800516e:	e008      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005170:	f7ff f92e 	bl	80043d0 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d901      	bls.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e09f      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005182:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f0      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	2b01      	cmp	r3, #1
 8005192:	f040 8095 	bne.w	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005196:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800519c:	f7ff f918 	bl	80043d0 <HAL_GetTick>
 80051a0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051a2:	e00f      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80051a4:	f7ff f914 	bl	80043d0 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d908      	bls.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e085      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80051b6:	bf00      	nop
 80051b8:	40023800 	.word	0x40023800
 80051bc:	42470068 	.word	0x42470068
 80051c0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051c4:	4b41      	ldr	r3, [pc, #260]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d0:	d0e8      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d02b      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d127      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80051fa:	4b34      	ldr	r3, [pc, #208]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005200:	0c1b      	lsrs	r3, r3, #16
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	3301      	adds	r3, #1
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699a      	ldr	r2, [r3, #24]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	019b      	lsls	r3, r3, #6
 8005216:	431a      	orrs	r2, r3
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	085b      	lsrs	r3, r3, #1
 800521c:	3b01      	subs	r3, #1
 800521e:	041b      	lsls	r3, r3, #16
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	061b      	lsls	r3, r3, #24
 8005228:	4928      	ldr	r1, [pc, #160]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005230:	4b26      	ldr	r3, [pc, #152]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005236:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	3b01      	subs	r3, #1
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	4922      	ldr	r1, [pc, #136]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005252:	2b00      	cmp	r3, #0
 8005254:	d01d      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800525e:	d118      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005260:	4b1a      	ldr	r3, [pc, #104]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005266:	0e1b      	lsrs	r3, r3, #24
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699a      	ldr	r2, [r3, #24]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	019b      	lsls	r3, r3, #6
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	085b      	lsrs	r3, r3, #1
 8005280:	3b01      	subs	r3, #1
 8005282:	041b      	lsls	r3, r3, #16
 8005284:	431a      	orrs	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	061b      	lsls	r3, r3, #24
 800528a:	4910      	ldr	r1, [pc, #64]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005292:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005294:	2201      	movs	r2, #1
 8005296:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005298:	f7ff f89a 	bl	80043d0 <HAL_GetTick>
 800529c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80052a0:	f7ff f896 	bl	80043d0 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e007      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052b2:	4b06      	ldr	r3, [pc, #24]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052be:	d1ef      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3730      	adds	r7, #48	; 0x30
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40023800 	.word	0x40023800
 80052d0:	42470070 	.word	0x42470070

080052d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052ee:	4bc6      	ldr	r3, [pc, #792]	; (8005608 <HAL_RCC_GetSysClockFreq+0x334>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	2b0c      	cmp	r3, #12
 80052f8:	f200 817e 	bhi.w	80055f8 <HAL_RCC_GetSysClockFreq+0x324>
 80052fc:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <HAL_RCC_GetSysClockFreq+0x30>)
 80052fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005302:	bf00      	nop
 8005304:	08005339 	.word	0x08005339
 8005308:	080055f9 	.word	0x080055f9
 800530c:	080055f9 	.word	0x080055f9
 8005310:	080055f9 	.word	0x080055f9
 8005314:	0800533f 	.word	0x0800533f
 8005318:	080055f9 	.word	0x080055f9
 800531c:	080055f9 	.word	0x080055f9
 8005320:	080055f9 	.word	0x080055f9
 8005324:	08005345 	.word	0x08005345
 8005328:	080055f9 	.word	0x080055f9
 800532c:	080055f9 	.word	0x080055f9
 8005330:	080055f9 	.word	0x080055f9
 8005334:	080054a1 	.word	0x080054a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005338:	4bb4      	ldr	r3, [pc, #720]	; (800560c <HAL_RCC_GetSysClockFreq+0x338>)
 800533a:	613b      	str	r3, [r7, #16]
       break;
 800533c:	e15f      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800533e:	4bb4      	ldr	r3, [pc, #720]	; (8005610 <HAL_RCC_GetSysClockFreq+0x33c>)
 8005340:	613b      	str	r3, [r7, #16]
      break;
 8005342:	e15c      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005344:	4bb0      	ldr	r3, [pc, #704]	; (8005608 <HAL_RCC_GetSysClockFreq+0x334>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800534c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800534e:	4bae      	ldr	r3, [pc, #696]	; (8005608 <HAL_RCC_GetSysClockFreq+0x334>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d04a      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800535a:	4bab      	ldr	r3, [pc, #684]	; (8005608 <HAL_RCC_GetSysClockFreq+0x334>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	099b      	lsrs	r3, r3, #6
 8005360:	f04f 0400 	mov.w	r4, #0
 8005364:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	ea03 0501 	and.w	r5, r3, r1
 8005370:	ea04 0602 	and.w	r6, r4, r2
 8005374:	4629      	mov	r1, r5
 8005376:	4632      	mov	r2, r6
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	f04f 0400 	mov.w	r4, #0
 8005380:	0154      	lsls	r4, r2, #5
 8005382:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005386:	014b      	lsls	r3, r1, #5
 8005388:	4619      	mov	r1, r3
 800538a:	4622      	mov	r2, r4
 800538c:	1b49      	subs	r1, r1, r5
 800538e:	eb62 0206 	sbc.w	r2, r2, r6
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	f04f 0400 	mov.w	r4, #0
 800539a:	0194      	lsls	r4, r2, #6
 800539c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053a0:	018b      	lsls	r3, r1, #6
 80053a2:	1a5b      	subs	r3, r3, r1
 80053a4:	eb64 0402 	sbc.w	r4, r4, r2
 80053a8:	f04f 0100 	mov.w	r1, #0
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	00e2      	lsls	r2, r4, #3
 80053b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053b6:	00d9      	lsls	r1, r3, #3
 80053b8:	460b      	mov	r3, r1
 80053ba:	4614      	mov	r4, r2
 80053bc:	195b      	adds	r3, r3, r5
 80053be:	eb44 0406 	adc.w	r4, r4, r6
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	0262      	lsls	r2, r4, #9
 80053cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80053d0:	0259      	lsls	r1, r3, #9
 80053d2:	460b      	mov	r3, r1
 80053d4:	4614      	mov	r4, r2
 80053d6:	4618      	mov	r0, r3
 80053d8:	4621      	mov	r1, r4
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f04f 0400 	mov.w	r4, #0
 80053e0:	461a      	mov	r2, r3
 80053e2:	4623      	mov	r3, r4
 80053e4:	f7fb fc00 	bl	8000be8 <__aeabi_uldivmod>
 80053e8:	4603      	mov	r3, r0
 80053ea:	460c      	mov	r4, r1
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	e049      	b.n	8005484 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f0:	4b85      	ldr	r3, [pc, #532]	; (8005608 <HAL_RCC_GetSysClockFreq+0x334>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	099b      	lsrs	r3, r3, #6
 80053f6:	f04f 0400 	mov.w	r4, #0
 80053fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	ea03 0501 	and.w	r5, r3, r1
 8005406:	ea04 0602 	and.w	r6, r4, r2
 800540a:	4629      	mov	r1, r5
 800540c:	4632      	mov	r2, r6
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	f04f 0400 	mov.w	r4, #0
 8005416:	0154      	lsls	r4, r2, #5
 8005418:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800541c:	014b      	lsls	r3, r1, #5
 800541e:	4619      	mov	r1, r3
 8005420:	4622      	mov	r2, r4
 8005422:	1b49      	subs	r1, r1, r5
 8005424:	eb62 0206 	sbc.w	r2, r2, r6
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	f04f 0400 	mov.w	r4, #0
 8005430:	0194      	lsls	r4, r2, #6
 8005432:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005436:	018b      	lsls	r3, r1, #6
 8005438:	1a5b      	subs	r3, r3, r1
 800543a:	eb64 0402 	sbc.w	r4, r4, r2
 800543e:	f04f 0100 	mov.w	r1, #0
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	00e2      	lsls	r2, r4, #3
 8005448:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800544c:	00d9      	lsls	r1, r3, #3
 800544e:	460b      	mov	r3, r1
 8005450:	4614      	mov	r4, r2
 8005452:	195b      	adds	r3, r3, r5
 8005454:	eb44 0406 	adc.w	r4, r4, r6
 8005458:	f04f 0100 	mov.w	r1, #0
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	02a2      	lsls	r2, r4, #10
 8005462:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005466:	0299      	lsls	r1, r3, #10
 8005468:	460b      	mov	r3, r1
 800546a:	4614      	mov	r4, r2
 800546c:	4618      	mov	r0, r3
 800546e:	4621      	mov	r1, r4
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f04f 0400 	mov.w	r4, #0
 8005476:	461a      	mov	r2, r3
 8005478:	4623      	mov	r3, r4
 800547a:	f7fb fbb5 	bl	8000be8 <__aeabi_uldivmod>
 800547e:	4603      	mov	r3, r0
 8005480:	460c      	mov	r4, r1
 8005482:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005484:	4b60      	ldr	r3, [pc, #384]	; (8005608 <HAL_RCC_GetSysClockFreq+0x334>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	0c1b      	lsrs	r3, r3, #16
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	3301      	adds	r3, #1
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	fbb2 f3f3 	udiv	r3, r2, r3
 800549c:	613b      	str	r3, [r7, #16]
      break;
 800549e:	e0ae      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054a0:	4b59      	ldr	r3, [pc, #356]	; (8005608 <HAL_RCC_GetSysClockFreq+0x334>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054a8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054aa:	4b57      	ldr	r3, [pc, #348]	; (8005608 <HAL_RCC_GetSysClockFreq+0x334>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d04a      	beq.n	800554c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054b6:	4b54      	ldr	r3, [pc, #336]	; (8005608 <HAL_RCC_GetSysClockFreq+0x334>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	099b      	lsrs	r3, r3, #6
 80054bc:	f04f 0400 	mov.w	r4, #0
 80054c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	ea03 0501 	and.w	r5, r3, r1
 80054cc:	ea04 0602 	and.w	r6, r4, r2
 80054d0:	4629      	mov	r1, r5
 80054d2:	4632      	mov	r2, r6
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	f04f 0400 	mov.w	r4, #0
 80054dc:	0154      	lsls	r4, r2, #5
 80054de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80054e2:	014b      	lsls	r3, r1, #5
 80054e4:	4619      	mov	r1, r3
 80054e6:	4622      	mov	r2, r4
 80054e8:	1b49      	subs	r1, r1, r5
 80054ea:	eb62 0206 	sbc.w	r2, r2, r6
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	f04f 0400 	mov.w	r4, #0
 80054f6:	0194      	lsls	r4, r2, #6
 80054f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80054fc:	018b      	lsls	r3, r1, #6
 80054fe:	1a5b      	subs	r3, r3, r1
 8005500:	eb64 0402 	sbc.w	r4, r4, r2
 8005504:	f04f 0100 	mov.w	r1, #0
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	00e2      	lsls	r2, r4, #3
 800550e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005512:	00d9      	lsls	r1, r3, #3
 8005514:	460b      	mov	r3, r1
 8005516:	4614      	mov	r4, r2
 8005518:	195b      	adds	r3, r3, r5
 800551a:	eb44 0406 	adc.w	r4, r4, r6
 800551e:	f04f 0100 	mov.w	r1, #0
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	0262      	lsls	r2, r4, #9
 8005528:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800552c:	0259      	lsls	r1, r3, #9
 800552e:	460b      	mov	r3, r1
 8005530:	4614      	mov	r4, r2
 8005532:	4618      	mov	r0, r3
 8005534:	4621      	mov	r1, r4
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f04f 0400 	mov.w	r4, #0
 800553c:	461a      	mov	r2, r3
 800553e:	4623      	mov	r3, r4
 8005540:	f7fb fb52 	bl	8000be8 <__aeabi_uldivmod>
 8005544:	4603      	mov	r3, r0
 8005546:	460c      	mov	r4, r1
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	e049      	b.n	80055e0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800554c:	4b2e      	ldr	r3, [pc, #184]	; (8005608 <HAL_RCC_GetSysClockFreq+0x334>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	099b      	lsrs	r3, r3, #6
 8005552:	f04f 0400 	mov.w	r4, #0
 8005556:	f240 11ff 	movw	r1, #511	; 0x1ff
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	ea03 0501 	and.w	r5, r3, r1
 8005562:	ea04 0602 	and.w	r6, r4, r2
 8005566:	4629      	mov	r1, r5
 8005568:	4632      	mov	r2, r6
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	f04f 0400 	mov.w	r4, #0
 8005572:	0154      	lsls	r4, r2, #5
 8005574:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005578:	014b      	lsls	r3, r1, #5
 800557a:	4619      	mov	r1, r3
 800557c:	4622      	mov	r2, r4
 800557e:	1b49      	subs	r1, r1, r5
 8005580:	eb62 0206 	sbc.w	r2, r2, r6
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	f04f 0400 	mov.w	r4, #0
 800558c:	0194      	lsls	r4, r2, #6
 800558e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005592:	018b      	lsls	r3, r1, #6
 8005594:	1a5b      	subs	r3, r3, r1
 8005596:	eb64 0402 	sbc.w	r4, r4, r2
 800559a:	f04f 0100 	mov.w	r1, #0
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	00e2      	lsls	r2, r4, #3
 80055a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80055a8:	00d9      	lsls	r1, r3, #3
 80055aa:	460b      	mov	r3, r1
 80055ac:	4614      	mov	r4, r2
 80055ae:	195b      	adds	r3, r3, r5
 80055b0:	eb44 0406 	adc.w	r4, r4, r6
 80055b4:	f04f 0100 	mov.w	r1, #0
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	02a2      	lsls	r2, r4, #10
 80055be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80055c2:	0299      	lsls	r1, r3, #10
 80055c4:	460b      	mov	r3, r1
 80055c6:	4614      	mov	r4, r2
 80055c8:	4618      	mov	r0, r3
 80055ca:	4621      	mov	r1, r4
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f04f 0400 	mov.w	r4, #0
 80055d2:	461a      	mov	r2, r3
 80055d4:	4623      	mov	r3, r4
 80055d6:	f7fb fb07 	bl	8000be8 <__aeabi_uldivmod>
 80055da:	4603      	mov	r3, r0
 80055dc:	460c      	mov	r4, r1
 80055de:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80055e0:	4b09      	ldr	r3, [pc, #36]	; (8005608 <HAL_RCC_GetSysClockFreq+0x334>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	0f1b      	lsrs	r3, r3, #28
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f4:	613b      	str	r3, [r7, #16]
      break;
 80055f6:	e002      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055f8:	4b04      	ldr	r3, [pc, #16]	; (800560c <HAL_RCC_GetSysClockFreq+0x338>)
 80055fa:	613b      	str	r3, [r7, #16]
      break;
 80055fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055fe:	693b      	ldr	r3, [r7, #16]
}
 8005600:	4618      	mov	r0, r3
 8005602:	371c      	adds	r7, #28
 8005604:	46bd      	mov	sp, r7
 8005606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005608:	40023800 	.word	0x40023800
 800560c:	00f42400 	.word	0x00f42400
 8005610:	007a1200 	.word	0x007a1200

08005614 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8083 	beq.w	8005734 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800562e:	4b95      	ldr	r3, [pc, #596]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 030c 	and.w	r3, r3, #12
 8005636:	2b04      	cmp	r3, #4
 8005638:	d019      	beq.n	800566e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800563a:	4b92      	ldr	r3, [pc, #584]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005642:	2b08      	cmp	r3, #8
 8005644:	d106      	bne.n	8005654 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005646:	4b8f      	ldr	r3, [pc, #572]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800564e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005652:	d00c      	beq.n	800566e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005654:	4b8b      	ldr	r3, [pc, #556]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800565c:	2b0c      	cmp	r3, #12
 800565e:	d112      	bne.n	8005686 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005660:	4b88      	ldr	r3, [pc, #544]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800566c:	d10b      	bne.n	8005686 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800566e:	4b85      	ldr	r3, [pc, #532]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d05b      	beq.n	8005732 <HAL_RCC_OscConfig+0x11e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d157      	bne.n	8005732 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e216      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800568e:	d106      	bne.n	800569e <HAL_RCC_OscConfig+0x8a>
 8005690:	4b7c      	ldr	r3, [pc, #496]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a7b      	ldr	r2, [pc, #492]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 8005696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	e01d      	b.n	80056da <HAL_RCC_OscConfig+0xc6>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056a6:	d10c      	bne.n	80056c2 <HAL_RCC_OscConfig+0xae>
 80056a8:	4b76      	ldr	r3, [pc, #472]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a75      	ldr	r2, [pc, #468]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 80056ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	4b73      	ldr	r3, [pc, #460]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a72      	ldr	r2, [pc, #456]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 80056ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	e00b      	b.n	80056da <HAL_RCC_OscConfig+0xc6>
 80056c2:	4b70      	ldr	r3, [pc, #448]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a6f      	ldr	r2, [pc, #444]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 80056c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	4b6d      	ldr	r3, [pc, #436]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a6c      	ldr	r2, [pc, #432]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 80056d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d013      	beq.n	800570a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e2:	f7fe fe75 	bl	80043d0 <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ea:	f7fe fe71 	bl	80043d0 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b64      	cmp	r3, #100	; 0x64
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e1db      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fc:	4b61      	ldr	r3, [pc, #388]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f0      	beq.n	80056ea <HAL_RCC_OscConfig+0xd6>
 8005708:	e014      	b.n	8005734 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570a:	f7fe fe61 	bl	80043d0 <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005712:	f7fe fe5d 	bl	80043d0 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b64      	cmp	r3, #100	; 0x64
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e1c7      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005724:	4b57      	ldr	r3, [pc, #348]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f0      	bne.n	8005712 <HAL_RCC_OscConfig+0xfe>
 8005730:	e000      	b.n	8005734 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005732:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d06f      	beq.n	8005820 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005740:	4b50      	ldr	r3, [pc, #320]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 030c 	and.w	r3, r3, #12
 8005748:	2b00      	cmp	r3, #0
 800574a:	d017      	beq.n	800577c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800574c:	4b4d      	ldr	r3, [pc, #308]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005754:	2b08      	cmp	r3, #8
 8005756:	d105      	bne.n	8005764 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005758:	4b4a      	ldr	r3, [pc, #296]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00b      	beq.n	800577c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005764:	4b47      	ldr	r3, [pc, #284]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800576c:	2b0c      	cmp	r3, #12
 800576e:	d11c      	bne.n	80057aa <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005770:	4b44      	ldr	r3, [pc, #272]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d116      	bne.n	80057aa <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800577c:	4b41      	ldr	r3, [pc, #260]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d005      	beq.n	8005794 <HAL_RCC_OscConfig+0x180>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d001      	beq.n	8005794 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e18f      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005794:	4b3b      	ldr	r3, [pc, #236]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	4938      	ldr	r1, [pc, #224]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057a8:	e03a      	b.n	8005820 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d020      	beq.n	80057f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057b2:	4b35      	ldr	r3, [pc, #212]	; (8005888 <HAL_RCC_OscConfig+0x274>)
 80057b4:	2201      	movs	r2, #1
 80057b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b8:	f7fe fe0a 	bl	80043d0 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057c0:	f7fe fe06 	bl	80043d0 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e170      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d2:	4b2c      	ldr	r3, [pc, #176]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0f0      	beq.n	80057c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057de:	4b29      	ldr	r3, [pc, #164]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4925      	ldr	r1, [pc, #148]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	600b      	str	r3, [r1, #0]
 80057f2:	e015      	b.n	8005820 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057f4:	4b24      	ldr	r3, [pc, #144]	; (8005888 <HAL_RCC_OscConfig+0x274>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fa:	f7fe fde9 	bl	80043d0 <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005800:	e008      	b.n	8005814 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005802:	f7fe fde5 	bl	80043d0 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e14f      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005814:	4b1b      	ldr	r3, [pc, #108]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1f0      	bne.n	8005802 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b00      	cmp	r3, #0
 800582a:	d037      	beq.n	800589c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d016      	beq.n	8005862 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005834:	4b15      	ldr	r3, [pc, #84]	; (800588c <HAL_RCC_OscConfig+0x278>)
 8005836:	2201      	movs	r2, #1
 8005838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583a:	f7fe fdc9 	bl	80043d0 <HAL_GetTick>
 800583e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005840:	e008      	b.n	8005854 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005842:	f7fe fdc5 	bl	80043d0 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e12f      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005854:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <HAL_RCC_OscConfig+0x270>)
 8005856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0f0      	beq.n	8005842 <HAL_RCC_OscConfig+0x22e>
 8005860:	e01c      	b.n	800589c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005862:	4b0a      	ldr	r3, [pc, #40]	; (800588c <HAL_RCC_OscConfig+0x278>)
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005868:	f7fe fdb2 	bl	80043d0 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800586e:	e00f      	b.n	8005890 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005870:	f7fe fdae 	bl	80043d0 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d908      	bls.n	8005890 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e118      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4a0>
 8005882:	bf00      	nop
 8005884:	40023800 	.word	0x40023800
 8005888:	42470000 	.word	0x42470000
 800588c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005890:	4b8a      	ldr	r3, [pc, #552]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 8005892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e9      	bne.n	8005870 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 8097 	beq.w	80059d8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058aa:	2300      	movs	r3, #0
 80058ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ae:	4b83      	ldr	r3, [pc, #524]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10f      	bne.n	80058da <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	4b7f      	ldr	r3, [pc, #508]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	4a7e      	ldr	r2, [pc, #504]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 80058c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c8:	6413      	str	r3, [r2, #64]	; 0x40
 80058ca:	4b7c      	ldr	r3, [pc, #496]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80058d6:	2301      	movs	r3, #1
 80058d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058da:	4b79      	ldr	r3, [pc, #484]	; (8005ac0 <HAL_RCC_OscConfig+0x4ac>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d118      	bne.n	8005918 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058e6:	4b76      	ldr	r3, [pc, #472]	; (8005ac0 <HAL_RCC_OscConfig+0x4ac>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a75      	ldr	r2, [pc, #468]	; (8005ac0 <HAL_RCC_OscConfig+0x4ac>)
 80058ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058f2:	f7fe fd6d 	bl	80043d0 <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f8:	e008      	b.n	800590c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058fa:	f7fe fd69 	bl	80043d0 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e0d3      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800590c:	4b6c      	ldr	r3, [pc, #432]	; (8005ac0 <HAL_RCC_OscConfig+0x4ac>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0f0      	beq.n	80058fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d106      	bne.n	800592e <HAL_RCC_OscConfig+0x31a>
 8005920:	4b66      	ldr	r3, [pc, #408]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 8005922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005924:	4a65      	ldr	r2, [pc, #404]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 8005926:	f043 0301 	orr.w	r3, r3, #1
 800592a:	6713      	str	r3, [r2, #112]	; 0x70
 800592c:	e01c      	b.n	8005968 <HAL_RCC_OscConfig+0x354>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	2b05      	cmp	r3, #5
 8005934:	d10c      	bne.n	8005950 <HAL_RCC_OscConfig+0x33c>
 8005936:	4b61      	ldr	r3, [pc, #388]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 8005938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593a:	4a60      	ldr	r2, [pc, #384]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 800593c:	f043 0304 	orr.w	r3, r3, #4
 8005940:	6713      	str	r3, [r2, #112]	; 0x70
 8005942:	4b5e      	ldr	r3, [pc, #376]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	4a5d      	ldr	r2, [pc, #372]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 8005948:	f043 0301 	orr.w	r3, r3, #1
 800594c:	6713      	str	r3, [r2, #112]	; 0x70
 800594e:	e00b      	b.n	8005968 <HAL_RCC_OscConfig+0x354>
 8005950:	4b5a      	ldr	r3, [pc, #360]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 8005952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005954:	4a59      	ldr	r2, [pc, #356]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 8005956:	f023 0301 	bic.w	r3, r3, #1
 800595a:	6713      	str	r3, [r2, #112]	; 0x70
 800595c:	4b57      	ldr	r3, [pc, #348]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 800595e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005960:	4a56      	ldr	r2, [pc, #344]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 8005962:	f023 0304 	bic.w	r3, r3, #4
 8005966:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d015      	beq.n	800599c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005970:	f7fe fd2e 	bl	80043d0 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005976:	e00a      	b.n	800598e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005978:	f7fe fd2a 	bl	80043d0 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	f241 3288 	movw	r2, #5000	; 0x1388
 8005986:	4293      	cmp	r3, r2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e092      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800598e:	4b4b      	ldr	r3, [pc, #300]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 8005990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0ee      	beq.n	8005978 <HAL_RCC_OscConfig+0x364>
 800599a:	e014      	b.n	80059c6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800599c:	f7fe fd18 	bl	80043d0 <HAL_GetTick>
 80059a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059a2:	e00a      	b.n	80059ba <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059a4:	f7fe fd14 	bl	80043d0 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e07c      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ba:	4b40      	ldr	r3, [pc, #256]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 80059bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1ee      	bne.n	80059a4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059c6:	7dfb      	ldrb	r3, [r7, #23]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d105      	bne.n	80059d8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059cc:	4b3b      	ldr	r3, [pc, #236]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	4a3a      	ldr	r2, [pc, #232]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 80059d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d068      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059e0:	4b36      	ldr	r3, [pc, #216]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f003 030c 	and.w	r3, r3, #12
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d060      	beq.n	8005aae <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d145      	bne.n	8005a80 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f4:	4b33      	ldr	r3, [pc, #204]	; (8005ac4 <HAL_RCC_OscConfig+0x4b0>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fa:	f7fe fce9 	bl	80043d0 <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a02:	f7fe fce5 	bl	80043d0 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e04f      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a14:	4b29      	ldr	r3, [pc, #164]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1f0      	bne.n	8005a02 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	019b      	lsls	r3, r3, #6
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a36:	085b      	lsrs	r3, r3, #1
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	041b      	lsls	r3, r3, #16
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	061b      	lsls	r3, r3, #24
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	071b      	lsls	r3, r3, #28
 8005a4c:	491b      	ldr	r1, [pc, #108]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a52:	4b1c      	ldr	r3, [pc, #112]	; (8005ac4 <HAL_RCC_OscConfig+0x4b0>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a58:	f7fe fcba 	bl	80043d0 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a60:	f7fe fcb6 	bl	80043d0 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e020      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a72:	4b12      	ldr	r3, [pc, #72]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0f0      	beq.n	8005a60 <HAL_RCC_OscConfig+0x44c>
 8005a7e:	e018      	b.n	8005ab2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a80:	4b10      	ldr	r3, [pc, #64]	; (8005ac4 <HAL_RCC_OscConfig+0x4b0>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a86:	f7fe fca3 	bl	80043d0 <HAL_GetTick>
 8005a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a8e:	f7fe fc9f 	bl	80043d0 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e009      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aa0:	4b06      	ldr	r3, [pc, #24]	; (8005abc <HAL_RCC_OscConfig+0x4a8>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1f0      	bne.n	8005a8e <HAL_RCC_OscConfig+0x47a>
 8005aac:	e001      	b.n	8005ab2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	40007000 	.word	0x40007000
 8005ac4:	42470060 	.word	0x42470060

08005ac8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e083      	b.n	8005be2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	7f5b      	ldrb	r3, [r3, #29]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d105      	bne.n	8005af0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fc fdc6 	bl	800267c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	22ca      	movs	r2, #202	; 0xca
 8005afc:	625a      	str	r2, [r3, #36]	; 0x24
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2253      	movs	r2, #83	; 0x53
 8005b04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f897 	bl	8005c3a <RTC_EnterInitMode>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d008      	beq.n	8005b24 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	22ff      	movs	r2, #255	; 0xff
 8005b18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2204      	movs	r2, #4
 8005b1e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e05e      	b.n	8005be2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6812      	ldr	r2, [r2, #0]
 8005b2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b36:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6899      	ldr	r1, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	68d2      	ldr	r2, [r2, #12]
 8005b5e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6919      	ldr	r1, [r3, #16]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	041a      	lsls	r2, r3, #16
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b82:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10e      	bne.n	8005bb0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f829 	bl	8005bea <HAL_RTC_WaitForSynchro>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d008      	beq.n	8005bb0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	22ff      	movs	r2, #255	; 0xff
 8005ba4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e018      	b.n	8005be2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	22ff      	movs	r2, #255	; 0xff
 8005bd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005be0:	2300      	movs	r3, #0
  }
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c04:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c06:	f7fe fbe3 	bl	80043d0 <HAL_GetTick>
 8005c0a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005c0c:	e009      	b.n	8005c22 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c0e:	f7fe fbdf 	bl	80043d0 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c1c:	d901      	bls.n	8005c22 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e007      	b.n	8005c32 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0ee      	beq.n	8005c0e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d119      	bne.n	8005c88 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c5e:	f7fe fbb7 	bl	80043d0 <HAL_GetTick>
 8005c62:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005c64:	e009      	b.n	8005c7a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c66:	f7fe fbb3 	bl	80043d0 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c74:	d901      	bls.n	8005c7a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e007      	b.n	8005c8a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0ee      	beq.n	8005c66 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e022      	b.n	8005cea <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d105      	bne.n	8005cbc <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fc fcf6 	bl	80026a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f815 	bl	8005cf4 <HAL_SD_InitCard>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e00a      	b.n	8005cea <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005cf4:	b5b0      	push	{r4, r5, r7, lr}
 8005cf6:	b08e      	sub	sp, #56	; 0x38
 8005cf8:	af04      	add	r7, sp, #16
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005d10:	2376      	movs	r3, #118	; 0x76
 8005d12:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681d      	ldr	r5, [r3, #0]
 8005d18:	466c      	mov	r4, sp
 8005d1a:	f107 0314 	add.w	r3, r7, #20
 8005d1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d26:	f107 0308 	add.w	r3, r7, #8
 8005d2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	f001 fdb9 	bl	80078a4 <SDIO_Init>
 8005d32:	4603      	mov	r3, r0
 8005d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e031      	b.n	8005da8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005d44:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <HAL_SD_InitCard+0xbc>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 fdf1 	bl	8007936 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005d54:	4b16      	ldr	r3, [pc, #88]	; (8005db0 <HAL_SD_InitCard+0xbc>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fe80 	bl	8006a60 <SD_PowerON>
 8005d60:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00b      	beq.n	8005d80 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e013      	b.n	8005da8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fd9f 	bl	80068c4 <SD_InitCard>
 8005d86:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00b      	beq.n	8005da6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e000      	b.n	8005da8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3728      	adds	r7, #40	; 0x28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bdb0      	pop	{r4, r5, r7, pc}
 8005db0:	422580a0 	.word	0x422580a0

08005db4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b092      	sub	sp, #72	; 0x48
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005dc2:	f7fe fb05 	bl	80043d0 <HAL_GetTick>
 8005dc6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d107      	bne.n	8005de6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e1d7      	b.n	8006196 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	f040 81ca 	bne.w	8006188 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	441a      	add	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d907      	bls.n	8005e18 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e1be      	b.n	8006196 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2203      	movs	r2, #3
 8005e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2200      	movs	r2, #0
 8005e26:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d002      	beq.n	8005e36 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e32:	025b      	lsls	r3, r3, #9
 8005e34:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f001 fe0c 	bl	8007a5c <SDMMC_CmdBlockLength>
 8005e44:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00f      	beq.n	8005e6c <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a9a      	ldr	r2, [pc, #616]	; (80060bc <HAL_SD_ReadBlocks+0x308>)
 8005e52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e194      	b.n	8006196 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e70:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	025b      	lsls	r3, r3, #9
 8005e76:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005e78:	2390      	movs	r3, #144	; 0x90
 8005e7a:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005e84:	2301      	movs	r3, #1
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f107 0214 	add.w	r2, r7, #20
 8005e90:	4611      	mov	r1, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f001 fdb6 	bl	8007a04 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d90a      	bls.n	8005eb4 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 fe1a 	bl	8007ae4 <SDMMC_CmdReadMultiBlock>
 8005eb0:	6478      	str	r0, [r7, #68]	; 0x44
 8005eb2:	e009      	b.n	8005ec8 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 fded 	bl	8007aa0 <SDMMC_CmdReadSingleBlock>
 8005ec6:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d012      	beq.n	8005ef4 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a7a      	ldr	r2, [pc, #488]	; (80060bc <HAL_SD_ReadBlocks+0x308>)
 8005ed4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005edc:	431a      	orrs	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e150      	b.n	8006196 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005ef8:	e061      	b.n	8005fbe <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d03c      	beq.n	8005f82 <HAL_SD_ReadBlocks+0x1ce>
 8005f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d039      	beq.n	8005f82 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005f0e:	2300      	movs	r3, #0
 8005f10:	643b      	str	r3, [r7, #64]	; 0x40
 8005f12:	e033      	b.n	8005f7c <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f001 fcee 	bl	80078fa <SDIO_ReadFIFO>
 8005f1e:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f26:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f30:	3b01      	subs	r3, #1
 8005f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	0a1b      	lsrs	r3, r3, #8
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f40:	3301      	adds	r3, #1
 8005f42:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f46:	3b01      	subs	r3, #1
 8005f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	0c1b      	lsrs	r3, r3, #16
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f52:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f56:	3301      	adds	r3, #1
 8005f58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f62:	0e1b      	lsrs	r3, r3, #24
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f72:	3b01      	subs	r3, #1
 8005f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f78:	3301      	adds	r3, #1
 8005f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f7e:	2b07      	cmp	r3, #7
 8005f80:	d9c8      	bls.n	8005f14 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005f82:	f7fe fa25 	bl	80043d0 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d902      	bls.n	8005f98 <HAL_SD_ReadBlocks+0x1e4>
 8005f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d112      	bne.n	8005fbe <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a47      	ldr	r2, [pc, #284]	; (80060bc <HAL_SD_ReadBlocks+0x308>)
 8005f9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e0eb      	b.n	8006196 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d096      	beq.n	8005efa <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d022      	beq.n	8006020 <HAL_SD_ReadBlocks+0x26c>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d91f      	bls.n	8006020 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d01b      	beq.n	8006020 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f001 fddf 	bl	8007bb0 <SDMMC_CmdStopTransfer>
 8005ff2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d012      	beq.n	8006020 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a2f      	ldr	r2, [pc, #188]	; (80060bc <HAL_SD_ReadBlocks+0x308>)
 8006000:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006008:	431a      	orrs	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e0ba      	b.n	8006196 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d012      	beq.n	8006054 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a22      	ldr	r2, [pc, #136]	; (80060bc <HAL_SD_ReadBlocks+0x308>)
 8006034:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603a:	f043 0208 	orr.w	r2, r3, #8
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e0a0      	b.n	8006196 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d012      	beq.n	8006088 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a15      	ldr	r2, [pc, #84]	; (80060bc <HAL_SD_ReadBlocks+0x308>)
 8006068:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	f043 0202 	orr.w	r2, r3, #2
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e086      	b.n	8006196 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b00      	cmp	r3, #0
 8006094:	d063      	beq.n	800615e <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a08      	ldr	r2, [pc, #32]	; (80060bc <HAL_SD_ReadBlocks+0x308>)
 800609c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	f043 0220 	orr.w	r2, r3, #32
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e06c      	b.n	8006196 <HAL_SD_ReadBlocks+0x3e2>
 80060bc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f001 fc18 	bl	80078fa <SDIO_ReadFIFO>
 80060ca:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80060d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d6:	3301      	adds	r3, #1
 80060d8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80060da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060dc:	3b01      	subs	r3, #1
 80060de:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80060e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e2:	0a1b      	lsrs	r3, r3, #8
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80060ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ec:	3301      	adds	r3, #1
 80060ee:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80060f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f2:	3b01      	subs	r3, #1
 80060f4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80060f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f8:	0c1b      	lsrs	r3, r3, #16
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006102:	3301      	adds	r3, #1
 8006104:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006108:	3b01      	subs	r3, #1
 800610a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610e:	0e1b      	lsrs	r3, r3, #24
 8006110:	b2da      	uxtb	r2, r3
 8006112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006114:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006118:	3301      	adds	r3, #1
 800611a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800611c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611e:	3b01      	subs	r3, #1
 8006120:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006122:	f7fe f955 	bl	80043d0 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800612e:	429a      	cmp	r2, r3
 8006130:	d902      	bls.n	8006138 <HAL_SD_ReadBlocks+0x384>
 8006132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006134:	2b00      	cmp	r3, #0
 8006136:	d112      	bne.n	800615e <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a18      	ldr	r2, [pc, #96]	; (80061a0 <HAL_SD_ReadBlocks+0x3ec>)
 800613e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e01b      	b.n	8006196 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_SD_ReadBlocks+0x3be>
 800616c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1a6      	bne.n	80060c0 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f240 523a 	movw	r2, #1338	; 0x53a
 800617a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	e006      	b.n	8006196 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
  }
}
 8006196:	4618      	mov	r0, r3
 8006198:	3748      	adds	r7, #72	; 0x48
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	004005ff 	.word	0x004005ff

080061a4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b092      	sub	sp, #72	; 0x48
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80061b2:	f7fe f90d 	bl	80043d0 <HAL_GetTick>
 80061b6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d107      	bne.n	80061d6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e182      	b.n	80064dc <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b01      	cmp	r3, #1
 80061e0:	f040 8175 	bne.w	80064ce <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80061ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	441a      	add	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d907      	bls.n	8006208 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e169      	b.n	80064dc <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2203      	movs	r2, #3
 800620c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2200      	movs	r2, #0
 8006216:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621c:	2b01      	cmp	r3, #1
 800621e:	d002      	beq.n	8006226 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006222:	025b      	lsls	r3, r3, #9
 8006224:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800622e:	4618      	mov	r0, r3
 8006230:	f001 fc14 	bl	8007a5c <SDMMC_CmdBlockLength>
 8006234:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8006236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00f      	beq.n	800625c <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a9c      	ldr	r2, [pc, #624]	; (80064b4 <HAL_SD_WriteBlocks+0x310>)
 8006242:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624a:	431a      	orrs	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e13f      	b.n	80064dc <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800625c:	f04f 33ff 	mov.w	r3, #4294967295
 8006260:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	025b      	lsls	r3, r3, #9
 8006266:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006268:	2390      	movs	r3, #144	; 0x90
 800626a:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800626c:	2300      	movs	r3, #0
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006270:	2300      	movs	r3, #0
 8006272:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006274:	2301      	movs	r3, #1
 8006276:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f107 0218 	add.w	r2, r7, #24
 8006280:	4611      	mov	r1, r2
 8006282:	4618      	mov	r0, r3
 8006284:	f001 fbbe 	bl	8007a04 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d90a      	bls.n	80062a4 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2220      	movs	r2, #32
 8006292:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800629a:	4618      	mov	r0, r3
 800629c:	f001 fc66 	bl	8007b6c <SDMMC_CmdWriteMultiBlock>
 80062a0:	6478      	str	r0, [r7, #68]	; 0x44
 80062a2:	e009      	b.n	80062b8 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2210      	movs	r2, #16
 80062a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 fc39 	bl	8007b28 <SDMMC_CmdWriteSingleBlock>
 80062b6:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80062b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d012      	beq.n	80062e4 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a7c      	ldr	r2, [pc, #496]	; (80064b4 <HAL_SD_WriteBlocks+0x310>)
 80062c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062cc:	431a      	orrs	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e0fb      	b.n	80064dc <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80062e8:	e065      	b.n	80063b6 <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d040      	beq.n	800637a <HAL_SD_WriteBlocks+0x1d6>
 80062f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d03d      	beq.n	800637a <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80062fe:	2300      	movs	r3, #0
 8006300:	643b      	str	r3, [r7, #64]	; 0x40
 8006302:	e037      	b.n	8006374 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8006304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800630a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630c:	3301      	adds	r3, #1
 800630e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006312:	3b01      	subs	r3, #1
 8006314:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	021a      	lsls	r2, r3, #8
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006324:	3301      	adds	r3, #1
 8006326:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800632a:	3b01      	subs	r3, #1
 800632c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800632e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	041a      	lsls	r2, r3, #16
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800633a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633c:	3301      	adds	r3, #1
 800633e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006342:	3b01      	subs	r3, #1
 8006344:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	061a      	lsls	r2, r3, #24
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006354:	3301      	adds	r3, #1
 8006356:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635a:	3b01      	subs	r3, #1
 800635c:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f107 0214 	add.w	r2, r7, #20
 8006366:	4611      	mov	r1, r2
 8006368:	4618      	mov	r0, r3
 800636a:	f001 fad3 	bl	8007914 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800636e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006370:	3301      	adds	r3, #1
 8006372:	643b      	str	r3, [r7, #64]	; 0x40
 8006374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006376:	2b07      	cmp	r3, #7
 8006378:	d9c4      	bls.n	8006304 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800637a:	f7fe f829 	bl	80043d0 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006386:	429a      	cmp	r2, r3
 8006388:	d902      	bls.n	8006390 <HAL_SD_WriteBlocks+0x1ec>
 800638a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800638c:	2b00      	cmp	r3, #0
 800638e:	d112      	bne.n	80063b6 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a47      	ldr	r2, [pc, #284]	; (80064b4 <HAL_SD_WriteBlocks+0x310>)
 8006396:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800639c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800639e:	431a      	orrs	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e092      	b.n	80064dc <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063bc:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d092      	beq.n	80062ea <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d022      	beq.n	8006418 <HAL_SD_WriteBlocks+0x274>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d91f      	bls.n	8006418 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063dc:	2b03      	cmp	r3, #3
 80063de:	d01b      	beq.n	8006418 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 fbe3 	bl	8007bb0 <SDMMC_CmdStopTransfer>
 80063ea:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80063ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d012      	beq.n	8006418 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a2f      	ldr	r2, [pc, #188]	; (80064b4 <HAL_SD_WriteBlocks+0x310>)
 80063f8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006400:	431a      	orrs	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e061      	b.n	80064dc <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	2b00      	cmp	r3, #0
 8006424:	d012      	beq.n	800644c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a22      	ldr	r2, [pc, #136]	; (80064b4 <HAL_SD_WriteBlocks+0x310>)
 800642c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	f043 0208 	orr.w	r2, r3, #8
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e047      	b.n	80064dc <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d012      	beq.n	8006480 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a15      	ldr	r2, [pc, #84]	; (80064b4 <HAL_SD_WriteBlocks+0x310>)
 8006460:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	f043 0202 	orr.w	r2, r3, #2
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e02d      	b.n	80064dc <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006486:	f003 0310 	and.w	r3, r3, #16
 800648a:	2b00      	cmp	r3, #0
 800648c:	d014      	beq.n	80064b8 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a08      	ldr	r2, [pc, #32]	; (80064b4 <HAL_SD_WriteBlocks+0x310>)
 8006494:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	f043 0210 	orr.w	r2, r3, #16
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e013      	b.n	80064dc <HAL_SD_WriteBlocks+0x338>
 80064b4:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f240 523a 	movw	r2, #1338	; 0x53a
 80064c0:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	e006      	b.n	80064dc <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
  }
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3748      	adds	r7, #72	; 0x48
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064f2:	0f9b      	lsrs	r3, r3, #30
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064fe:	0e9b      	lsrs	r3, r3, #26
 8006500:	b2db      	uxtb	r3, r3
 8006502:	f003 030f 	and.w	r3, r3, #15
 8006506:	b2da      	uxtb	r2, r3
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006510:	0e1b      	lsrs	r3, r3, #24
 8006512:	b2db      	uxtb	r3, r3
 8006514:	f003 0303 	and.w	r3, r3, #3
 8006518:	b2da      	uxtb	r2, r3
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006522:	0c1b      	lsrs	r3, r3, #16
 8006524:	b2da      	uxtb	r2, r3
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800652e:	0a1b      	lsrs	r3, r3, #8
 8006530:	b2da      	uxtb	r2, r3
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800653a:	b2da      	uxtb	r2, r3
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006544:	0d1b      	lsrs	r3, r3, #20
 8006546:	b29a      	uxth	r2, r3
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006550:	0c1b      	lsrs	r3, r3, #16
 8006552:	b2db      	uxtb	r3, r3
 8006554:	f003 030f 	and.w	r3, r3, #15
 8006558:	b2da      	uxtb	r2, r3
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006562:	0bdb      	lsrs	r3, r3, #15
 8006564:	b2db      	uxtb	r3, r3
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	b2da      	uxtb	r2, r3
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006574:	0b9b      	lsrs	r3, r3, #14
 8006576:	b2db      	uxtb	r3, r3
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	b2da      	uxtb	r2, r3
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006586:	0b5b      	lsrs	r3, r3, #13
 8006588:	b2db      	uxtb	r3, r3
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	b2da      	uxtb	r2, r3
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006598:	0b1b      	lsrs	r3, r3, #12
 800659a:	b2db      	uxtb	r3, r3
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2200      	movs	r2, #0
 80065aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d163      	bne.n	800667c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b8:	009a      	lsls	r2, r3, #2
 80065ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065be:	4013      	ands	r3, r2
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80065c4:	0f92      	lsrs	r2, r2, #30
 80065c6:	431a      	orrs	r2, r3
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d0:	0edb      	lsrs	r3, r3, #27
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065e2:	0e1b      	lsrs	r3, r3, #24
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065f4:	0d5b      	lsrs	r3, r3, #21
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006606:	0c9b      	lsrs	r3, r3, #18
 8006608:	b2db      	uxtb	r3, r3
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	b2da      	uxtb	r2, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006618:	0bdb      	lsrs	r3, r3, #15
 800661a:	b2db      	uxtb	r3, r3
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	b2da      	uxtb	r2, r3
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	7e1b      	ldrb	r3, [r3, #24]
 8006634:	b2db      	uxtb	r3, r3
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	3302      	adds	r3, #2
 800663c:	2201      	movs	r2, #1
 800663e:	fa02 f303 	lsl.w	r3, r2, r3
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006646:	fb02 f203 	mul.w	r2, r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	7a1b      	ldrb	r3, [r3, #8]
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	2201      	movs	r2, #1
 800665a:	409a      	lsls	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006668:	0a52      	lsrs	r2, r2, #9
 800666a:	fb02 f203 	mul.w	r2, r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006678:	661a      	str	r2, [r3, #96]	; 0x60
 800667a:	e031      	b.n	80066e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006680:	2b01      	cmp	r3, #1
 8006682:	d11d      	bne.n	80066c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006688:	041b      	lsls	r3, r3, #16
 800668a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006692:	0c1b      	lsrs	r3, r3, #16
 8006694:	431a      	orrs	r2, r3
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	3301      	adds	r3, #1
 80066a0:	029a      	lsls	r2, r3, #10
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066b4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	661a      	str	r2, [r3, #96]	; 0x60
 80066be:	e00f      	b.n	80066e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a58      	ldr	r2, [pc, #352]	; (8006828 <HAL_SD_GetCardCSD+0x344>)
 80066c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e09d      	b.n	800681c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e4:	0b9b      	lsrs	r3, r3, #14
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066f6:	09db      	lsrs	r3, r3, #7
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006708:	b2db      	uxtb	r3, r3
 800670a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800670e:	b2da      	uxtb	r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006718:	0fdb      	lsrs	r3, r3, #31
 800671a:	b2da      	uxtb	r2, r3
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006724:	0f5b      	lsrs	r3, r3, #29
 8006726:	b2db      	uxtb	r3, r3
 8006728:	f003 0303 	and.w	r3, r3, #3
 800672c:	b2da      	uxtb	r2, r3
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006736:	0e9b      	lsrs	r3, r3, #26
 8006738:	b2db      	uxtb	r3, r3
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	b2da      	uxtb	r2, r3
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006748:	0d9b      	lsrs	r3, r3, #22
 800674a:	b2db      	uxtb	r3, r3
 800674c:	f003 030f 	and.w	r3, r3, #15
 8006750:	b2da      	uxtb	r2, r3
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675a:	0d5b      	lsrs	r3, r3, #21
 800675c:	b2db      	uxtb	r3, r3
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	b2da      	uxtb	r2, r3
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006776:	0c1b      	lsrs	r3, r3, #16
 8006778:	b2db      	uxtb	r3, r3
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	b2da      	uxtb	r2, r3
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	0bdb      	lsrs	r3, r3, #15
 800678c:	b2db      	uxtb	r3, r3
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	b2da      	uxtb	r2, r3
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679e:	0b9b      	lsrs	r3, r3, #14
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	0b5b      	lsrs	r3, r3, #13
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c6:	0b1b      	lsrs	r3, r3, #12
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067da:	0a9b      	lsrs	r3, r3, #10
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ee:	0a1b      	lsrs	r3, r3, #8
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	f003 0303 	and.w	r3, r3, #3
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	085b      	lsrs	r3, r3, #1
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800680a:	b2da      	uxtb	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	004005ff 	.word	0x004005ff

0800682c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006890:	f107 030c 	add.w	r3, r7, #12
 8006894:	4619      	mov	r1, r3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f970 	bl	8006b7c <SD_SendStatus>
 800689c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d005      	beq.n	80068b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	0a5b      	lsrs	r3, r3, #9
 80068b4:	f003 030f 	and.w	r3, r3, #15
 80068b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80068ba:	693b      	ldr	r3, [r7, #16]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80068c4:	b5b0      	push	{r4, r5, r7, lr}
 80068c6:	b094      	sub	sp, #80	; 0x50
 80068c8:	af04      	add	r7, sp, #16
 80068ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80068cc:	2301      	movs	r3, #1
 80068ce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f001 f83d 	bl	8007954 <SDIO_GetPowerState>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d102      	bne.n	80068e6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80068e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80068e4:	e0b7      	b.n	8006a56 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d02f      	beq.n	800694e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f001 fa23 	bl	8007d3e <SDMMC_CmdSendCID>
 80068f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80068fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <SD_InitCard+0x40>
    {
      return errorstate;
 8006900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006902:	e0a8      	b.n	8006a56 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2100      	movs	r1, #0
 800690a:	4618      	mov	r0, r3
 800690c:	f001 f867 	bl	80079de <SDIO_GetResponse>
 8006910:	4602      	mov	r2, r0
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2104      	movs	r1, #4
 800691c:	4618      	mov	r0, r3
 800691e:	f001 f85e 	bl	80079de <SDIO_GetResponse>
 8006922:	4602      	mov	r2, r0
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2108      	movs	r1, #8
 800692e:	4618      	mov	r0, r3
 8006930:	f001 f855 	bl	80079de <SDIO_GetResponse>
 8006934:	4602      	mov	r2, r0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	210c      	movs	r1, #12
 8006940:	4618      	mov	r0, r3
 8006942:	f001 f84c 	bl	80079de <SDIO_GetResponse>
 8006946:	4602      	mov	r2, r0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006952:	2b03      	cmp	r3, #3
 8006954:	d00d      	beq.n	8006972 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f107 020e 	add.w	r2, r7, #14
 800695e:	4611      	mov	r1, r2
 8006960:	4618      	mov	r0, r3
 8006962:	f001 fa29 	bl	8007db8 <SDMMC_CmdSetRelAdd>
 8006966:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <SD_InitCard+0xae>
    {
      return errorstate;
 800696e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006970:	e071      	b.n	8006a56 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006976:	2b03      	cmp	r3, #3
 8006978:	d036      	beq.n	80069e8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800697a:	89fb      	ldrh	r3, [r7, #14]
 800697c:	461a      	mov	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698a:	041b      	lsls	r3, r3, #16
 800698c:	4619      	mov	r1, r3
 800698e:	4610      	mov	r0, r2
 8006990:	f001 f9f3 	bl	8007d7a <SDMMC_CmdSendCSD>
 8006994:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800699c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699e:	e05a      	b.n	8006a56 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2100      	movs	r1, #0
 80069a6:	4618      	mov	r0, r3
 80069a8:	f001 f819 	bl	80079de <SDIO_GetResponse>
 80069ac:	4602      	mov	r2, r0
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2104      	movs	r1, #4
 80069b8:	4618      	mov	r0, r3
 80069ba:	f001 f810 	bl	80079de <SDIO_GetResponse>
 80069be:	4602      	mov	r2, r0
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2108      	movs	r1, #8
 80069ca:	4618      	mov	r0, r3
 80069cc:	f001 f807 	bl	80079de <SDIO_GetResponse>
 80069d0:	4602      	mov	r2, r0
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	210c      	movs	r1, #12
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 fffe 	bl	80079de <SDIO_GetResponse>
 80069e2:	4602      	mov	r2, r0
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2104      	movs	r1, #4
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 fff5 	bl	80079de <SDIO_GetResponse>
 80069f4:	4603      	mov	r3, r0
 80069f6:	0d1a      	lsrs	r2, r3, #20
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80069fc:	f107 0310 	add.w	r3, r7, #16
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7ff fd6e 	bl	80064e4 <HAL_SD_GetCardCSD>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a12:	e020      	b.n	8006a56 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6819      	ldr	r1, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a1c:	041b      	lsls	r3, r3, #16
 8006a1e:	f04f 0400 	mov.w	r4, #0
 8006a22:	461a      	mov	r2, r3
 8006a24:	4623      	mov	r3, r4
 8006a26:	4608      	mov	r0, r1
 8006a28:	f001 f8e4 	bl	8007bf4 <SDMMC_CmdSelDesel>
 8006a2c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <SD_InitCard+0x174>
  {
    return errorstate;
 8006a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a36:	e00e      	b.n	8006a56 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681d      	ldr	r5, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	466c      	mov	r4, sp
 8006a40:	f103 0210 	add.w	r2, r3, #16
 8006a44:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 ff28 	bl	80078a4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3740      	adds	r7, #64	; 0x40
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006a60 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	2300      	movs	r3, #0
 8006a72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f001 f8de 	bl	8007c3a <SDMMC_CmdGoIdleState>
 8006a7e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	e072      	b.n	8006b70 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f001 f8f1 	bl	8007c76 <SDMMC_CmdOperCond>
 8006a94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00d      	beq.n	8006ab8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 f8c7 	bl	8007c3a <SDMMC_CmdGoIdleState>
 8006aac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d004      	beq.n	8006abe <SD_PowerON+0x5e>
    {
      return errorstate;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	e05b      	b.n	8006b70 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d137      	bne.n	8006b36 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2100      	movs	r1, #0
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 f8f1 	bl	8007cb4 <SDMMC_CmdAppCommand>
 8006ad2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d02d      	beq.n	8006b36 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ada:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ade:	e047      	b.n	8006b70 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f001 f8e4 	bl	8007cb4 <SDMMC_CmdAppCommand>
 8006aec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <SD_PowerON+0x98>
    {
      return errorstate;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	e03b      	b.n	8006b70 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	491e      	ldr	r1, [pc, #120]	; (8006b78 <SD_PowerON+0x118>)
 8006afe:	4618      	mov	r0, r3
 8006b00:	f001 f8fa 	bl	8007cf8 <SDMMC_CmdAppOperCommand>
 8006b04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b10:	e02e      	b.n	8006b70 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2100      	movs	r1, #0
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 ff60 	bl	80079de <SDIO_GetResponse>
 8006b1e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	0fdb      	lsrs	r3, r3, #31
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <SD_PowerON+0xcc>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e000      	b.n	8006b2e <SD_PowerON+0xce>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	613b      	str	r3, [r7, #16]

    count++;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	3301      	adds	r3, #1
 8006b34:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d802      	bhi.n	8006b46 <SD_PowerON+0xe6>
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0cc      	beq.n	8006ae0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d902      	bls.n	8006b56 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b54:	e00c      	b.n	8006b70 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	645a      	str	r2, [r3, #68]	; 0x44
 8006b66:	e002      	b.n	8006b6e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	c1100000 	.word	0xc1100000

08006b7c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006b8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b90:	e018      	b.n	8006bc4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b9a:	041b      	lsls	r3, r3, #16
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	f001 f92b 	bl	8007dfa <SDMMC_CmdSendStatus>
 8006ba4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	e009      	b.n	8006bc4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 ff11 	bl	80079de <SDIO_GetResponse>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e056      	b.n	8006c8c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d106      	bne.n	8006bfe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7fb fddd 	bl	80027b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2202      	movs	r2, #2
 8006c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c14:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	431a      	orrs	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	431a      	orrs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	ea42 0103 	orr.w	r1, r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	0c1b      	lsrs	r3, r3, #16
 8006c5c:	f003 0104 	and.w	r1, r3, #4
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	69da      	ldr	r2, [r3, #28]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e01d      	b.n	8006ce2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f815 	bl	8006cea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3304      	adds	r3, #4
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	f000 f968 	bl	8006fa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b085      	sub	sp, #20
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f042 0201 	orr.w	r2, r2, #1
 8006d14:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b06      	cmp	r3, #6
 8006d26:	d007      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0201 	orr.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b082      	sub	sp, #8
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d122      	bne.n	8006da2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d11b      	bne.n	8006da2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f06f 0202 	mvn.w	r2, #2
 8006d72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	f003 0303 	and.w	r3, r3, #3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d003      	beq.n	8006d90 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f8ee 	bl	8006f6a <HAL_TIM_IC_CaptureCallback>
 8006d8e:	e005      	b.n	8006d9c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f8e0 	bl	8006f56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f8f1 	bl	8006f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	d122      	bne.n	8006df6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	f003 0304 	and.w	r3, r3, #4
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d11b      	bne.n	8006df6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f06f 0204 	mvn.w	r2, #4
 8006dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f8c4 	bl	8006f6a <HAL_TIM_IC_CaptureCallback>
 8006de2:	e005      	b.n	8006df0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f8b6 	bl	8006f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f8c7 	bl	8006f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d122      	bne.n	8006e4a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f003 0308 	and.w	r3, r3, #8
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	d11b      	bne.n	8006e4a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f06f 0208 	mvn.w	r2, #8
 8006e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2204      	movs	r2, #4
 8006e20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	f003 0303 	and.w	r3, r3, #3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f89a 	bl	8006f6a <HAL_TIM_IC_CaptureCallback>
 8006e36:	e005      	b.n	8006e44 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f88c 	bl	8006f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f89d 	bl	8006f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	f003 0310 	and.w	r3, r3, #16
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	d122      	bne.n	8006e9e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	2b10      	cmp	r3, #16
 8006e64:	d11b      	bne.n	8006e9e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f06f 0210 	mvn.w	r2, #16
 8006e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2208      	movs	r2, #8
 8006e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f870 	bl	8006f6a <HAL_TIM_IC_CaptureCallback>
 8006e8a:	e005      	b.n	8006e98 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f862 	bl	8006f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f873 	bl	8006f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d10e      	bne.n	8006eca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d107      	bne.n	8006eca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f06f 0201 	mvn.w	r2, #1
 8006ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7fd fa09 	bl	80042dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed4:	2b80      	cmp	r3, #128	; 0x80
 8006ed6:	d10e      	bne.n	8006ef6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee2:	2b80      	cmp	r3, #128	; 0x80
 8006ee4:	d107      	bne.n	8006ef6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f903 	bl	80070fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f00:	2b40      	cmp	r3, #64	; 0x40
 8006f02:	d10e      	bne.n	8006f22 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0e:	2b40      	cmp	r3, #64	; 0x40
 8006f10:	d107      	bne.n	8006f22 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f838 	bl	8006f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	f003 0320 	and.w	r3, r3, #32
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d10e      	bne.n	8006f4e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f003 0320 	and.w	r3, r3, #32
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d107      	bne.n	8006f4e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f06f 0220 	mvn.w	r2, #32
 8006f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f8cd 	bl	80070e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f4e:	bf00      	nop
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b083      	sub	sp, #12
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
	...

08006fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a40      	ldr	r2, [pc, #256]	; (80070bc <TIM_Base_SetConfig+0x114>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d013      	beq.n	8006fe8 <TIM_Base_SetConfig+0x40>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc6:	d00f      	beq.n	8006fe8 <TIM_Base_SetConfig+0x40>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a3d      	ldr	r2, [pc, #244]	; (80070c0 <TIM_Base_SetConfig+0x118>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00b      	beq.n	8006fe8 <TIM_Base_SetConfig+0x40>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a3c      	ldr	r2, [pc, #240]	; (80070c4 <TIM_Base_SetConfig+0x11c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d007      	beq.n	8006fe8 <TIM_Base_SetConfig+0x40>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a3b      	ldr	r2, [pc, #236]	; (80070c8 <TIM_Base_SetConfig+0x120>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d003      	beq.n	8006fe8 <TIM_Base_SetConfig+0x40>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a3a      	ldr	r2, [pc, #232]	; (80070cc <TIM_Base_SetConfig+0x124>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d108      	bne.n	8006ffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a2f      	ldr	r2, [pc, #188]	; (80070bc <TIM_Base_SetConfig+0x114>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d02b      	beq.n	800705a <TIM_Base_SetConfig+0xb2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007008:	d027      	beq.n	800705a <TIM_Base_SetConfig+0xb2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a2c      	ldr	r2, [pc, #176]	; (80070c0 <TIM_Base_SetConfig+0x118>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d023      	beq.n	800705a <TIM_Base_SetConfig+0xb2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a2b      	ldr	r2, [pc, #172]	; (80070c4 <TIM_Base_SetConfig+0x11c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d01f      	beq.n	800705a <TIM_Base_SetConfig+0xb2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a2a      	ldr	r2, [pc, #168]	; (80070c8 <TIM_Base_SetConfig+0x120>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d01b      	beq.n	800705a <TIM_Base_SetConfig+0xb2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a29      	ldr	r2, [pc, #164]	; (80070cc <TIM_Base_SetConfig+0x124>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d017      	beq.n	800705a <TIM_Base_SetConfig+0xb2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a28      	ldr	r2, [pc, #160]	; (80070d0 <TIM_Base_SetConfig+0x128>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d013      	beq.n	800705a <TIM_Base_SetConfig+0xb2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a27      	ldr	r2, [pc, #156]	; (80070d4 <TIM_Base_SetConfig+0x12c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d00f      	beq.n	800705a <TIM_Base_SetConfig+0xb2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a26      	ldr	r2, [pc, #152]	; (80070d8 <TIM_Base_SetConfig+0x130>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00b      	beq.n	800705a <TIM_Base_SetConfig+0xb2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a25      	ldr	r2, [pc, #148]	; (80070dc <TIM_Base_SetConfig+0x134>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d007      	beq.n	800705a <TIM_Base_SetConfig+0xb2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a24      	ldr	r2, [pc, #144]	; (80070e0 <TIM_Base_SetConfig+0x138>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d003      	beq.n	800705a <TIM_Base_SetConfig+0xb2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a23      	ldr	r2, [pc, #140]	; (80070e4 <TIM_Base_SetConfig+0x13c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d108      	bne.n	800706c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	4313      	orrs	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a0a      	ldr	r2, [pc, #40]	; (80070bc <TIM_Base_SetConfig+0x114>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d003      	beq.n	80070a0 <TIM_Base_SetConfig+0xf8>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a0c      	ldr	r2, [pc, #48]	; (80070cc <TIM_Base_SetConfig+0x124>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d103      	bne.n	80070a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	691a      	ldr	r2, [r3, #16]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	615a      	str	r2, [r3, #20]
}
 80070ae:	bf00      	nop
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	40010000 	.word	0x40010000
 80070c0:	40000400 	.word	0x40000400
 80070c4:	40000800 	.word	0x40000800
 80070c8:	40000c00 	.word	0x40000c00
 80070cc:	40010400 	.word	0x40010400
 80070d0:	40014000 	.word	0x40014000
 80070d4:	40014400 	.word	0x40014400
 80070d8:	40014800 	.word	0x40014800
 80070dc:	40001800 	.word	0x40001800
 80070e0:	40001c00 	.word	0x40001c00
 80070e4:	40002000 	.word	0x40002000

080070e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e03f      	b.n	80071a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d106      	bne.n	800713c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7fb fbec 	bl	8002914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2224      	movs	r2, #36	; 0x24
 8007140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f829 	bl	80071ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	691a      	ldr	r2, [r3, #16]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695a      	ldr	r2, [r3, #20]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2220      	movs	r2, #32
 8007194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2220      	movs	r2, #32
 800719c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b0:	b085      	sub	sp, #20
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68da      	ldr	r2, [r3, #12]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	431a      	orrs	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	431a      	orrs	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80071ee:	f023 030c 	bic.w	r3, r3, #12
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	6812      	ldr	r2, [r2, #0]
 80071f6:	68f9      	ldr	r1, [r7, #12]
 80071f8:	430b      	orrs	r3, r1
 80071fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699a      	ldr	r2, [r3, #24]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800721a:	f040 818b 	bne.w	8007534 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4ac1      	ldr	r2, [pc, #772]	; (8007528 <UART_SetConfig+0x37c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d005      	beq.n	8007234 <UART_SetConfig+0x88>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4abf      	ldr	r2, [pc, #764]	; (800752c <UART_SetConfig+0x380>)
 800722e:	4293      	cmp	r3, r2
 8007230:	f040 80bd 	bne.w	80073ae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007234:	f7fd fcde 	bl	8004bf4 <HAL_RCC_GetPCLK2Freq>
 8007238:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	461d      	mov	r5, r3
 800723e:	f04f 0600 	mov.w	r6, #0
 8007242:	46a8      	mov	r8, r5
 8007244:	46b1      	mov	r9, r6
 8007246:	eb18 0308 	adds.w	r3, r8, r8
 800724a:	eb49 0409 	adc.w	r4, r9, r9
 800724e:	4698      	mov	r8, r3
 8007250:	46a1      	mov	r9, r4
 8007252:	eb18 0805 	adds.w	r8, r8, r5
 8007256:	eb49 0906 	adc.w	r9, r9, r6
 800725a:	f04f 0100 	mov.w	r1, #0
 800725e:	f04f 0200 	mov.w	r2, #0
 8007262:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007266:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800726a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800726e:	4688      	mov	r8, r1
 8007270:	4691      	mov	r9, r2
 8007272:	eb18 0005 	adds.w	r0, r8, r5
 8007276:	eb49 0106 	adc.w	r1, r9, r6
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	461d      	mov	r5, r3
 8007280:	f04f 0600 	mov.w	r6, #0
 8007284:	196b      	adds	r3, r5, r5
 8007286:	eb46 0406 	adc.w	r4, r6, r6
 800728a:	461a      	mov	r2, r3
 800728c:	4623      	mov	r3, r4
 800728e:	f7f9 fcab 	bl	8000be8 <__aeabi_uldivmod>
 8007292:	4603      	mov	r3, r0
 8007294:	460c      	mov	r4, r1
 8007296:	461a      	mov	r2, r3
 8007298:	4ba5      	ldr	r3, [pc, #660]	; (8007530 <UART_SetConfig+0x384>)
 800729a:	fba3 2302 	umull	r2, r3, r3, r2
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	461d      	mov	r5, r3
 80072a8:	f04f 0600 	mov.w	r6, #0
 80072ac:	46a9      	mov	r9, r5
 80072ae:	46b2      	mov	sl, r6
 80072b0:	eb19 0309 	adds.w	r3, r9, r9
 80072b4:	eb4a 040a 	adc.w	r4, sl, sl
 80072b8:	4699      	mov	r9, r3
 80072ba:	46a2      	mov	sl, r4
 80072bc:	eb19 0905 	adds.w	r9, r9, r5
 80072c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80072c4:	f04f 0100 	mov.w	r1, #0
 80072c8:	f04f 0200 	mov.w	r2, #0
 80072cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072d8:	4689      	mov	r9, r1
 80072da:	4692      	mov	sl, r2
 80072dc:	eb19 0005 	adds.w	r0, r9, r5
 80072e0:	eb4a 0106 	adc.w	r1, sl, r6
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	461d      	mov	r5, r3
 80072ea:	f04f 0600 	mov.w	r6, #0
 80072ee:	196b      	adds	r3, r5, r5
 80072f0:	eb46 0406 	adc.w	r4, r6, r6
 80072f4:	461a      	mov	r2, r3
 80072f6:	4623      	mov	r3, r4
 80072f8:	f7f9 fc76 	bl	8000be8 <__aeabi_uldivmod>
 80072fc:	4603      	mov	r3, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	461a      	mov	r2, r3
 8007302:	4b8b      	ldr	r3, [pc, #556]	; (8007530 <UART_SetConfig+0x384>)
 8007304:	fba3 1302 	umull	r1, r3, r3, r2
 8007308:	095b      	lsrs	r3, r3, #5
 800730a:	2164      	movs	r1, #100	; 0x64
 800730c:	fb01 f303 	mul.w	r3, r1, r3
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	3332      	adds	r3, #50	; 0x32
 8007316:	4a86      	ldr	r2, [pc, #536]	; (8007530 <UART_SetConfig+0x384>)
 8007318:	fba2 2303 	umull	r2, r3, r2, r3
 800731c:	095b      	lsrs	r3, r3, #5
 800731e:	005b      	lsls	r3, r3, #1
 8007320:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007324:	4498      	add	r8, r3
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	461d      	mov	r5, r3
 800732a:	f04f 0600 	mov.w	r6, #0
 800732e:	46a9      	mov	r9, r5
 8007330:	46b2      	mov	sl, r6
 8007332:	eb19 0309 	adds.w	r3, r9, r9
 8007336:	eb4a 040a 	adc.w	r4, sl, sl
 800733a:	4699      	mov	r9, r3
 800733c:	46a2      	mov	sl, r4
 800733e:	eb19 0905 	adds.w	r9, r9, r5
 8007342:	eb4a 0a06 	adc.w	sl, sl, r6
 8007346:	f04f 0100 	mov.w	r1, #0
 800734a:	f04f 0200 	mov.w	r2, #0
 800734e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007352:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007356:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800735a:	4689      	mov	r9, r1
 800735c:	4692      	mov	sl, r2
 800735e:	eb19 0005 	adds.w	r0, r9, r5
 8007362:	eb4a 0106 	adc.w	r1, sl, r6
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	461d      	mov	r5, r3
 800736c:	f04f 0600 	mov.w	r6, #0
 8007370:	196b      	adds	r3, r5, r5
 8007372:	eb46 0406 	adc.w	r4, r6, r6
 8007376:	461a      	mov	r2, r3
 8007378:	4623      	mov	r3, r4
 800737a:	f7f9 fc35 	bl	8000be8 <__aeabi_uldivmod>
 800737e:	4603      	mov	r3, r0
 8007380:	460c      	mov	r4, r1
 8007382:	461a      	mov	r2, r3
 8007384:	4b6a      	ldr	r3, [pc, #424]	; (8007530 <UART_SetConfig+0x384>)
 8007386:	fba3 1302 	umull	r1, r3, r3, r2
 800738a:	095b      	lsrs	r3, r3, #5
 800738c:	2164      	movs	r1, #100	; 0x64
 800738e:	fb01 f303 	mul.w	r3, r1, r3
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	3332      	adds	r3, #50	; 0x32
 8007398:	4a65      	ldr	r2, [pc, #404]	; (8007530 <UART_SetConfig+0x384>)
 800739a:	fba2 2303 	umull	r2, r3, r2, r3
 800739e:	095b      	lsrs	r3, r3, #5
 80073a0:	f003 0207 	and.w	r2, r3, #7
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4442      	add	r2, r8
 80073aa:	609a      	str	r2, [r3, #8]
 80073ac:	e26f      	b.n	800788e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073ae:	f7fd fc0d 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 80073b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	461d      	mov	r5, r3
 80073b8:	f04f 0600 	mov.w	r6, #0
 80073bc:	46a8      	mov	r8, r5
 80073be:	46b1      	mov	r9, r6
 80073c0:	eb18 0308 	adds.w	r3, r8, r8
 80073c4:	eb49 0409 	adc.w	r4, r9, r9
 80073c8:	4698      	mov	r8, r3
 80073ca:	46a1      	mov	r9, r4
 80073cc:	eb18 0805 	adds.w	r8, r8, r5
 80073d0:	eb49 0906 	adc.w	r9, r9, r6
 80073d4:	f04f 0100 	mov.w	r1, #0
 80073d8:	f04f 0200 	mov.w	r2, #0
 80073dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80073e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80073e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80073e8:	4688      	mov	r8, r1
 80073ea:	4691      	mov	r9, r2
 80073ec:	eb18 0005 	adds.w	r0, r8, r5
 80073f0:	eb49 0106 	adc.w	r1, r9, r6
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	461d      	mov	r5, r3
 80073fa:	f04f 0600 	mov.w	r6, #0
 80073fe:	196b      	adds	r3, r5, r5
 8007400:	eb46 0406 	adc.w	r4, r6, r6
 8007404:	461a      	mov	r2, r3
 8007406:	4623      	mov	r3, r4
 8007408:	f7f9 fbee 	bl	8000be8 <__aeabi_uldivmod>
 800740c:	4603      	mov	r3, r0
 800740e:	460c      	mov	r4, r1
 8007410:	461a      	mov	r2, r3
 8007412:	4b47      	ldr	r3, [pc, #284]	; (8007530 <UART_SetConfig+0x384>)
 8007414:	fba3 2302 	umull	r2, r3, r3, r2
 8007418:	095b      	lsrs	r3, r3, #5
 800741a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	461d      	mov	r5, r3
 8007422:	f04f 0600 	mov.w	r6, #0
 8007426:	46a9      	mov	r9, r5
 8007428:	46b2      	mov	sl, r6
 800742a:	eb19 0309 	adds.w	r3, r9, r9
 800742e:	eb4a 040a 	adc.w	r4, sl, sl
 8007432:	4699      	mov	r9, r3
 8007434:	46a2      	mov	sl, r4
 8007436:	eb19 0905 	adds.w	r9, r9, r5
 800743a:	eb4a 0a06 	adc.w	sl, sl, r6
 800743e:	f04f 0100 	mov.w	r1, #0
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800744a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800744e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007452:	4689      	mov	r9, r1
 8007454:	4692      	mov	sl, r2
 8007456:	eb19 0005 	adds.w	r0, r9, r5
 800745a:	eb4a 0106 	adc.w	r1, sl, r6
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	461d      	mov	r5, r3
 8007464:	f04f 0600 	mov.w	r6, #0
 8007468:	196b      	adds	r3, r5, r5
 800746a:	eb46 0406 	adc.w	r4, r6, r6
 800746e:	461a      	mov	r2, r3
 8007470:	4623      	mov	r3, r4
 8007472:	f7f9 fbb9 	bl	8000be8 <__aeabi_uldivmod>
 8007476:	4603      	mov	r3, r0
 8007478:	460c      	mov	r4, r1
 800747a:	461a      	mov	r2, r3
 800747c:	4b2c      	ldr	r3, [pc, #176]	; (8007530 <UART_SetConfig+0x384>)
 800747e:	fba3 1302 	umull	r1, r3, r3, r2
 8007482:	095b      	lsrs	r3, r3, #5
 8007484:	2164      	movs	r1, #100	; 0x64
 8007486:	fb01 f303 	mul.w	r3, r1, r3
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	00db      	lsls	r3, r3, #3
 800748e:	3332      	adds	r3, #50	; 0x32
 8007490:	4a27      	ldr	r2, [pc, #156]	; (8007530 <UART_SetConfig+0x384>)
 8007492:	fba2 2303 	umull	r2, r3, r2, r3
 8007496:	095b      	lsrs	r3, r3, #5
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800749e:	4498      	add	r8, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	461d      	mov	r5, r3
 80074a4:	f04f 0600 	mov.w	r6, #0
 80074a8:	46a9      	mov	r9, r5
 80074aa:	46b2      	mov	sl, r6
 80074ac:	eb19 0309 	adds.w	r3, r9, r9
 80074b0:	eb4a 040a 	adc.w	r4, sl, sl
 80074b4:	4699      	mov	r9, r3
 80074b6:	46a2      	mov	sl, r4
 80074b8:	eb19 0905 	adds.w	r9, r9, r5
 80074bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80074c0:	f04f 0100 	mov.w	r1, #0
 80074c4:	f04f 0200 	mov.w	r2, #0
 80074c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074d4:	4689      	mov	r9, r1
 80074d6:	4692      	mov	sl, r2
 80074d8:	eb19 0005 	adds.w	r0, r9, r5
 80074dc:	eb4a 0106 	adc.w	r1, sl, r6
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	461d      	mov	r5, r3
 80074e6:	f04f 0600 	mov.w	r6, #0
 80074ea:	196b      	adds	r3, r5, r5
 80074ec:	eb46 0406 	adc.w	r4, r6, r6
 80074f0:	461a      	mov	r2, r3
 80074f2:	4623      	mov	r3, r4
 80074f4:	f7f9 fb78 	bl	8000be8 <__aeabi_uldivmod>
 80074f8:	4603      	mov	r3, r0
 80074fa:	460c      	mov	r4, r1
 80074fc:	461a      	mov	r2, r3
 80074fe:	4b0c      	ldr	r3, [pc, #48]	; (8007530 <UART_SetConfig+0x384>)
 8007500:	fba3 1302 	umull	r1, r3, r3, r2
 8007504:	095b      	lsrs	r3, r3, #5
 8007506:	2164      	movs	r1, #100	; 0x64
 8007508:	fb01 f303 	mul.w	r3, r1, r3
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	3332      	adds	r3, #50	; 0x32
 8007512:	4a07      	ldr	r2, [pc, #28]	; (8007530 <UART_SetConfig+0x384>)
 8007514:	fba2 2303 	umull	r2, r3, r2, r3
 8007518:	095b      	lsrs	r3, r3, #5
 800751a:	f003 0207 	and.w	r2, r3, #7
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4442      	add	r2, r8
 8007524:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007526:	e1b2      	b.n	800788e <UART_SetConfig+0x6e2>
 8007528:	40011000 	.word	0x40011000
 800752c:	40011400 	.word	0x40011400
 8007530:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4ad7      	ldr	r2, [pc, #860]	; (8007898 <UART_SetConfig+0x6ec>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d005      	beq.n	800754a <UART_SetConfig+0x39e>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4ad6      	ldr	r2, [pc, #856]	; (800789c <UART_SetConfig+0x6f0>)
 8007544:	4293      	cmp	r3, r2
 8007546:	f040 80d1 	bne.w	80076ec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800754a:	f7fd fb53 	bl	8004bf4 <HAL_RCC_GetPCLK2Freq>
 800754e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	469a      	mov	sl, r3
 8007554:	f04f 0b00 	mov.w	fp, #0
 8007558:	46d0      	mov	r8, sl
 800755a:	46d9      	mov	r9, fp
 800755c:	eb18 0308 	adds.w	r3, r8, r8
 8007560:	eb49 0409 	adc.w	r4, r9, r9
 8007564:	4698      	mov	r8, r3
 8007566:	46a1      	mov	r9, r4
 8007568:	eb18 080a 	adds.w	r8, r8, sl
 800756c:	eb49 090b 	adc.w	r9, r9, fp
 8007570:	f04f 0100 	mov.w	r1, #0
 8007574:	f04f 0200 	mov.w	r2, #0
 8007578:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800757c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007580:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007584:	4688      	mov	r8, r1
 8007586:	4691      	mov	r9, r2
 8007588:	eb1a 0508 	adds.w	r5, sl, r8
 800758c:	eb4b 0609 	adc.w	r6, fp, r9
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	4619      	mov	r1, r3
 8007596:	f04f 0200 	mov.w	r2, #0
 800759a:	f04f 0300 	mov.w	r3, #0
 800759e:	f04f 0400 	mov.w	r4, #0
 80075a2:	0094      	lsls	r4, r2, #2
 80075a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075a8:	008b      	lsls	r3, r1, #2
 80075aa:	461a      	mov	r2, r3
 80075ac:	4623      	mov	r3, r4
 80075ae:	4628      	mov	r0, r5
 80075b0:	4631      	mov	r1, r6
 80075b2:	f7f9 fb19 	bl	8000be8 <__aeabi_uldivmod>
 80075b6:	4603      	mov	r3, r0
 80075b8:	460c      	mov	r4, r1
 80075ba:	461a      	mov	r2, r3
 80075bc:	4bb8      	ldr	r3, [pc, #736]	; (80078a0 <UART_SetConfig+0x6f4>)
 80075be:	fba3 2302 	umull	r2, r3, r3, r2
 80075c2:	095b      	lsrs	r3, r3, #5
 80075c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	469b      	mov	fp, r3
 80075cc:	f04f 0c00 	mov.w	ip, #0
 80075d0:	46d9      	mov	r9, fp
 80075d2:	46e2      	mov	sl, ip
 80075d4:	eb19 0309 	adds.w	r3, r9, r9
 80075d8:	eb4a 040a 	adc.w	r4, sl, sl
 80075dc:	4699      	mov	r9, r3
 80075de:	46a2      	mov	sl, r4
 80075e0:	eb19 090b 	adds.w	r9, r9, fp
 80075e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80075e8:	f04f 0100 	mov.w	r1, #0
 80075ec:	f04f 0200 	mov.w	r2, #0
 80075f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075fc:	4689      	mov	r9, r1
 80075fe:	4692      	mov	sl, r2
 8007600:	eb1b 0509 	adds.w	r5, fp, r9
 8007604:	eb4c 060a 	adc.w	r6, ip, sl
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	4619      	mov	r1, r3
 800760e:	f04f 0200 	mov.w	r2, #0
 8007612:	f04f 0300 	mov.w	r3, #0
 8007616:	f04f 0400 	mov.w	r4, #0
 800761a:	0094      	lsls	r4, r2, #2
 800761c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007620:	008b      	lsls	r3, r1, #2
 8007622:	461a      	mov	r2, r3
 8007624:	4623      	mov	r3, r4
 8007626:	4628      	mov	r0, r5
 8007628:	4631      	mov	r1, r6
 800762a:	f7f9 fadd 	bl	8000be8 <__aeabi_uldivmod>
 800762e:	4603      	mov	r3, r0
 8007630:	460c      	mov	r4, r1
 8007632:	461a      	mov	r2, r3
 8007634:	4b9a      	ldr	r3, [pc, #616]	; (80078a0 <UART_SetConfig+0x6f4>)
 8007636:	fba3 1302 	umull	r1, r3, r3, r2
 800763a:	095b      	lsrs	r3, r3, #5
 800763c:	2164      	movs	r1, #100	; 0x64
 800763e:	fb01 f303 	mul.w	r3, r1, r3
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	3332      	adds	r3, #50	; 0x32
 8007648:	4a95      	ldr	r2, [pc, #596]	; (80078a0 <UART_SetConfig+0x6f4>)
 800764a:	fba2 2303 	umull	r2, r3, r2, r3
 800764e:	095b      	lsrs	r3, r3, #5
 8007650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007654:	4498      	add	r8, r3
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	469b      	mov	fp, r3
 800765a:	f04f 0c00 	mov.w	ip, #0
 800765e:	46d9      	mov	r9, fp
 8007660:	46e2      	mov	sl, ip
 8007662:	eb19 0309 	adds.w	r3, r9, r9
 8007666:	eb4a 040a 	adc.w	r4, sl, sl
 800766a:	4699      	mov	r9, r3
 800766c:	46a2      	mov	sl, r4
 800766e:	eb19 090b 	adds.w	r9, r9, fp
 8007672:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007676:	f04f 0100 	mov.w	r1, #0
 800767a:	f04f 0200 	mov.w	r2, #0
 800767e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007682:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007686:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800768a:	4689      	mov	r9, r1
 800768c:	4692      	mov	sl, r2
 800768e:	eb1b 0509 	adds.w	r5, fp, r9
 8007692:	eb4c 060a 	adc.w	r6, ip, sl
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	4619      	mov	r1, r3
 800769c:	f04f 0200 	mov.w	r2, #0
 80076a0:	f04f 0300 	mov.w	r3, #0
 80076a4:	f04f 0400 	mov.w	r4, #0
 80076a8:	0094      	lsls	r4, r2, #2
 80076aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076ae:	008b      	lsls	r3, r1, #2
 80076b0:	461a      	mov	r2, r3
 80076b2:	4623      	mov	r3, r4
 80076b4:	4628      	mov	r0, r5
 80076b6:	4631      	mov	r1, r6
 80076b8:	f7f9 fa96 	bl	8000be8 <__aeabi_uldivmod>
 80076bc:	4603      	mov	r3, r0
 80076be:	460c      	mov	r4, r1
 80076c0:	461a      	mov	r2, r3
 80076c2:	4b77      	ldr	r3, [pc, #476]	; (80078a0 <UART_SetConfig+0x6f4>)
 80076c4:	fba3 1302 	umull	r1, r3, r3, r2
 80076c8:	095b      	lsrs	r3, r3, #5
 80076ca:	2164      	movs	r1, #100	; 0x64
 80076cc:	fb01 f303 	mul.w	r3, r1, r3
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	011b      	lsls	r3, r3, #4
 80076d4:	3332      	adds	r3, #50	; 0x32
 80076d6:	4a72      	ldr	r2, [pc, #456]	; (80078a0 <UART_SetConfig+0x6f4>)
 80076d8:	fba2 2303 	umull	r2, r3, r2, r3
 80076dc:	095b      	lsrs	r3, r3, #5
 80076de:	f003 020f 	and.w	r2, r3, #15
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4442      	add	r2, r8
 80076e8:	609a      	str	r2, [r3, #8]
 80076ea:	e0d0      	b.n	800788e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80076ec:	f7fd fa6e 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 80076f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	469a      	mov	sl, r3
 80076f6:	f04f 0b00 	mov.w	fp, #0
 80076fa:	46d0      	mov	r8, sl
 80076fc:	46d9      	mov	r9, fp
 80076fe:	eb18 0308 	adds.w	r3, r8, r8
 8007702:	eb49 0409 	adc.w	r4, r9, r9
 8007706:	4698      	mov	r8, r3
 8007708:	46a1      	mov	r9, r4
 800770a:	eb18 080a 	adds.w	r8, r8, sl
 800770e:	eb49 090b 	adc.w	r9, r9, fp
 8007712:	f04f 0100 	mov.w	r1, #0
 8007716:	f04f 0200 	mov.w	r2, #0
 800771a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800771e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007722:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007726:	4688      	mov	r8, r1
 8007728:	4691      	mov	r9, r2
 800772a:	eb1a 0508 	adds.w	r5, sl, r8
 800772e:	eb4b 0609 	adc.w	r6, fp, r9
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	4619      	mov	r1, r3
 8007738:	f04f 0200 	mov.w	r2, #0
 800773c:	f04f 0300 	mov.w	r3, #0
 8007740:	f04f 0400 	mov.w	r4, #0
 8007744:	0094      	lsls	r4, r2, #2
 8007746:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800774a:	008b      	lsls	r3, r1, #2
 800774c:	461a      	mov	r2, r3
 800774e:	4623      	mov	r3, r4
 8007750:	4628      	mov	r0, r5
 8007752:	4631      	mov	r1, r6
 8007754:	f7f9 fa48 	bl	8000be8 <__aeabi_uldivmod>
 8007758:	4603      	mov	r3, r0
 800775a:	460c      	mov	r4, r1
 800775c:	461a      	mov	r2, r3
 800775e:	4b50      	ldr	r3, [pc, #320]	; (80078a0 <UART_SetConfig+0x6f4>)
 8007760:	fba3 2302 	umull	r2, r3, r3, r2
 8007764:	095b      	lsrs	r3, r3, #5
 8007766:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	469b      	mov	fp, r3
 800776e:	f04f 0c00 	mov.w	ip, #0
 8007772:	46d9      	mov	r9, fp
 8007774:	46e2      	mov	sl, ip
 8007776:	eb19 0309 	adds.w	r3, r9, r9
 800777a:	eb4a 040a 	adc.w	r4, sl, sl
 800777e:	4699      	mov	r9, r3
 8007780:	46a2      	mov	sl, r4
 8007782:	eb19 090b 	adds.w	r9, r9, fp
 8007786:	eb4a 0a0c 	adc.w	sl, sl, ip
 800778a:	f04f 0100 	mov.w	r1, #0
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007796:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800779a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800779e:	4689      	mov	r9, r1
 80077a0:	4692      	mov	sl, r2
 80077a2:	eb1b 0509 	adds.w	r5, fp, r9
 80077a6:	eb4c 060a 	adc.w	r6, ip, sl
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	4619      	mov	r1, r3
 80077b0:	f04f 0200 	mov.w	r2, #0
 80077b4:	f04f 0300 	mov.w	r3, #0
 80077b8:	f04f 0400 	mov.w	r4, #0
 80077bc:	0094      	lsls	r4, r2, #2
 80077be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077c2:	008b      	lsls	r3, r1, #2
 80077c4:	461a      	mov	r2, r3
 80077c6:	4623      	mov	r3, r4
 80077c8:	4628      	mov	r0, r5
 80077ca:	4631      	mov	r1, r6
 80077cc:	f7f9 fa0c 	bl	8000be8 <__aeabi_uldivmod>
 80077d0:	4603      	mov	r3, r0
 80077d2:	460c      	mov	r4, r1
 80077d4:	461a      	mov	r2, r3
 80077d6:	4b32      	ldr	r3, [pc, #200]	; (80078a0 <UART_SetConfig+0x6f4>)
 80077d8:	fba3 1302 	umull	r1, r3, r3, r2
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	2164      	movs	r1, #100	; 0x64
 80077e0:	fb01 f303 	mul.w	r3, r1, r3
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	3332      	adds	r3, #50	; 0x32
 80077ea:	4a2d      	ldr	r2, [pc, #180]	; (80078a0 <UART_SetConfig+0x6f4>)
 80077ec:	fba2 2303 	umull	r2, r3, r2, r3
 80077f0:	095b      	lsrs	r3, r3, #5
 80077f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077f6:	4498      	add	r8, r3
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	469b      	mov	fp, r3
 80077fc:	f04f 0c00 	mov.w	ip, #0
 8007800:	46d9      	mov	r9, fp
 8007802:	46e2      	mov	sl, ip
 8007804:	eb19 0309 	adds.w	r3, r9, r9
 8007808:	eb4a 040a 	adc.w	r4, sl, sl
 800780c:	4699      	mov	r9, r3
 800780e:	46a2      	mov	sl, r4
 8007810:	eb19 090b 	adds.w	r9, r9, fp
 8007814:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007818:	f04f 0100 	mov.w	r1, #0
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007824:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007828:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800782c:	4689      	mov	r9, r1
 800782e:	4692      	mov	sl, r2
 8007830:	eb1b 0509 	adds.w	r5, fp, r9
 8007834:	eb4c 060a 	adc.w	r6, ip, sl
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	4619      	mov	r1, r3
 800783e:	f04f 0200 	mov.w	r2, #0
 8007842:	f04f 0300 	mov.w	r3, #0
 8007846:	f04f 0400 	mov.w	r4, #0
 800784a:	0094      	lsls	r4, r2, #2
 800784c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007850:	008b      	lsls	r3, r1, #2
 8007852:	461a      	mov	r2, r3
 8007854:	4623      	mov	r3, r4
 8007856:	4628      	mov	r0, r5
 8007858:	4631      	mov	r1, r6
 800785a:	f7f9 f9c5 	bl	8000be8 <__aeabi_uldivmod>
 800785e:	4603      	mov	r3, r0
 8007860:	460c      	mov	r4, r1
 8007862:	461a      	mov	r2, r3
 8007864:	4b0e      	ldr	r3, [pc, #56]	; (80078a0 <UART_SetConfig+0x6f4>)
 8007866:	fba3 1302 	umull	r1, r3, r3, r2
 800786a:	095b      	lsrs	r3, r3, #5
 800786c:	2164      	movs	r1, #100	; 0x64
 800786e:	fb01 f303 	mul.w	r3, r1, r3
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	011b      	lsls	r3, r3, #4
 8007876:	3332      	adds	r3, #50	; 0x32
 8007878:	4a09      	ldr	r2, [pc, #36]	; (80078a0 <UART_SetConfig+0x6f4>)
 800787a:	fba2 2303 	umull	r2, r3, r2, r3
 800787e:	095b      	lsrs	r3, r3, #5
 8007880:	f003 020f 	and.w	r2, r3, #15
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4442      	add	r2, r8
 800788a:	609a      	str	r2, [r3, #8]
}
 800788c:	e7ff      	b.n	800788e <UART_SetConfig+0x6e2>
 800788e:	bf00      	nop
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007898:	40011000 	.word	0x40011000
 800789c:	40011400 	.word	0x40011400
 80078a0:	51eb851f 	.word	0x51eb851f

080078a4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80078a4:	b084      	sub	sp, #16
 80078a6:	b480      	push	{r7}
 80078a8:	b085      	sub	sp, #20
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	f107 001c 	add.w	r0, r7, #28
 80078b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80078ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80078bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80078be:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80078c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80078c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80078ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80078ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80078de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	431a      	orrs	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	b004      	add	sp, #16
 80078f8:	4770      	bx	lr

080078fa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007908:	4618      	mov	r0, r3
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007936:	b580      	push	{r7, lr}
 8007938:	b082      	sub	sp, #8
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2203      	movs	r2, #3
 8007942:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007944:	2002      	movs	r0, #2
 8007946:	f7fc fd4f 	bl	80043e8 <HAL_Delay>
  
  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0303 	and.w	r3, r3, #3
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800797a:	2300      	movs	r3, #0
 800797c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800798e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007994:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800799a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	4313      	orrs	r3, r2
 80079a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80079aa:	f023 030f 	bic.w	r3, r3, #15
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	431a      	orrs	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	b2db      	uxtb	r3, r3
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80079de:	b480      	push	{r7}
 80079e0:	b085      	sub	sp, #20
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3314      	adds	r3, #20
 80079ec:	461a      	mov	r2, r3
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	4413      	add	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
}  
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007a2a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007a30:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007a36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a42:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0

}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007a6a:	2310      	movs	r3, #16
 8007a6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a6e:	2340      	movs	r3, #64	; 0x40
 8007a70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a72:	2300      	movs	r3, #0
 8007a74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a7c:	f107 0308 	add.w	r3, r7, #8
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7ff ff74 	bl	8007970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a8c:	2110      	movs	r1, #16
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f9fe 	bl	8007e90 <SDMMC_GetCmdResp1>
 8007a94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a96:	69fb      	ldr	r3, [r7, #28]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3720      	adds	r7, #32
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007aae:	2311      	movs	r3, #17
 8007ab0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ab2:	2340      	movs	r3, #64	; 0x40
 8007ab4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007abe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ac0:	f107 0308 	add.w	r3, r7, #8
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7ff ff52 	bl	8007970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ad0:	2111      	movs	r1, #17
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f9dc 	bl	8007e90 <SDMMC_GetCmdResp1>
 8007ad8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ada:	69fb      	ldr	r3, [r7, #28]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3720      	adds	r7, #32
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007af2:	2312      	movs	r3, #18
 8007af4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007af6:	2340      	movs	r3, #64	; 0x40
 8007af8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007afa:	2300      	movs	r3, #0
 8007afc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b04:	f107 0308 	add.w	r3, r7, #8
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7ff ff30 	bl	8007970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b14:	2112      	movs	r1, #18
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f9ba 	bl	8007e90 <SDMMC_GetCmdResp1>
 8007b1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b1e:	69fb      	ldr	r3, [r7, #28]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3720      	adds	r7, #32
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007b36:	2318      	movs	r3, #24
 8007b38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b3a:	2340      	movs	r3, #64	; 0x40
 8007b3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b48:	f107 0308 	add.w	r3, r7, #8
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff ff0e 	bl	8007970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b58:	2118      	movs	r1, #24
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f998 	bl	8007e90 <SDMMC_GetCmdResp1>
 8007b60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b62:	69fb      	ldr	r3, [r7, #28]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3720      	adds	r7, #32
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b088      	sub	sp, #32
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007b7a:	2319      	movs	r3, #25
 8007b7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b7e:	2340      	movs	r3, #64	; 0x40
 8007b80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b82:	2300      	movs	r3, #0
 8007b84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b8c:	f107 0308 	add.w	r3, r7, #8
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff feec 	bl	8007970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b9c:	2119      	movs	r1, #25
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f976 	bl	8007e90 <SDMMC_GetCmdResp1>
 8007ba4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ba6:	69fb      	ldr	r3, [r7, #28]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3720      	adds	r7, #32
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b088      	sub	sp, #32
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007bbc:	230c      	movs	r3, #12
 8007bbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bc0:	2340      	movs	r3, #64	; 0x40
 8007bc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bce:	f107 0308 	add.w	r3, r7, #8
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff fecb 	bl	8007970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007bda:	4a05      	ldr	r2, [pc, #20]	; (8007bf0 <SDMMC_CmdStopTransfer+0x40>)
 8007bdc:	210c      	movs	r1, #12
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f956 	bl	8007e90 <SDMMC_GetCmdResp1>
 8007be4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007be6:	69fb      	ldr	r3, [r7, #28]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3720      	adds	r7, #32
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	05f5e100 	.word	0x05f5e100

08007bf4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b08a      	sub	sp, #40	; 0x28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007c04:	2307      	movs	r3, #7
 8007c06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c08:	2340      	movs	r3, #64	; 0x40
 8007c0a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c14:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c16:	f107 0310 	add.w	r3, r7, #16
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f7ff fea7 	bl	8007970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c26:	2107      	movs	r1, #7
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f931 	bl	8007e90 <SDMMC_GetCmdResp1>
 8007c2e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3728      	adds	r7, #40	; 0x28
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b088      	sub	sp, #32
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007c42:	2300      	movs	r3, #0
 8007c44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c58:	f107 0308 	add.w	r3, r7, #8
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff fe86 	bl	8007970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f8eb 	bl	8007e40 <SDMMC_GetCmdError>
 8007c6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c6c:	69fb      	ldr	r3, [r7, #28]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3720      	adds	r7, #32
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b088      	sub	sp, #32
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007c7e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007c82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007c84:	2308      	movs	r3, #8
 8007c86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c88:	2340      	movs	r3, #64	; 0x40
 8007c8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c96:	f107 0308 	add.w	r3, r7, #8
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7ff fe67 	bl	8007970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fad4 	bl	8008250 <SDMMC_GetCmdResp7>
 8007ca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007caa:	69fb      	ldr	r3, [r7, #28]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3720      	adds	r7, #32
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007cc2:	2337      	movs	r3, #55	; 0x37
 8007cc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007cc6:	2340      	movs	r3, #64	; 0x40
 8007cc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cd4:	f107 0308 	add.w	r3, r7, #8
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7ff fe48 	bl	8007970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce4:	2137      	movs	r1, #55	; 0x37
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f8d2 	bl	8007e90 <SDMMC_GetCmdResp1>
 8007cec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cee:	69fb      	ldr	r3, [r7, #28]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3720      	adds	r7, #32
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b088      	sub	sp, #32
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007d0e:	2329      	movs	r3, #41	; 0x29
 8007d10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d12:	2340      	movs	r3, #64	; 0x40
 8007d14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d16:	2300      	movs	r3, #0
 8007d18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d20:	f107 0308 	add.w	r3, r7, #8
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7ff fe22 	bl	8007970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f9e1 	bl	80080f4 <SDMMC_GetCmdResp3>
 8007d32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d34:	69fb      	ldr	r3, [r7, #28]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3720      	adds	r7, #32
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b088      	sub	sp, #32
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007d4e:	23c0      	movs	r3, #192	; 0xc0
 8007d50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d52:	2300      	movs	r3, #0
 8007d54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d5c:	f107 0308 	add.w	r3, r7, #8
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7ff fe04 	bl	8007970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f97d 	bl	8008068 <SDMMC_GetCmdResp2>
 8007d6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d70:	69fb      	ldr	r3, [r7, #28]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3720      	adds	r7, #32
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b088      	sub	sp, #32
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007d88:	2309      	movs	r3, #9
 8007d8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007d8c:	23c0      	movs	r3, #192	; 0xc0
 8007d8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d90:	2300      	movs	r3, #0
 8007d92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d9a:	f107 0308 	add.w	r3, r7, #8
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff fde5 	bl	8007970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f95e 	bl	8008068 <SDMMC_GetCmdResp2>
 8007dac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dae:	69fb      	ldr	r3, [r7, #28]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3720      	adds	r7, #32
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007dca:	2340      	movs	r3, #64	; 0x40
 8007dcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007dd8:	f107 0308 	add.w	r3, r7, #8
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7ff fdc6 	bl	8007970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	2103      	movs	r1, #3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f9bd 	bl	8008168 <SDMMC_GetCmdResp6>
 8007dee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007df0:	69fb      	ldr	r3, [r7, #28]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3720      	adds	r7, #32
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b088      	sub	sp, #32
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007e08:	230d      	movs	r3, #13
 8007e0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e0c:	2340      	movs	r3, #64	; 0x40
 8007e0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e10:	2300      	movs	r3, #0
 8007e12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e1a:	f107 0308 	add.w	r3, r7, #8
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7ff fda5 	bl	8007970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e2a:	210d      	movs	r1, #13
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f82f 	bl	8007e90 <SDMMC_GetCmdResp1>
 8007e32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e34:	69fb      	ldr	r3, [r7, #28]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3720      	adds	r7, #32
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007e40:	b490      	push	{r4, r7}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e48:	4b0f      	ldr	r3, [pc, #60]	; (8007e88 <SDMMC_GetCmdError+0x48>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a0f      	ldr	r2, [pc, #60]	; (8007e8c <SDMMC_GetCmdError+0x4c>)
 8007e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e52:	0a5b      	lsrs	r3, r3, #9
 8007e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e58:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007e5c:	4623      	mov	r3, r4
 8007e5e:	1e5c      	subs	r4, r3, #1
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d102      	bne.n	8007e6a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e68:	e009      	b.n	8007e7e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0f2      	beq.n	8007e5c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	22c5      	movs	r2, #197	; 0xc5
 8007e7a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bc90      	pop	{r4, r7}
 8007e86:	4770      	bx	lr
 8007e88:	20000078 	.word	0x20000078
 8007e8c:	10624dd3 	.word	0x10624dd3

08007e90 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007e90:	b590      	push	{r4, r7, lr}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007e9e:	4b6f      	ldr	r3, [pc, #444]	; (800805c <SDMMC_GetCmdResp1+0x1cc>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a6f      	ldr	r2, [pc, #444]	; (8008060 <SDMMC_GetCmdResp1+0x1d0>)
 8007ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea8:	0a5b      	lsrs	r3, r3, #9
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007eb0:	4623      	mov	r3, r4
 8007eb2:	1e5c      	subs	r4, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d102      	bne.n	8007ebe <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007eb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ebc:	e0c9      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d0f0      	beq.n	8007eb0 <SDMMC_GetCmdResp1+0x20>
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1eb      	bne.n	8007eb0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007edc:	f003 0304 	and.w	r3, r3, #4
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d004      	beq.n	8007eee <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2204      	movs	r2, #4
 8007ee8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007eea:	2304      	movs	r3, #4
 8007eec:	e0b1      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d004      	beq.n	8007f04 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2201      	movs	r2, #1
 8007efe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e0a6      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	22c5      	movs	r2, #197	; 0xc5
 8007f08:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f7ff fd5a 	bl	80079c4 <SDIO_GetCommandResponse>
 8007f10:	4603      	mov	r3, r0
 8007f12:	461a      	mov	r2, r3
 8007f14:	7afb      	ldrb	r3, [r7, #11]
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d001      	beq.n	8007f1e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e099      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007f1e:	2100      	movs	r1, #0
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7ff fd5c 	bl	80079de <SDIO_GetResponse>
 8007f26:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	4b4e      	ldr	r3, [pc, #312]	; (8008064 <SDMMC_GetCmdResp1+0x1d4>)
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8007f32:	2300      	movs	r3, #0
 8007f34:	e08d      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	da02      	bge.n	8007f42 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007f3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f40:	e087      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007f4c:	2340      	movs	r3, #64	; 0x40
 8007f4e:	e080      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007f5a:	2380      	movs	r3, #128	; 0x80
 8007f5c:	e079      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d002      	beq.n	8007f6e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f6c:	e071      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f7c:	e069      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f8c:	e061      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007f98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f9c:	e059      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fac:	e051      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007fbc:	e049      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007fc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007fcc:	e041      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007fd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fdc:	e039      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007fec:	e031      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007ff8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007ffc:	e029      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008008:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800800c:	e021      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008018:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800801c:	e019      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008028:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800802c:	e011      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008038:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800803c:	e009      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f003 0308 	and.w	r3, r3, #8
 8008044:	2b00      	cmp	r3, #0
 8008046:	d002      	beq.n	800804e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008048:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800804c:	e001      	b.n	8008052 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800804e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008052:	4618      	mov	r0, r3
 8008054:	371c      	adds	r7, #28
 8008056:	46bd      	mov	sp, r7
 8008058:	bd90      	pop	{r4, r7, pc}
 800805a:	bf00      	nop
 800805c:	20000078 	.word	0x20000078
 8008060:	10624dd3 	.word	0x10624dd3
 8008064:	fdffe008 	.word	0xfdffe008

08008068 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008068:	b490      	push	{r4, r7}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008070:	4b1e      	ldr	r3, [pc, #120]	; (80080ec <SDMMC_GetCmdResp2+0x84>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a1e      	ldr	r2, [pc, #120]	; (80080f0 <SDMMC_GetCmdResp2+0x88>)
 8008076:	fba2 2303 	umull	r2, r3, r2, r3
 800807a:	0a5b      	lsrs	r3, r3, #9
 800807c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008080:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008084:	4623      	mov	r3, r4
 8008086:	1e5c      	subs	r4, r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	d102      	bne.n	8008092 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800808c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008090:	e026      	b.n	80080e0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008096:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0f0      	beq.n	8008084 <SDMMC_GetCmdResp2+0x1c>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1eb      	bne.n	8008084 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b0:	f003 0304 	and.w	r3, r3, #4
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d004      	beq.n	80080c2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2204      	movs	r2, #4
 80080bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080be:	2304      	movs	r3, #4
 80080c0:	e00e      	b.n	80080e0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d004      	beq.n	80080d8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e003      	b.n	80080e0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	22c5      	movs	r2, #197	; 0xc5
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bc90      	pop	{r4, r7}
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	20000078 	.word	0x20000078
 80080f0:	10624dd3 	.word	0x10624dd3

080080f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80080f4:	b490      	push	{r4, r7}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80080fc:	4b18      	ldr	r3, [pc, #96]	; (8008160 <SDMMC_GetCmdResp3+0x6c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a18      	ldr	r2, [pc, #96]	; (8008164 <SDMMC_GetCmdResp3+0x70>)
 8008102:	fba2 2303 	umull	r2, r3, r2, r3
 8008106:	0a5b      	lsrs	r3, r3, #9
 8008108:	f241 3288 	movw	r2, #5000	; 0x1388
 800810c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008110:	4623      	mov	r3, r4
 8008112:	1e5c      	subs	r4, r3, #1
 8008114:	2b00      	cmp	r3, #0
 8008116:	d102      	bne.n	800811e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008118:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800811c:	e01b      	b.n	8008156 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008122:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0f0      	beq.n	8008110 <SDMMC_GetCmdResp3+0x1c>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1eb      	bne.n	8008110 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d004      	beq.n	800814e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2204      	movs	r2, #4
 8008148:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800814a:	2304      	movs	r3, #4
 800814c:	e003      	b.n	8008156 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	22c5      	movs	r2, #197	; 0xc5
 8008152:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bc90      	pop	{r4, r7}
 800815e:	4770      	bx	lr
 8008160:	20000078 	.word	0x20000078
 8008164:	10624dd3 	.word	0x10624dd3

08008168 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008168:	b590      	push	{r4, r7, lr}
 800816a:	b087      	sub	sp, #28
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	460b      	mov	r3, r1
 8008172:	607a      	str	r2, [r7, #4]
 8008174:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008176:	4b34      	ldr	r3, [pc, #208]	; (8008248 <SDMMC_GetCmdResp6+0xe0>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a34      	ldr	r2, [pc, #208]	; (800824c <SDMMC_GetCmdResp6+0xe4>)
 800817c:	fba2 2303 	umull	r2, r3, r2, r3
 8008180:	0a5b      	lsrs	r3, r3, #9
 8008182:	f241 3288 	movw	r2, #5000	; 0x1388
 8008186:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800818a:	4623      	mov	r3, r4
 800818c:	1e5c      	subs	r4, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d102      	bne.n	8008198 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008192:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008196:	e052      	b.n	800823e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d0f0      	beq.n	800818a <SDMMC_GetCmdResp6+0x22>
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1eb      	bne.n	800818a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b6:	f003 0304 	and.w	r3, r3, #4
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d004      	beq.n	80081c8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2204      	movs	r2, #4
 80081c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80081c4:	2304      	movs	r3, #4
 80081c6:	e03a      	b.n	800823e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d004      	beq.n	80081de <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081da:	2301      	movs	r3, #1
 80081dc:	e02f      	b.n	800823e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f7ff fbf0 	bl	80079c4 <SDIO_GetCommandResponse>
 80081e4:	4603      	mov	r3, r0
 80081e6:	461a      	mov	r2, r3
 80081e8:	7afb      	ldrb	r3, [r7, #11]
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d001      	beq.n	80081f2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e025      	b.n	800823e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	22c5      	movs	r2, #197	; 0xc5
 80081f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80081f8:	2100      	movs	r1, #0
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f7ff fbef 	bl	80079de <SDIO_GetResponse>
 8008200:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d106      	bne.n	800821a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	0c1b      	lsrs	r3, r3, #16
 8008210:	b29a      	uxth	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008216:	2300      	movs	r3, #0
 8008218:	e011      	b.n	800823e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008228:	e009      	b.n	800823e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008238:	e001      	b.n	800823e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800823a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800823e:	4618      	mov	r0, r3
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	bd90      	pop	{r4, r7, pc}
 8008246:	bf00      	nop
 8008248:	20000078 	.word	0x20000078
 800824c:	10624dd3 	.word	0x10624dd3

08008250 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008250:	b490      	push	{r4, r7}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008258:	4b21      	ldr	r3, [pc, #132]	; (80082e0 <SDMMC_GetCmdResp7+0x90>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a21      	ldr	r2, [pc, #132]	; (80082e4 <SDMMC_GetCmdResp7+0x94>)
 800825e:	fba2 2303 	umull	r2, r3, r2, r3
 8008262:	0a5b      	lsrs	r3, r3, #9
 8008264:	f241 3288 	movw	r2, #5000	; 0x1388
 8008268:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800826c:	4623      	mov	r3, r4
 800826e:	1e5c      	subs	r4, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d102      	bne.n	800827a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008274:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008278:	e02c      	b.n	80082d4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800827e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0f0      	beq.n	800826c <SDMMC_GetCmdResp7+0x1c>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1eb      	bne.n	800826c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008298:	f003 0304 	and.w	r3, r3, #4
 800829c:	2b00      	cmp	r3, #0
 800829e:	d004      	beq.n	80082aa <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2204      	movs	r2, #4
 80082a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80082a6:	2304      	movs	r3, #4
 80082a8:	e014      	b.n	80082d4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d004      	beq.n	80082c0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80082bc:	2301      	movs	r3, #1
 80082be:	e009      	b.n	80082d4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2240      	movs	r2, #64	; 0x40
 80082d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80082d2:	2300      	movs	r3, #0
  
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bc90      	pop	{r4, r7}
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	20000078 	.word	0x20000078
 80082e4:	10624dd3 	.word	0x10624dd3

080082e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80082ec:	4904      	ldr	r1, [pc, #16]	; (8008300 <MX_FATFS_Init+0x18>)
 80082ee:	4805      	ldr	r0, [pc, #20]	; (8008304 <MX_FATFS_Init+0x1c>)
 80082f0:	f000 f9bc 	bl	800866c <FATFS_LinkDriver>
 80082f4:	4603      	mov	r3, r0
 80082f6:	461a      	mov	r2, r3
 80082f8:	4b03      	ldr	r3, [pc, #12]	; (8008308 <MX_FATFS_Init+0x20>)
 80082fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80082fc:	bf00      	nop
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	20000514 	.word	0x20000514
 8008304:	080177a0 	.word	0x080177a0
 8008308:	20000510 	.word	0x20000510

0800830c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008316:	f000 f86b 	bl	80083f0 <BSP_SD_IsDetected>
 800831a:	4603      	mov	r3, r0
 800831c:	2b01      	cmp	r3, #1
 800831e:	d001      	beq.n	8008324 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e005      	b.n	8008330 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008324:	4804      	ldr	r0, [pc, #16]	; (8008338 <BSP_SD_Init+0x2c>)
 8008326:	f7fd fcb4 	bl	8005c92 <HAL_SD_Init>
 800832a:	4603      	mov	r3, r0
 800832c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800832e:	79fb      	ldrb	r3, [r7, #7]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	200003e4 	.word	0x200003e4

0800833c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b088      	sub	sp, #32
 8008340:	af02      	add	r7, sp, #8
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
 8008348:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	68f9      	ldr	r1, [r7, #12]
 8008358:	4806      	ldr	r0, [pc, #24]	; (8008374 <BSP_SD_ReadBlocks+0x38>)
 800835a:	f7fd fd2b 	bl	8005db4 <HAL_SD_ReadBlocks>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	200003e4 	.word	0x200003e4

08008378 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af02      	add	r7, sp, #8
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	68f9      	ldr	r1, [r7, #12]
 8008394:	4806      	ldr	r0, [pc, #24]	; (80083b0 <BSP_SD_WriteBlocks+0x38>)
 8008396:	f7fd ff05 	bl	80061a4 <HAL_SD_WriteBlocks>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	200003e4 	.word	0x200003e4

080083b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80083b8:	4805      	ldr	r0, [pc, #20]	; (80083d0 <BSP_SD_GetCardState+0x1c>)
 80083ba:	f7fe fa63 	bl	8006884 <HAL_SD_GetCardState>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	bf14      	ite	ne
 80083c4:	2301      	movne	r3, #1
 80083c6:	2300      	moveq	r3, #0
 80083c8:	b2db      	uxtb	r3, r3
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	200003e4 	.word	0x200003e4

080083d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	4803      	ldr	r0, [pc, #12]	; (80083ec <BSP_SD_GetCardInfo+0x18>)
 80083e0:	f7fe fa24 	bl	800682c <HAL_SD_GetCardInfo>
}
 80083e4:	bf00      	nop
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	200003e4 	.word	0x200003e4

080083f0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80083f6:	2301      	movs	r3, #1
 80083f8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80083fa:	79fb      	ldrb	r3, [r7, #7]
 80083fc:	b2db      	uxtb	r3, r3
}
 80083fe:	4618      	mov	r0, r3
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
	...

0800840c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008416:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <SD_CheckStatus+0x38>)
 8008418:	2201      	movs	r2, #1
 800841a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800841c:	f7ff ffca 	bl	80083b4 <BSP_SD_GetCardState>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d107      	bne.n	8008436 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008426:	4b07      	ldr	r3, [pc, #28]	; (8008444 <SD_CheckStatus+0x38>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	b2db      	uxtb	r3, r3
 800842c:	f023 0301 	bic.w	r3, r3, #1
 8008430:	b2da      	uxtb	r2, r3
 8008432:	4b04      	ldr	r3, [pc, #16]	; (8008444 <SD_CheckStatus+0x38>)
 8008434:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008436:	4b03      	ldr	r3, [pc, #12]	; (8008444 <SD_CheckStatus+0x38>)
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	b2db      	uxtb	r3, r3
}
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	200000f9 	.word	0x200000f9

08008448 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	4603      	mov	r3, r0
 8008450:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008452:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <SD_initialize+0x38>)
 8008454:	2201      	movs	r2, #1
 8008456:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008458:	f7ff ff58 	bl	800830c <BSP_SD_Init>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d107      	bne.n	8008472 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008462:	79fb      	ldrb	r3, [r7, #7]
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff ffd1 	bl	800840c <SD_CheckStatus>
 800846a:	4603      	mov	r3, r0
 800846c:	461a      	mov	r2, r3
 800846e:	4b04      	ldr	r3, [pc, #16]	; (8008480 <SD_initialize+0x38>)
 8008470:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008472:	4b03      	ldr	r3, [pc, #12]	; (8008480 <SD_initialize+0x38>)
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	b2db      	uxtb	r3, r3
}
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	200000f9 	.word	0x200000f9

08008484 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	4603      	mov	r3, r0
 800848c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800848e:	79fb      	ldrb	r3, [r7, #7]
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff ffbb 	bl	800840c <SD_CheckStatus>
 8008496:	4603      	mov	r3, r0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	607a      	str	r2, [r7, #4]
 80084aa:	603b      	str	r3, [r7, #0]
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80084b4:	f04f 33ff 	mov.w	r3, #4294967295
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	6879      	ldr	r1, [r7, #4]
 80084bc:	68b8      	ldr	r0, [r7, #8]
 80084be:	f7ff ff3d 	bl	800833c <BSP_SD_ReadBlocks>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d107      	bne.n	80084d8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80084c8:	bf00      	nop
 80084ca:	f7ff ff73 	bl	80083b4 <BSP_SD_GetCardState>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1fa      	bne.n	80084ca <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80084d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b086      	sub	sp, #24
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
 80084ec:	603b      	str	r3, [r7, #0]
 80084ee:	4603      	mov	r3, r0
 80084f0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80084f6:	f04f 33ff 	mov.w	r3, #4294967295
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	6879      	ldr	r1, [r7, #4]
 80084fe:	68b8      	ldr	r0, [r7, #8]
 8008500:	f7ff ff3a 	bl	8008378 <BSP_SD_WriteBlocks>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d107      	bne.n	800851a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800850a:	bf00      	nop
 800850c:	f7ff ff52 	bl	80083b4 <BSP_SD_GetCardState>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1fa      	bne.n	800850c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800851a:	7dfb      	ldrb	r3, [r7, #23]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08c      	sub	sp, #48	; 0x30
 8008528:	af00      	add	r7, sp, #0
 800852a:	4603      	mov	r3, r0
 800852c:	603a      	str	r2, [r7, #0]
 800852e:	71fb      	strb	r3, [r7, #7]
 8008530:	460b      	mov	r3, r1
 8008532:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800853a:	4b25      	ldr	r3, [pc, #148]	; (80085d0 <SD_ioctl+0xac>)
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	b2db      	uxtb	r3, r3
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <SD_ioctl+0x28>
 8008548:	2303      	movs	r3, #3
 800854a:	e03c      	b.n	80085c6 <SD_ioctl+0xa2>

  switch (cmd)
 800854c:	79bb      	ldrb	r3, [r7, #6]
 800854e:	2b03      	cmp	r3, #3
 8008550:	d834      	bhi.n	80085bc <SD_ioctl+0x98>
 8008552:	a201      	add	r2, pc, #4	; (adr r2, 8008558 <SD_ioctl+0x34>)
 8008554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008558:	08008569 	.word	0x08008569
 800855c:	08008571 	.word	0x08008571
 8008560:	08008589 	.word	0x08008589
 8008564:	080085a3 	.word	0x080085a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800856e:	e028      	b.n	80085c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008570:	f107 030c 	add.w	r3, r7, #12
 8008574:	4618      	mov	r0, r3
 8008576:	f7ff ff2d 	bl	80083d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800857a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008586:	e01c      	b.n	80085c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008588:	f107 030c 	add.w	r3, r7, #12
 800858c:	4618      	mov	r0, r3
 800858e:	f7ff ff21 	bl	80083d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008594:	b29a      	uxth	r2, r3
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80085a0:	e00f      	b.n	80085c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80085a2:	f107 030c 	add.w	r3, r7, #12
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff ff14 	bl	80083d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	0a5a      	lsrs	r2, r3, #9
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80085ba:	e002      	b.n	80085c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80085bc:	2304      	movs	r3, #4
 80085be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80085c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3730      	adds	r7, #48	; 0x30
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	200000f9 	.word	0x200000f9

080085d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b087      	sub	sp, #28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	4613      	mov	r3, r2
 80085e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80085e2:	2301      	movs	r3, #1
 80085e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80085ea:	4b1f      	ldr	r3, [pc, #124]	; (8008668 <FATFS_LinkDriverEx+0x94>)
 80085ec:	7a5b      	ldrb	r3, [r3, #9]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d131      	bne.n	8008658 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80085f4:	4b1c      	ldr	r3, [pc, #112]	; (8008668 <FATFS_LinkDriverEx+0x94>)
 80085f6:	7a5b      	ldrb	r3, [r3, #9]
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	461a      	mov	r2, r3
 80085fc:	4b1a      	ldr	r3, [pc, #104]	; (8008668 <FATFS_LinkDriverEx+0x94>)
 80085fe:	2100      	movs	r1, #0
 8008600:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008602:	4b19      	ldr	r3, [pc, #100]	; (8008668 <FATFS_LinkDriverEx+0x94>)
 8008604:	7a5b      	ldrb	r3, [r3, #9]
 8008606:	b2db      	uxtb	r3, r3
 8008608:	4a17      	ldr	r2, [pc, #92]	; (8008668 <FATFS_LinkDriverEx+0x94>)
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4413      	add	r3, r2
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008612:	4b15      	ldr	r3, [pc, #84]	; (8008668 <FATFS_LinkDriverEx+0x94>)
 8008614:	7a5b      	ldrb	r3, [r3, #9]
 8008616:	b2db      	uxtb	r3, r3
 8008618:	461a      	mov	r2, r3
 800861a:	4b13      	ldr	r3, [pc, #76]	; (8008668 <FATFS_LinkDriverEx+0x94>)
 800861c:	4413      	add	r3, r2
 800861e:	79fa      	ldrb	r2, [r7, #7]
 8008620:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008622:	4b11      	ldr	r3, [pc, #68]	; (8008668 <FATFS_LinkDriverEx+0x94>)
 8008624:	7a5b      	ldrb	r3, [r3, #9]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	b2d1      	uxtb	r1, r2
 800862c:	4a0e      	ldr	r2, [pc, #56]	; (8008668 <FATFS_LinkDriverEx+0x94>)
 800862e:	7251      	strb	r1, [r2, #9]
 8008630:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008632:	7dbb      	ldrb	r3, [r7, #22]
 8008634:	3330      	adds	r3, #48	; 0x30
 8008636:	b2da      	uxtb	r2, r3
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	3301      	adds	r3, #1
 8008640:	223a      	movs	r2, #58	; 0x3a
 8008642:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	3302      	adds	r3, #2
 8008648:	222f      	movs	r2, #47	; 0x2f
 800864a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	3303      	adds	r3, #3
 8008650:	2200      	movs	r2, #0
 8008652:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008654:	2300      	movs	r3, #0
 8008656:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008658:	7dfb      	ldrb	r3, [r7, #23]
}
 800865a:	4618      	mov	r0, r3
 800865c:	371c      	adds	r7, #28
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	20000304 	.word	0x20000304

0800866c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008676:	2200      	movs	r2, #0
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f7ff ffaa 	bl	80085d4 <FATFS_LinkDriverEx>
 8008680:	4603      	mov	r3, r0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <calloc>:
 800868c:	4b02      	ldr	r3, [pc, #8]	; (8008698 <calloc+0xc>)
 800868e:	460a      	mov	r2, r1
 8008690:	4601      	mov	r1, r0
 8008692:	6818      	ldr	r0, [r3, #0]
 8008694:	f000 b83e 	b.w	8008714 <_calloc_r>
 8008698:	200000fc 	.word	0x200000fc

0800869c <__libc_init_array>:
 800869c:	b570      	push	{r4, r5, r6, lr}
 800869e:	4e0d      	ldr	r6, [pc, #52]	; (80086d4 <__libc_init_array+0x38>)
 80086a0:	4c0d      	ldr	r4, [pc, #52]	; (80086d8 <__libc_init_array+0x3c>)
 80086a2:	1ba4      	subs	r4, r4, r6
 80086a4:	10a4      	asrs	r4, r4, #2
 80086a6:	2500      	movs	r5, #0
 80086a8:	42a5      	cmp	r5, r4
 80086aa:	d109      	bne.n	80086c0 <__libc_init_array+0x24>
 80086ac:	4e0b      	ldr	r6, [pc, #44]	; (80086dc <__libc_init_array+0x40>)
 80086ae:	4c0c      	ldr	r4, [pc, #48]	; (80086e0 <__libc_init_array+0x44>)
 80086b0:	f002 f864 	bl	800a77c <_init>
 80086b4:	1ba4      	subs	r4, r4, r6
 80086b6:	10a4      	asrs	r4, r4, #2
 80086b8:	2500      	movs	r5, #0
 80086ba:	42a5      	cmp	r5, r4
 80086bc:	d105      	bne.n	80086ca <__libc_init_array+0x2e>
 80086be:	bd70      	pop	{r4, r5, r6, pc}
 80086c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086c4:	4798      	blx	r3
 80086c6:	3501      	adds	r5, #1
 80086c8:	e7ee      	b.n	80086a8 <__libc_init_array+0xc>
 80086ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086ce:	4798      	blx	r3
 80086d0:	3501      	adds	r5, #1
 80086d2:	e7f2      	b.n	80086ba <__libc_init_array+0x1e>
 80086d4:	08017a18 	.word	0x08017a18
 80086d8:	08017a18 	.word	0x08017a18
 80086dc:	08017a18 	.word	0x08017a18
 80086e0:	08017a1c 	.word	0x08017a1c

080086e4 <malloc>:
 80086e4:	4b02      	ldr	r3, [pc, #8]	; (80086f0 <malloc+0xc>)
 80086e6:	4601      	mov	r1, r0
 80086e8:	6818      	ldr	r0, [r3, #0]
 80086ea:	f000 b86f 	b.w	80087cc <_malloc_r>
 80086ee:	bf00      	nop
 80086f0:	200000fc 	.word	0x200000fc

080086f4 <free>:
 80086f4:	4b02      	ldr	r3, [pc, #8]	; (8008700 <free+0xc>)
 80086f6:	4601      	mov	r1, r0
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	f000 b819 	b.w	8008730 <_free_r>
 80086fe:	bf00      	nop
 8008700:	200000fc 	.word	0x200000fc

08008704 <memset>:
 8008704:	4402      	add	r2, r0
 8008706:	4603      	mov	r3, r0
 8008708:	4293      	cmp	r3, r2
 800870a:	d100      	bne.n	800870e <memset+0xa>
 800870c:	4770      	bx	lr
 800870e:	f803 1b01 	strb.w	r1, [r3], #1
 8008712:	e7f9      	b.n	8008708 <memset+0x4>

08008714 <_calloc_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	fb02 f401 	mul.w	r4, r2, r1
 800871a:	4621      	mov	r1, r4
 800871c:	f000 f856 	bl	80087cc <_malloc_r>
 8008720:	4605      	mov	r5, r0
 8008722:	b118      	cbz	r0, 800872c <_calloc_r+0x18>
 8008724:	4622      	mov	r2, r4
 8008726:	2100      	movs	r1, #0
 8008728:	f7ff ffec 	bl	8008704 <memset>
 800872c:	4628      	mov	r0, r5
 800872e:	bd38      	pop	{r3, r4, r5, pc}

08008730 <_free_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4605      	mov	r5, r0
 8008734:	2900      	cmp	r1, #0
 8008736:	d045      	beq.n	80087c4 <_free_r+0x94>
 8008738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800873c:	1f0c      	subs	r4, r1, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	bfb8      	it	lt
 8008742:	18e4      	addlt	r4, r4, r3
 8008744:	f001 fb85 	bl	8009e52 <__malloc_lock>
 8008748:	4a1f      	ldr	r2, [pc, #124]	; (80087c8 <_free_r+0x98>)
 800874a:	6813      	ldr	r3, [r2, #0]
 800874c:	4610      	mov	r0, r2
 800874e:	b933      	cbnz	r3, 800875e <_free_r+0x2e>
 8008750:	6063      	str	r3, [r4, #4]
 8008752:	6014      	str	r4, [r2, #0]
 8008754:	4628      	mov	r0, r5
 8008756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800875a:	f001 bb7b 	b.w	8009e54 <__malloc_unlock>
 800875e:	42a3      	cmp	r3, r4
 8008760:	d90c      	bls.n	800877c <_free_r+0x4c>
 8008762:	6821      	ldr	r1, [r4, #0]
 8008764:	1862      	adds	r2, r4, r1
 8008766:	4293      	cmp	r3, r2
 8008768:	bf04      	itt	eq
 800876a:	681a      	ldreq	r2, [r3, #0]
 800876c:	685b      	ldreq	r3, [r3, #4]
 800876e:	6063      	str	r3, [r4, #4]
 8008770:	bf04      	itt	eq
 8008772:	1852      	addeq	r2, r2, r1
 8008774:	6022      	streq	r2, [r4, #0]
 8008776:	6004      	str	r4, [r0, #0]
 8008778:	e7ec      	b.n	8008754 <_free_r+0x24>
 800877a:	4613      	mov	r3, r2
 800877c:	685a      	ldr	r2, [r3, #4]
 800877e:	b10a      	cbz	r2, 8008784 <_free_r+0x54>
 8008780:	42a2      	cmp	r2, r4
 8008782:	d9fa      	bls.n	800877a <_free_r+0x4a>
 8008784:	6819      	ldr	r1, [r3, #0]
 8008786:	1858      	adds	r0, r3, r1
 8008788:	42a0      	cmp	r0, r4
 800878a:	d10b      	bne.n	80087a4 <_free_r+0x74>
 800878c:	6820      	ldr	r0, [r4, #0]
 800878e:	4401      	add	r1, r0
 8008790:	1858      	adds	r0, r3, r1
 8008792:	4282      	cmp	r2, r0
 8008794:	6019      	str	r1, [r3, #0]
 8008796:	d1dd      	bne.n	8008754 <_free_r+0x24>
 8008798:	6810      	ldr	r0, [r2, #0]
 800879a:	6852      	ldr	r2, [r2, #4]
 800879c:	605a      	str	r2, [r3, #4]
 800879e:	4401      	add	r1, r0
 80087a0:	6019      	str	r1, [r3, #0]
 80087a2:	e7d7      	b.n	8008754 <_free_r+0x24>
 80087a4:	d902      	bls.n	80087ac <_free_r+0x7c>
 80087a6:	230c      	movs	r3, #12
 80087a8:	602b      	str	r3, [r5, #0]
 80087aa:	e7d3      	b.n	8008754 <_free_r+0x24>
 80087ac:	6820      	ldr	r0, [r4, #0]
 80087ae:	1821      	adds	r1, r4, r0
 80087b0:	428a      	cmp	r2, r1
 80087b2:	bf04      	itt	eq
 80087b4:	6811      	ldreq	r1, [r2, #0]
 80087b6:	6852      	ldreq	r2, [r2, #4]
 80087b8:	6062      	str	r2, [r4, #4]
 80087ba:	bf04      	itt	eq
 80087bc:	1809      	addeq	r1, r1, r0
 80087be:	6021      	streq	r1, [r4, #0]
 80087c0:	605c      	str	r4, [r3, #4]
 80087c2:	e7c7      	b.n	8008754 <_free_r+0x24>
 80087c4:	bd38      	pop	{r3, r4, r5, pc}
 80087c6:	bf00      	nop
 80087c8:	20000310 	.word	0x20000310

080087cc <_malloc_r>:
 80087cc:	b570      	push	{r4, r5, r6, lr}
 80087ce:	1ccd      	adds	r5, r1, #3
 80087d0:	f025 0503 	bic.w	r5, r5, #3
 80087d4:	3508      	adds	r5, #8
 80087d6:	2d0c      	cmp	r5, #12
 80087d8:	bf38      	it	cc
 80087da:	250c      	movcc	r5, #12
 80087dc:	2d00      	cmp	r5, #0
 80087de:	4606      	mov	r6, r0
 80087e0:	db01      	blt.n	80087e6 <_malloc_r+0x1a>
 80087e2:	42a9      	cmp	r1, r5
 80087e4:	d903      	bls.n	80087ee <_malloc_r+0x22>
 80087e6:	230c      	movs	r3, #12
 80087e8:	6033      	str	r3, [r6, #0]
 80087ea:	2000      	movs	r0, #0
 80087ec:	bd70      	pop	{r4, r5, r6, pc}
 80087ee:	f001 fb30 	bl	8009e52 <__malloc_lock>
 80087f2:	4a21      	ldr	r2, [pc, #132]	; (8008878 <_malloc_r+0xac>)
 80087f4:	6814      	ldr	r4, [r2, #0]
 80087f6:	4621      	mov	r1, r4
 80087f8:	b991      	cbnz	r1, 8008820 <_malloc_r+0x54>
 80087fa:	4c20      	ldr	r4, [pc, #128]	; (800887c <_malloc_r+0xb0>)
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	b91b      	cbnz	r3, 8008808 <_malloc_r+0x3c>
 8008800:	4630      	mov	r0, r6
 8008802:	f000 fc99 	bl	8009138 <_sbrk_r>
 8008806:	6020      	str	r0, [r4, #0]
 8008808:	4629      	mov	r1, r5
 800880a:	4630      	mov	r0, r6
 800880c:	f000 fc94 	bl	8009138 <_sbrk_r>
 8008810:	1c43      	adds	r3, r0, #1
 8008812:	d124      	bne.n	800885e <_malloc_r+0x92>
 8008814:	230c      	movs	r3, #12
 8008816:	6033      	str	r3, [r6, #0]
 8008818:	4630      	mov	r0, r6
 800881a:	f001 fb1b 	bl	8009e54 <__malloc_unlock>
 800881e:	e7e4      	b.n	80087ea <_malloc_r+0x1e>
 8008820:	680b      	ldr	r3, [r1, #0]
 8008822:	1b5b      	subs	r3, r3, r5
 8008824:	d418      	bmi.n	8008858 <_malloc_r+0x8c>
 8008826:	2b0b      	cmp	r3, #11
 8008828:	d90f      	bls.n	800884a <_malloc_r+0x7e>
 800882a:	600b      	str	r3, [r1, #0]
 800882c:	50cd      	str	r5, [r1, r3]
 800882e:	18cc      	adds	r4, r1, r3
 8008830:	4630      	mov	r0, r6
 8008832:	f001 fb0f 	bl	8009e54 <__malloc_unlock>
 8008836:	f104 000b 	add.w	r0, r4, #11
 800883a:	1d23      	adds	r3, r4, #4
 800883c:	f020 0007 	bic.w	r0, r0, #7
 8008840:	1ac3      	subs	r3, r0, r3
 8008842:	d0d3      	beq.n	80087ec <_malloc_r+0x20>
 8008844:	425a      	negs	r2, r3
 8008846:	50e2      	str	r2, [r4, r3]
 8008848:	e7d0      	b.n	80087ec <_malloc_r+0x20>
 800884a:	428c      	cmp	r4, r1
 800884c:	684b      	ldr	r3, [r1, #4]
 800884e:	bf16      	itet	ne
 8008850:	6063      	strne	r3, [r4, #4]
 8008852:	6013      	streq	r3, [r2, #0]
 8008854:	460c      	movne	r4, r1
 8008856:	e7eb      	b.n	8008830 <_malloc_r+0x64>
 8008858:	460c      	mov	r4, r1
 800885a:	6849      	ldr	r1, [r1, #4]
 800885c:	e7cc      	b.n	80087f8 <_malloc_r+0x2c>
 800885e:	1cc4      	adds	r4, r0, #3
 8008860:	f024 0403 	bic.w	r4, r4, #3
 8008864:	42a0      	cmp	r0, r4
 8008866:	d005      	beq.n	8008874 <_malloc_r+0xa8>
 8008868:	1a21      	subs	r1, r4, r0
 800886a:	4630      	mov	r0, r6
 800886c:	f000 fc64 	bl	8009138 <_sbrk_r>
 8008870:	3001      	adds	r0, #1
 8008872:	d0cf      	beq.n	8008814 <_malloc_r+0x48>
 8008874:	6025      	str	r5, [r4, #0]
 8008876:	e7db      	b.n	8008830 <_malloc_r+0x64>
 8008878:	20000310 	.word	0x20000310
 800887c:	20000314 	.word	0x20000314

08008880 <__cvt>:
 8008880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008884:	ec55 4b10 	vmov	r4, r5, d0
 8008888:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800888a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800888e:	2d00      	cmp	r5, #0
 8008890:	460e      	mov	r6, r1
 8008892:	4691      	mov	r9, r2
 8008894:	4619      	mov	r1, r3
 8008896:	bfb8      	it	lt
 8008898:	4622      	movlt	r2, r4
 800889a:	462b      	mov	r3, r5
 800889c:	f027 0720 	bic.w	r7, r7, #32
 80088a0:	bfbb      	ittet	lt
 80088a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80088a6:	461d      	movlt	r5, r3
 80088a8:	2300      	movge	r3, #0
 80088aa:	232d      	movlt	r3, #45	; 0x2d
 80088ac:	bfb8      	it	lt
 80088ae:	4614      	movlt	r4, r2
 80088b0:	2f46      	cmp	r7, #70	; 0x46
 80088b2:	700b      	strb	r3, [r1, #0]
 80088b4:	d004      	beq.n	80088c0 <__cvt+0x40>
 80088b6:	2f45      	cmp	r7, #69	; 0x45
 80088b8:	d100      	bne.n	80088bc <__cvt+0x3c>
 80088ba:	3601      	adds	r6, #1
 80088bc:	2102      	movs	r1, #2
 80088be:	e000      	b.n	80088c2 <__cvt+0x42>
 80088c0:	2103      	movs	r1, #3
 80088c2:	ab03      	add	r3, sp, #12
 80088c4:	9301      	str	r3, [sp, #4]
 80088c6:	ab02      	add	r3, sp, #8
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	4632      	mov	r2, r6
 80088cc:	4653      	mov	r3, sl
 80088ce:	ec45 4b10 	vmov	d0, r4, r5
 80088d2:	f000 fced 	bl	80092b0 <_dtoa_r>
 80088d6:	2f47      	cmp	r7, #71	; 0x47
 80088d8:	4680      	mov	r8, r0
 80088da:	d102      	bne.n	80088e2 <__cvt+0x62>
 80088dc:	f019 0f01 	tst.w	r9, #1
 80088e0:	d026      	beq.n	8008930 <__cvt+0xb0>
 80088e2:	2f46      	cmp	r7, #70	; 0x46
 80088e4:	eb08 0906 	add.w	r9, r8, r6
 80088e8:	d111      	bne.n	800890e <__cvt+0x8e>
 80088ea:	f898 3000 	ldrb.w	r3, [r8]
 80088ee:	2b30      	cmp	r3, #48	; 0x30
 80088f0:	d10a      	bne.n	8008908 <__cvt+0x88>
 80088f2:	2200      	movs	r2, #0
 80088f4:	2300      	movs	r3, #0
 80088f6:	4620      	mov	r0, r4
 80088f8:	4629      	mov	r1, r5
 80088fa:	f7f8 f905 	bl	8000b08 <__aeabi_dcmpeq>
 80088fe:	b918      	cbnz	r0, 8008908 <__cvt+0x88>
 8008900:	f1c6 0601 	rsb	r6, r6, #1
 8008904:	f8ca 6000 	str.w	r6, [sl]
 8008908:	f8da 3000 	ldr.w	r3, [sl]
 800890c:	4499      	add	r9, r3
 800890e:	2200      	movs	r2, #0
 8008910:	2300      	movs	r3, #0
 8008912:	4620      	mov	r0, r4
 8008914:	4629      	mov	r1, r5
 8008916:	f7f8 f8f7 	bl	8000b08 <__aeabi_dcmpeq>
 800891a:	b938      	cbnz	r0, 800892c <__cvt+0xac>
 800891c:	2230      	movs	r2, #48	; 0x30
 800891e:	9b03      	ldr	r3, [sp, #12]
 8008920:	454b      	cmp	r3, r9
 8008922:	d205      	bcs.n	8008930 <__cvt+0xb0>
 8008924:	1c59      	adds	r1, r3, #1
 8008926:	9103      	str	r1, [sp, #12]
 8008928:	701a      	strb	r2, [r3, #0]
 800892a:	e7f8      	b.n	800891e <__cvt+0x9e>
 800892c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008934:	eba3 0308 	sub.w	r3, r3, r8
 8008938:	4640      	mov	r0, r8
 800893a:	6013      	str	r3, [r2, #0]
 800893c:	b004      	add	sp, #16
 800893e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008942 <__exponent>:
 8008942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008944:	2900      	cmp	r1, #0
 8008946:	4604      	mov	r4, r0
 8008948:	bfba      	itte	lt
 800894a:	4249      	neglt	r1, r1
 800894c:	232d      	movlt	r3, #45	; 0x2d
 800894e:	232b      	movge	r3, #43	; 0x2b
 8008950:	2909      	cmp	r1, #9
 8008952:	f804 2b02 	strb.w	r2, [r4], #2
 8008956:	7043      	strb	r3, [r0, #1]
 8008958:	dd20      	ble.n	800899c <__exponent+0x5a>
 800895a:	f10d 0307 	add.w	r3, sp, #7
 800895e:	461f      	mov	r7, r3
 8008960:	260a      	movs	r6, #10
 8008962:	fb91 f5f6 	sdiv	r5, r1, r6
 8008966:	fb06 1115 	mls	r1, r6, r5, r1
 800896a:	3130      	adds	r1, #48	; 0x30
 800896c:	2d09      	cmp	r5, #9
 800896e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008972:	f103 32ff 	add.w	r2, r3, #4294967295
 8008976:	4629      	mov	r1, r5
 8008978:	dc09      	bgt.n	800898e <__exponent+0x4c>
 800897a:	3130      	adds	r1, #48	; 0x30
 800897c:	3b02      	subs	r3, #2
 800897e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008982:	42bb      	cmp	r3, r7
 8008984:	4622      	mov	r2, r4
 8008986:	d304      	bcc.n	8008992 <__exponent+0x50>
 8008988:	1a10      	subs	r0, r2, r0
 800898a:	b003      	add	sp, #12
 800898c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800898e:	4613      	mov	r3, r2
 8008990:	e7e7      	b.n	8008962 <__exponent+0x20>
 8008992:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008996:	f804 2b01 	strb.w	r2, [r4], #1
 800899a:	e7f2      	b.n	8008982 <__exponent+0x40>
 800899c:	2330      	movs	r3, #48	; 0x30
 800899e:	4419      	add	r1, r3
 80089a0:	7083      	strb	r3, [r0, #2]
 80089a2:	1d02      	adds	r2, r0, #4
 80089a4:	70c1      	strb	r1, [r0, #3]
 80089a6:	e7ef      	b.n	8008988 <__exponent+0x46>

080089a8 <_printf_float>:
 80089a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ac:	b08d      	sub	sp, #52	; 0x34
 80089ae:	460c      	mov	r4, r1
 80089b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80089b4:	4616      	mov	r6, r2
 80089b6:	461f      	mov	r7, r3
 80089b8:	4605      	mov	r5, r0
 80089ba:	f001 fa31 	bl	8009e20 <_localeconv_r>
 80089be:	6803      	ldr	r3, [r0, #0]
 80089c0:	9304      	str	r3, [sp, #16]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7f7 fc24 	bl	8000210 <strlen>
 80089c8:	2300      	movs	r3, #0
 80089ca:	930a      	str	r3, [sp, #40]	; 0x28
 80089cc:	f8d8 3000 	ldr.w	r3, [r8]
 80089d0:	9005      	str	r0, [sp, #20]
 80089d2:	3307      	adds	r3, #7
 80089d4:	f023 0307 	bic.w	r3, r3, #7
 80089d8:	f103 0208 	add.w	r2, r3, #8
 80089dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80089e0:	f8d4 b000 	ldr.w	fp, [r4]
 80089e4:	f8c8 2000 	str.w	r2, [r8]
 80089e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80089f0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80089f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089f8:	9307      	str	r3, [sp, #28]
 80089fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80089fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008a02:	4ba7      	ldr	r3, [pc, #668]	; (8008ca0 <_printf_float+0x2f8>)
 8008a04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a08:	f7f8 f8b0 	bl	8000b6c <__aeabi_dcmpun>
 8008a0c:	bb70      	cbnz	r0, 8008a6c <_printf_float+0xc4>
 8008a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a12:	4ba3      	ldr	r3, [pc, #652]	; (8008ca0 <_printf_float+0x2f8>)
 8008a14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a18:	f7f8 f88a 	bl	8000b30 <__aeabi_dcmple>
 8008a1c:	bb30      	cbnz	r0, 8008a6c <_printf_float+0xc4>
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2300      	movs	r3, #0
 8008a22:	4640      	mov	r0, r8
 8008a24:	4649      	mov	r1, r9
 8008a26:	f7f8 f879 	bl	8000b1c <__aeabi_dcmplt>
 8008a2a:	b110      	cbz	r0, 8008a32 <_printf_float+0x8a>
 8008a2c:	232d      	movs	r3, #45	; 0x2d
 8008a2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a32:	4a9c      	ldr	r2, [pc, #624]	; (8008ca4 <_printf_float+0x2fc>)
 8008a34:	4b9c      	ldr	r3, [pc, #624]	; (8008ca8 <_printf_float+0x300>)
 8008a36:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008a3a:	bf8c      	ite	hi
 8008a3c:	4690      	movhi	r8, r2
 8008a3e:	4698      	movls	r8, r3
 8008a40:	2303      	movs	r3, #3
 8008a42:	f02b 0204 	bic.w	r2, fp, #4
 8008a46:	6123      	str	r3, [r4, #16]
 8008a48:	6022      	str	r2, [r4, #0]
 8008a4a:	f04f 0900 	mov.w	r9, #0
 8008a4e:	9700      	str	r7, [sp, #0]
 8008a50:	4633      	mov	r3, r6
 8008a52:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a54:	4621      	mov	r1, r4
 8008a56:	4628      	mov	r0, r5
 8008a58:	f000 f9e6 	bl	8008e28 <_printf_common>
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	f040 808d 	bne.w	8008b7c <_printf_float+0x1d4>
 8008a62:	f04f 30ff 	mov.w	r0, #4294967295
 8008a66:	b00d      	add	sp, #52	; 0x34
 8008a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6c:	4642      	mov	r2, r8
 8008a6e:	464b      	mov	r3, r9
 8008a70:	4640      	mov	r0, r8
 8008a72:	4649      	mov	r1, r9
 8008a74:	f7f8 f87a 	bl	8000b6c <__aeabi_dcmpun>
 8008a78:	b110      	cbz	r0, 8008a80 <_printf_float+0xd8>
 8008a7a:	4a8c      	ldr	r2, [pc, #560]	; (8008cac <_printf_float+0x304>)
 8008a7c:	4b8c      	ldr	r3, [pc, #560]	; (8008cb0 <_printf_float+0x308>)
 8008a7e:	e7da      	b.n	8008a36 <_printf_float+0x8e>
 8008a80:	6861      	ldr	r1, [r4, #4]
 8008a82:	1c4b      	adds	r3, r1, #1
 8008a84:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008a88:	a80a      	add	r0, sp, #40	; 0x28
 8008a8a:	d13e      	bne.n	8008b0a <_printf_float+0x162>
 8008a8c:	2306      	movs	r3, #6
 8008a8e:	6063      	str	r3, [r4, #4]
 8008a90:	2300      	movs	r3, #0
 8008a92:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008a96:	ab09      	add	r3, sp, #36	; 0x24
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	ec49 8b10 	vmov	d0, r8, r9
 8008a9e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008aa2:	6022      	str	r2, [r4, #0]
 8008aa4:	f8cd a004 	str.w	sl, [sp, #4]
 8008aa8:	6861      	ldr	r1, [r4, #4]
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f7ff fee8 	bl	8008880 <__cvt>
 8008ab0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008ab4:	2b47      	cmp	r3, #71	; 0x47
 8008ab6:	4680      	mov	r8, r0
 8008ab8:	d109      	bne.n	8008ace <_printf_float+0x126>
 8008aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008abc:	1cd8      	adds	r0, r3, #3
 8008abe:	db02      	blt.n	8008ac6 <_printf_float+0x11e>
 8008ac0:	6862      	ldr	r2, [r4, #4]
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	dd47      	ble.n	8008b56 <_printf_float+0x1ae>
 8008ac6:	f1aa 0a02 	sub.w	sl, sl, #2
 8008aca:	fa5f fa8a 	uxtb.w	sl, sl
 8008ace:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008ad2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ad4:	d824      	bhi.n	8008b20 <_printf_float+0x178>
 8008ad6:	3901      	subs	r1, #1
 8008ad8:	4652      	mov	r2, sl
 8008ada:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ade:	9109      	str	r1, [sp, #36]	; 0x24
 8008ae0:	f7ff ff2f 	bl	8008942 <__exponent>
 8008ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ae6:	1813      	adds	r3, r2, r0
 8008ae8:	2a01      	cmp	r2, #1
 8008aea:	4681      	mov	r9, r0
 8008aec:	6123      	str	r3, [r4, #16]
 8008aee:	dc02      	bgt.n	8008af6 <_printf_float+0x14e>
 8008af0:	6822      	ldr	r2, [r4, #0]
 8008af2:	07d1      	lsls	r1, r2, #31
 8008af4:	d501      	bpl.n	8008afa <_printf_float+0x152>
 8008af6:	3301      	adds	r3, #1
 8008af8:	6123      	str	r3, [r4, #16]
 8008afa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0a5      	beq.n	8008a4e <_printf_float+0xa6>
 8008b02:	232d      	movs	r3, #45	; 0x2d
 8008b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b08:	e7a1      	b.n	8008a4e <_printf_float+0xa6>
 8008b0a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008b0e:	f000 8177 	beq.w	8008e00 <_printf_float+0x458>
 8008b12:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008b16:	d1bb      	bne.n	8008a90 <_printf_float+0xe8>
 8008b18:	2900      	cmp	r1, #0
 8008b1a:	d1b9      	bne.n	8008a90 <_printf_float+0xe8>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e7b6      	b.n	8008a8e <_printf_float+0xe6>
 8008b20:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008b24:	d119      	bne.n	8008b5a <_printf_float+0x1b2>
 8008b26:	2900      	cmp	r1, #0
 8008b28:	6863      	ldr	r3, [r4, #4]
 8008b2a:	dd0c      	ble.n	8008b46 <_printf_float+0x19e>
 8008b2c:	6121      	str	r1, [r4, #16]
 8008b2e:	b913      	cbnz	r3, 8008b36 <_printf_float+0x18e>
 8008b30:	6822      	ldr	r2, [r4, #0]
 8008b32:	07d2      	lsls	r2, r2, #31
 8008b34:	d502      	bpl.n	8008b3c <_printf_float+0x194>
 8008b36:	3301      	adds	r3, #1
 8008b38:	440b      	add	r3, r1
 8008b3a:	6123      	str	r3, [r4, #16]
 8008b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3e:	65a3      	str	r3, [r4, #88]	; 0x58
 8008b40:	f04f 0900 	mov.w	r9, #0
 8008b44:	e7d9      	b.n	8008afa <_printf_float+0x152>
 8008b46:	b913      	cbnz	r3, 8008b4e <_printf_float+0x1a6>
 8008b48:	6822      	ldr	r2, [r4, #0]
 8008b4a:	07d0      	lsls	r0, r2, #31
 8008b4c:	d501      	bpl.n	8008b52 <_printf_float+0x1aa>
 8008b4e:	3302      	adds	r3, #2
 8008b50:	e7f3      	b.n	8008b3a <_printf_float+0x192>
 8008b52:	2301      	movs	r3, #1
 8008b54:	e7f1      	b.n	8008b3a <_printf_float+0x192>
 8008b56:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008b5a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	db05      	blt.n	8008b6e <_printf_float+0x1c6>
 8008b62:	6822      	ldr	r2, [r4, #0]
 8008b64:	6123      	str	r3, [r4, #16]
 8008b66:	07d1      	lsls	r1, r2, #31
 8008b68:	d5e8      	bpl.n	8008b3c <_printf_float+0x194>
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	e7e5      	b.n	8008b3a <_printf_float+0x192>
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	bfd4      	ite	le
 8008b72:	f1c3 0302 	rsble	r3, r3, #2
 8008b76:	2301      	movgt	r3, #1
 8008b78:	4413      	add	r3, r2
 8008b7a:	e7de      	b.n	8008b3a <_printf_float+0x192>
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	055a      	lsls	r2, r3, #21
 8008b80:	d407      	bmi.n	8008b92 <_printf_float+0x1ea>
 8008b82:	6923      	ldr	r3, [r4, #16]
 8008b84:	4642      	mov	r2, r8
 8008b86:	4631      	mov	r1, r6
 8008b88:	4628      	mov	r0, r5
 8008b8a:	47b8      	blx	r7
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d12b      	bne.n	8008be8 <_printf_float+0x240>
 8008b90:	e767      	b.n	8008a62 <_printf_float+0xba>
 8008b92:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008b96:	f240 80dc 	bls.w	8008d52 <_printf_float+0x3aa>
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ba2:	f7f7 ffb1 	bl	8000b08 <__aeabi_dcmpeq>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d033      	beq.n	8008c12 <_printf_float+0x26a>
 8008baa:	2301      	movs	r3, #1
 8008bac:	4a41      	ldr	r2, [pc, #260]	; (8008cb4 <_printf_float+0x30c>)
 8008bae:	4631      	mov	r1, r6
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	47b8      	blx	r7
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	f43f af54 	beq.w	8008a62 <_printf_float+0xba>
 8008bba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	db02      	blt.n	8008bc8 <_printf_float+0x220>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	07d8      	lsls	r0, r3, #31
 8008bc6:	d50f      	bpl.n	8008be8 <_printf_float+0x240>
 8008bc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4628      	mov	r0, r5
 8008bd0:	47b8      	blx	r7
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	f43f af45 	beq.w	8008a62 <_printf_float+0xba>
 8008bd8:	f04f 0800 	mov.w	r8, #0
 8008bdc:	f104 091a 	add.w	r9, r4, #26
 8008be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008be2:	3b01      	subs	r3, #1
 8008be4:	4543      	cmp	r3, r8
 8008be6:	dc09      	bgt.n	8008bfc <_printf_float+0x254>
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	079b      	lsls	r3, r3, #30
 8008bec:	f100 8103 	bmi.w	8008df6 <_printf_float+0x44e>
 8008bf0:	68e0      	ldr	r0, [r4, #12]
 8008bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bf4:	4298      	cmp	r0, r3
 8008bf6:	bfb8      	it	lt
 8008bf8:	4618      	movlt	r0, r3
 8008bfa:	e734      	b.n	8008a66 <_printf_float+0xbe>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	464a      	mov	r2, r9
 8008c00:	4631      	mov	r1, r6
 8008c02:	4628      	mov	r0, r5
 8008c04:	47b8      	blx	r7
 8008c06:	3001      	adds	r0, #1
 8008c08:	f43f af2b 	beq.w	8008a62 <_printf_float+0xba>
 8008c0c:	f108 0801 	add.w	r8, r8, #1
 8008c10:	e7e6      	b.n	8008be0 <_printf_float+0x238>
 8008c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	dc2b      	bgt.n	8008c70 <_printf_float+0x2c8>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	4a26      	ldr	r2, [pc, #152]	; (8008cb4 <_printf_float+0x30c>)
 8008c1c:	4631      	mov	r1, r6
 8008c1e:	4628      	mov	r0, r5
 8008c20:	47b8      	blx	r7
 8008c22:	3001      	adds	r0, #1
 8008c24:	f43f af1d 	beq.w	8008a62 <_printf_float+0xba>
 8008c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c2a:	b923      	cbnz	r3, 8008c36 <_printf_float+0x28e>
 8008c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c2e:	b913      	cbnz	r3, 8008c36 <_printf_float+0x28e>
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	07d9      	lsls	r1, r3, #31
 8008c34:	d5d8      	bpl.n	8008be8 <_printf_float+0x240>
 8008c36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c3a:	4631      	mov	r1, r6
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	47b8      	blx	r7
 8008c40:	3001      	adds	r0, #1
 8008c42:	f43f af0e 	beq.w	8008a62 <_printf_float+0xba>
 8008c46:	f04f 0900 	mov.w	r9, #0
 8008c4a:	f104 0a1a 	add.w	sl, r4, #26
 8008c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c50:	425b      	negs	r3, r3
 8008c52:	454b      	cmp	r3, r9
 8008c54:	dc01      	bgt.n	8008c5a <_printf_float+0x2b2>
 8008c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c58:	e794      	b.n	8008b84 <_printf_float+0x1dc>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	4652      	mov	r2, sl
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b8      	blx	r7
 8008c64:	3001      	adds	r0, #1
 8008c66:	f43f aefc 	beq.w	8008a62 <_printf_float+0xba>
 8008c6a:	f109 0901 	add.w	r9, r9, #1
 8008c6e:	e7ee      	b.n	8008c4e <_printf_float+0x2a6>
 8008c70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c74:	429a      	cmp	r2, r3
 8008c76:	bfa8      	it	ge
 8008c78:	461a      	movge	r2, r3
 8008c7a:	2a00      	cmp	r2, #0
 8008c7c:	4691      	mov	r9, r2
 8008c7e:	dd07      	ble.n	8008c90 <_printf_float+0x2e8>
 8008c80:	4613      	mov	r3, r2
 8008c82:	4631      	mov	r1, r6
 8008c84:	4642      	mov	r2, r8
 8008c86:	4628      	mov	r0, r5
 8008c88:	47b8      	blx	r7
 8008c8a:	3001      	adds	r0, #1
 8008c8c:	f43f aee9 	beq.w	8008a62 <_printf_float+0xba>
 8008c90:	f104 031a 	add.w	r3, r4, #26
 8008c94:	f04f 0b00 	mov.w	fp, #0
 8008c98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c9c:	9306      	str	r3, [sp, #24]
 8008c9e:	e015      	b.n	8008ccc <_printf_float+0x324>
 8008ca0:	7fefffff 	.word	0x7fefffff
 8008ca4:	080177b8 	.word	0x080177b8
 8008ca8:	080177b4 	.word	0x080177b4
 8008cac:	080177c0 	.word	0x080177c0
 8008cb0:	080177bc 	.word	0x080177bc
 8008cb4:	080177c4 	.word	0x080177c4
 8008cb8:	2301      	movs	r3, #1
 8008cba:	9a06      	ldr	r2, [sp, #24]
 8008cbc:	4631      	mov	r1, r6
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	47b8      	blx	r7
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	f43f aecd 	beq.w	8008a62 <_printf_float+0xba>
 8008cc8:	f10b 0b01 	add.w	fp, fp, #1
 8008ccc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008cd0:	ebaa 0309 	sub.w	r3, sl, r9
 8008cd4:	455b      	cmp	r3, fp
 8008cd6:	dcef      	bgt.n	8008cb8 <_printf_float+0x310>
 8008cd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	44d0      	add	r8, sl
 8008ce0:	db15      	blt.n	8008d0e <_printf_float+0x366>
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	07da      	lsls	r2, r3, #31
 8008ce6:	d412      	bmi.n	8008d0e <_printf_float+0x366>
 8008ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cec:	eba3 020a 	sub.w	r2, r3, sl
 8008cf0:	eba3 0a01 	sub.w	sl, r3, r1
 8008cf4:	4592      	cmp	sl, r2
 8008cf6:	bfa8      	it	ge
 8008cf8:	4692      	movge	sl, r2
 8008cfa:	f1ba 0f00 	cmp.w	sl, #0
 8008cfe:	dc0e      	bgt.n	8008d1e <_printf_float+0x376>
 8008d00:	f04f 0800 	mov.w	r8, #0
 8008d04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d08:	f104 091a 	add.w	r9, r4, #26
 8008d0c:	e019      	b.n	8008d42 <_printf_float+0x39a>
 8008d0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d12:	4631      	mov	r1, r6
 8008d14:	4628      	mov	r0, r5
 8008d16:	47b8      	blx	r7
 8008d18:	3001      	adds	r0, #1
 8008d1a:	d1e5      	bne.n	8008ce8 <_printf_float+0x340>
 8008d1c:	e6a1      	b.n	8008a62 <_printf_float+0xba>
 8008d1e:	4653      	mov	r3, sl
 8008d20:	4642      	mov	r2, r8
 8008d22:	4631      	mov	r1, r6
 8008d24:	4628      	mov	r0, r5
 8008d26:	47b8      	blx	r7
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d1e9      	bne.n	8008d00 <_printf_float+0x358>
 8008d2c:	e699      	b.n	8008a62 <_printf_float+0xba>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	464a      	mov	r2, r9
 8008d32:	4631      	mov	r1, r6
 8008d34:	4628      	mov	r0, r5
 8008d36:	47b8      	blx	r7
 8008d38:	3001      	adds	r0, #1
 8008d3a:	f43f ae92 	beq.w	8008a62 <_printf_float+0xba>
 8008d3e:	f108 0801 	add.w	r8, r8, #1
 8008d42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d46:	1a9b      	subs	r3, r3, r2
 8008d48:	eba3 030a 	sub.w	r3, r3, sl
 8008d4c:	4543      	cmp	r3, r8
 8008d4e:	dcee      	bgt.n	8008d2e <_printf_float+0x386>
 8008d50:	e74a      	b.n	8008be8 <_printf_float+0x240>
 8008d52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d54:	2a01      	cmp	r2, #1
 8008d56:	dc01      	bgt.n	8008d5c <_printf_float+0x3b4>
 8008d58:	07db      	lsls	r3, r3, #31
 8008d5a:	d53a      	bpl.n	8008dd2 <_printf_float+0x42a>
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	4642      	mov	r2, r8
 8008d60:	4631      	mov	r1, r6
 8008d62:	4628      	mov	r0, r5
 8008d64:	47b8      	blx	r7
 8008d66:	3001      	adds	r0, #1
 8008d68:	f43f ae7b 	beq.w	8008a62 <_printf_float+0xba>
 8008d6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d70:	4631      	mov	r1, r6
 8008d72:	4628      	mov	r0, r5
 8008d74:	47b8      	blx	r7
 8008d76:	3001      	adds	r0, #1
 8008d78:	f108 0801 	add.w	r8, r8, #1
 8008d7c:	f43f ae71 	beq.w	8008a62 <_printf_float+0xba>
 8008d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d82:	2200      	movs	r2, #0
 8008d84:	f103 3aff 	add.w	sl, r3, #4294967295
 8008d88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f7f7 febb 	bl	8000b08 <__aeabi_dcmpeq>
 8008d92:	b9c8      	cbnz	r0, 8008dc8 <_printf_float+0x420>
 8008d94:	4653      	mov	r3, sl
 8008d96:	4642      	mov	r2, r8
 8008d98:	4631      	mov	r1, r6
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	47b8      	blx	r7
 8008d9e:	3001      	adds	r0, #1
 8008da0:	d10e      	bne.n	8008dc0 <_printf_float+0x418>
 8008da2:	e65e      	b.n	8008a62 <_printf_float+0xba>
 8008da4:	2301      	movs	r3, #1
 8008da6:	4652      	mov	r2, sl
 8008da8:	4631      	mov	r1, r6
 8008daa:	4628      	mov	r0, r5
 8008dac:	47b8      	blx	r7
 8008dae:	3001      	adds	r0, #1
 8008db0:	f43f ae57 	beq.w	8008a62 <_printf_float+0xba>
 8008db4:	f108 0801 	add.w	r8, r8, #1
 8008db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	4543      	cmp	r3, r8
 8008dbe:	dcf1      	bgt.n	8008da4 <_printf_float+0x3fc>
 8008dc0:	464b      	mov	r3, r9
 8008dc2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008dc6:	e6de      	b.n	8008b86 <_printf_float+0x1de>
 8008dc8:	f04f 0800 	mov.w	r8, #0
 8008dcc:	f104 0a1a 	add.w	sl, r4, #26
 8008dd0:	e7f2      	b.n	8008db8 <_printf_float+0x410>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e7df      	b.n	8008d96 <_printf_float+0x3ee>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	464a      	mov	r2, r9
 8008dda:	4631      	mov	r1, r6
 8008ddc:	4628      	mov	r0, r5
 8008dde:	47b8      	blx	r7
 8008de0:	3001      	adds	r0, #1
 8008de2:	f43f ae3e 	beq.w	8008a62 <_printf_float+0xba>
 8008de6:	f108 0801 	add.w	r8, r8, #1
 8008dea:	68e3      	ldr	r3, [r4, #12]
 8008dec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008dee:	1a9b      	subs	r3, r3, r2
 8008df0:	4543      	cmp	r3, r8
 8008df2:	dcf0      	bgt.n	8008dd6 <_printf_float+0x42e>
 8008df4:	e6fc      	b.n	8008bf0 <_printf_float+0x248>
 8008df6:	f04f 0800 	mov.w	r8, #0
 8008dfa:	f104 0919 	add.w	r9, r4, #25
 8008dfe:	e7f4      	b.n	8008dea <_printf_float+0x442>
 8008e00:	2900      	cmp	r1, #0
 8008e02:	f43f ae8b 	beq.w	8008b1c <_printf_float+0x174>
 8008e06:	2300      	movs	r3, #0
 8008e08:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008e0c:	ab09      	add	r3, sp, #36	; 0x24
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	ec49 8b10 	vmov	d0, r8, r9
 8008e14:	6022      	str	r2, [r4, #0]
 8008e16:	f8cd a004 	str.w	sl, [sp, #4]
 8008e1a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008e1e:	4628      	mov	r0, r5
 8008e20:	f7ff fd2e 	bl	8008880 <__cvt>
 8008e24:	4680      	mov	r8, r0
 8008e26:	e648      	b.n	8008aba <_printf_float+0x112>

08008e28 <_printf_common>:
 8008e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e2c:	4691      	mov	r9, r2
 8008e2e:	461f      	mov	r7, r3
 8008e30:	688a      	ldr	r2, [r1, #8]
 8008e32:	690b      	ldr	r3, [r1, #16]
 8008e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	bfb8      	it	lt
 8008e3c:	4613      	movlt	r3, r2
 8008e3e:	f8c9 3000 	str.w	r3, [r9]
 8008e42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e46:	4606      	mov	r6, r0
 8008e48:	460c      	mov	r4, r1
 8008e4a:	b112      	cbz	r2, 8008e52 <_printf_common+0x2a>
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	f8c9 3000 	str.w	r3, [r9]
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	0699      	lsls	r1, r3, #26
 8008e56:	bf42      	ittt	mi
 8008e58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008e5c:	3302      	addmi	r3, #2
 8008e5e:	f8c9 3000 	strmi.w	r3, [r9]
 8008e62:	6825      	ldr	r5, [r4, #0]
 8008e64:	f015 0506 	ands.w	r5, r5, #6
 8008e68:	d107      	bne.n	8008e7a <_printf_common+0x52>
 8008e6a:	f104 0a19 	add.w	sl, r4, #25
 8008e6e:	68e3      	ldr	r3, [r4, #12]
 8008e70:	f8d9 2000 	ldr.w	r2, [r9]
 8008e74:	1a9b      	subs	r3, r3, r2
 8008e76:	42ab      	cmp	r3, r5
 8008e78:	dc28      	bgt.n	8008ecc <_printf_common+0xa4>
 8008e7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008e7e:	6822      	ldr	r2, [r4, #0]
 8008e80:	3300      	adds	r3, #0
 8008e82:	bf18      	it	ne
 8008e84:	2301      	movne	r3, #1
 8008e86:	0692      	lsls	r2, r2, #26
 8008e88:	d42d      	bmi.n	8008ee6 <_printf_common+0xbe>
 8008e8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e8e:	4639      	mov	r1, r7
 8008e90:	4630      	mov	r0, r6
 8008e92:	47c0      	blx	r8
 8008e94:	3001      	adds	r0, #1
 8008e96:	d020      	beq.n	8008eda <_printf_common+0xb2>
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	68e5      	ldr	r5, [r4, #12]
 8008e9c:	f8d9 2000 	ldr.w	r2, [r9]
 8008ea0:	f003 0306 	and.w	r3, r3, #6
 8008ea4:	2b04      	cmp	r3, #4
 8008ea6:	bf08      	it	eq
 8008ea8:	1aad      	subeq	r5, r5, r2
 8008eaa:	68a3      	ldr	r3, [r4, #8]
 8008eac:	6922      	ldr	r2, [r4, #16]
 8008eae:	bf0c      	ite	eq
 8008eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eb4:	2500      	movne	r5, #0
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	bfc4      	itt	gt
 8008eba:	1a9b      	subgt	r3, r3, r2
 8008ebc:	18ed      	addgt	r5, r5, r3
 8008ebe:	f04f 0900 	mov.w	r9, #0
 8008ec2:	341a      	adds	r4, #26
 8008ec4:	454d      	cmp	r5, r9
 8008ec6:	d11a      	bne.n	8008efe <_printf_common+0xd6>
 8008ec8:	2000      	movs	r0, #0
 8008eca:	e008      	b.n	8008ede <_printf_common+0xb6>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	4652      	mov	r2, sl
 8008ed0:	4639      	mov	r1, r7
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	47c0      	blx	r8
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	d103      	bne.n	8008ee2 <_printf_common+0xba>
 8008eda:	f04f 30ff 	mov.w	r0, #4294967295
 8008ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee2:	3501      	adds	r5, #1
 8008ee4:	e7c3      	b.n	8008e6e <_printf_common+0x46>
 8008ee6:	18e1      	adds	r1, r4, r3
 8008ee8:	1c5a      	adds	r2, r3, #1
 8008eea:	2030      	movs	r0, #48	; 0x30
 8008eec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ef0:	4422      	add	r2, r4
 8008ef2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ef6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008efa:	3302      	adds	r3, #2
 8008efc:	e7c5      	b.n	8008e8a <_printf_common+0x62>
 8008efe:	2301      	movs	r3, #1
 8008f00:	4622      	mov	r2, r4
 8008f02:	4639      	mov	r1, r7
 8008f04:	4630      	mov	r0, r6
 8008f06:	47c0      	blx	r8
 8008f08:	3001      	adds	r0, #1
 8008f0a:	d0e6      	beq.n	8008eda <_printf_common+0xb2>
 8008f0c:	f109 0901 	add.w	r9, r9, #1
 8008f10:	e7d8      	b.n	8008ec4 <_printf_common+0x9c>
	...

08008f14 <_printf_i>:
 8008f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	7e09      	ldrb	r1, [r1, #24]
 8008f20:	b085      	sub	sp, #20
 8008f22:	296e      	cmp	r1, #110	; 0x6e
 8008f24:	4617      	mov	r7, r2
 8008f26:	4606      	mov	r6, r0
 8008f28:	4698      	mov	r8, r3
 8008f2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f2c:	f000 80b3 	beq.w	8009096 <_printf_i+0x182>
 8008f30:	d822      	bhi.n	8008f78 <_printf_i+0x64>
 8008f32:	2963      	cmp	r1, #99	; 0x63
 8008f34:	d036      	beq.n	8008fa4 <_printf_i+0x90>
 8008f36:	d80a      	bhi.n	8008f4e <_printf_i+0x3a>
 8008f38:	2900      	cmp	r1, #0
 8008f3a:	f000 80b9 	beq.w	80090b0 <_printf_i+0x19c>
 8008f3e:	2958      	cmp	r1, #88	; 0x58
 8008f40:	f000 8083 	beq.w	800904a <_printf_i+0x136>
 8008f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008f4c:	e032      	b.n	8008fb4 <_printf_i+0xa0>
 8008f4e:	2964      	cmp	r1, #100	; 0x64
 8008f50:	d001      	beq.n	8008f56 <_printf_i+0x42>
 8008f52:	2969      	cmp	r1, #105	; 0x69
 8008f54:	d1f6      	bne.n	8008f44 <_printf_i+0x30>
 8008f56:	6820      	ldr	r0, [r4, #0]
 8008f58:	6813      	ldr	r3, [r2, #0]
 8008f5a:	0605      	lsls	r5, r0, #24
 8008f5c:	f103 0104 	add.w	r1, r3, #4
 8008f60:	d52a      	bpl.n	8008fb8 <_printf_i+0xa4>
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6011      	str	r1, [r2, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	da03      	bge.n	8008f72 <_printf_i+0x5e>
 8008f6a:	222d      	movs	r2, #45	; 0x2d
 8008f6c:	425b      	negs	r3, r3
 8008f6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008f72:	486f      	ldr	r0, [pc, #444]	; (8009130 <_printf_i+0x21c>)
 8008f74:	220a      	movs	r2, #10
 8008f76:	e039      	b.n	8008fec <_printf_i+0xd8>
 8008f78:	2973      	cmp	r1, #115	; 0x73
 8008f7a:	f000 809d 	beq.w	80090b8 <_printf_i+0x1a4>
 8008f7e:	d808      	bhi.n	8008f92 <_printf_i+0x7e>
 8008f80:	296f      	cmp	r1, #111	; 0x6f
 8008f82:	d020      	beq.n	8008fc6 <_printf_i+0xb2>
 8008f84:	2970      	cmp	r1, #112	; 0x70
 8008f86:	d1dd      	bne.n	8008f44 <_printf_i+0x30>
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	f043 0320 	orr.w	r3, r3, #32
 8008f8e:	6023      	str	r3, [r4, #0]
 8008f90:	e003      	b.n	8008f9a <_printf_i+0x86>
 8008f92:	2975      	cmp	r1, #117	; 0x75
 8008f94:	d017      	beq.n	8008fc6 <_printf_i+0xb2>
 8008f96:	2978      	cmp	r1, #120	; 0x78
 8008f98:	d1d4      	bne.n	8008f44 <_printf_i+0x30>
 8008f9a:	2378      	movs	r3, #120	; 0x78
 8008f9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fa0:	4864      	ldr	r0, [pc, #400]	; (8009134 <_printf_i+0x220>)
 8008fa2:	e055      	b.n	8009050 <_printf_i+0x13c>
 8008fa4:	6813      	ldr	r3, [r2, #0]
 8008fa6:	1d19      	adds	r1, r3, #4
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	6011      	str	r1, [r2, #0]
 8008fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e08c      	b.n	80090d2 <_printf_i+0x1be>
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	6011      	str	r1, [r2, #0]
 8008fbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fc0:	bf18      	it	ne
 8008fc2:	b21b      	sxthne	r3, r3
 8008fc4:	e7cf      	b.n	8008f66 <_printf_i+0x52>
 8008fc6:	6813      	ldr	r3, [r2, #0]
 8008fc8:	6825      	ldr	r5, [r4, #0]
 8008fca:	1d18      	adds	r0, r3, #4
 8008fcc:	6010      	str	r0, [r2, #0]
 8008fce:	0628      	lsls	r0, r5, #24
 8008fd0:	d501      	bpl.n	8008fd6 <_printf_i+0xc2>
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	e002      	b.n	8008fdc <_printf_i+0xc8>
 8008fd6:	0668      	lsls	r0, r5, #25
 8008fd8:	d5fb      	bpl.n	8008fd2 <_printf_i+0xbe>
 8008fda:	881b      	ldrh	r3, [r3, #0]
 8008fdc:	4854      	ldr	r0, [pc, #336]	; (8009130 <_printf_i+0x21c>)
 8008fde:	296f      	cmp	r1, #111	; 0x6f
 8008fe0:	bf14      	ite	ne
 8008fe2:	220a      	movne	r2, #10
 8008fe4:	2208      	moveq	r2, #8
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fec:	6865      	ldr	r5, [r4, #4]
 8008fee:	60a5      	str	r5, [r4, #8]
 8008ff0:	2d00      	cmp	r5, #0
 8008ff2:	f2c0 8095 	blt.w	8009120 <_printf_i+0x20c>
 8008ff6:	6821      	ldr	r1, [r4, #0]
 8008ff8:	f021 0104 	bic.w	r1, r1, #4
 8008ffc:	6021      	str	r1, [r4, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d13d      	bne.n	800907e <_printf_i+0x16a>
 8009002:	2d00      	cmp	r5, #0
 8009004:	f040 808e 	bne.w	8009124 <_printf_i+0x210>
 8009008:	4665      	mov	r5, ip
 800900a:	2a08      	cmp	r2, #8
 800900c:	d10b      	bne.n	8009026 <_printf_i+0x112>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	07db      	lsls	r3, r3, #31
 8009012:	d508      	bpl.n	8009026 <_printf_i+0x112>
 8009014:	6923      	ldr	r3, [r4, #16]
 8009016:	6862      	ldr	r2, [r4, #4]
 8009018:	429a      	cmp	r2, r3
 800901a:	bfde      	ittt	le
 800901c:	2330      	movle	r3, #48	; 0x30
 800901e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009022:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009026:	ebac 0305 	sub.w	r3, ip, r5
 800902a:	6123      	str	r3, [r4, #16]
 800902c:	f8cd 8000 	str.w	r8, [sp]
 8009030:	463b      	mov	r3, r7
 8009032:	aa03      	add	r2, sp, #12
 8009034:	4621      	mov	r1, r4
 8009036:	4630      	mov	r0, r6
 8009038:	f7ff fef6 	bl	8008e28 <_printf_common>
 800903c:	3001      	adds	r0, #1
 800903e:	d14d      	bne.n	80090dc <_printf_i+0x1c8>
 8009040:	f04f 30ff 	mov.w	r0, #4294967295
 8009044:	b005      	add	sp, #20
 8009046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800904a:	4839      	ldr	r0, [pc, #228]	; (8009130 <_printf_i+0x21c>)
 800904c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009050:	6813      	ldr	r3, [r2, #0]
 8009052:	6821      	ldr	r1, [r4, #0]
 8009054:	1d1d      	adds	r5, r3, #4
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6015      	str	r5, [r2, #0]
 800905a:	060a      	lsls	r2, r1, #24
 800905c:	d50b      	bpl.n	8009076 <_printf_i+0x162>
 800905e:	07ca      	lsls	r2, r1, #31
 8009060:	bf44      	itt	mi
 8009062:	f041 0120 	orrmi.w	r1, r1, #32
 8009066:	6021      	strmi	r1, [r4, #0]
 8009068:	b91b      	cbnz	r3, 8009072 <_printf_i+0x15e>
 800906a:	6822      	ldr	r2, [r4, #0]
 800906c:	f022 0220 	bic.w	r2, r2, #32
 8009070:	6022      	str	r2, [r4, #0]
 8009072:	2210      	movs	r2, #16
 8009074:	e7b7      	b.n	8008fe6 <_printf_i+0xd2>
 8009076:	064d      	lsls	r5, r1, #25
 8009078:	bf48      	it	mi
 800907a:	b29b      	uxthmi	r3, r3
 800907c:	e7ef      	b.n	800905e <_printf_i+0x14a>
 800907e:	4665      	mov	r5, ip
 8009080:	fbb3 f1f2 	udiv	r1, r3, r2
 8009084:	fb02 3311 	mls	r3, r2, r1, r3
 8009088:	5cc3      	ldrb	r3, [r0, r3]
 800908a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800908e:	460b      	mov	r3, r1
 8009090:	2900      	cmp	r1, #0
 8009092:	d1f5      	bne.n	8009080 <_printf_i+0x16c>
 8009094:	e7b9      	b.n	800900a <_printf_i+0xf6>
 8009096:	6813      	ldr	r3, [r2, #0]
 8009098:	6825      	ldr	r5, [r4, #0]
 800909a:	6961      	ldr	r1, [r4, #20]
 800909c:	1d18      	adds	r0, r3, #4
 800909e:	6010      	str	r0, [r2, #0]
 80090a0:	0628      	lsls	r0, r5, #24
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	d501      	bpl.n	80090aa <_printf_i+0x196>
 80090a6:	6019      	str	r1, [r3, #0]
 80090a8:	e002      	b.n	80090b0 <_printf_i+0x19c>
 80090aa:	066a      	lsls	r2, r5, #25
 80090ac:	d5fb      	bpl.n	80090a6 <_printf_i+0x192>
 80090ae:	8019      	strh	r1, [r3, #0]
 80090b0:	2300      	movs	r3, #0
 80090b2:	6123      	str	r3, [r4, #16]
 80090b4:	4665      	mov	r5, ip
 80090b6:	e7b9      	b.n	800902c <_printf_i+0x118>
 80090b8:	6813      	ldr	r3, [r2, #0]
 80090ba:	1d19      	adds	r1, r3, #4
 80090bc:	6011      	str	r1, [r2, #0]
 80090be:	681d      	ldr	r5, [r3, #0]
 80090c0:	6862      	ldr	r2, [r4, #4]
 80090c2:	2100      	movs	r1, #0
 80090c4:	4628      	mov	r0, r5
 80090c6:	f7f7 f8ab 	bl	8000220 <memchr>
 80090ca:	b108      	cbz	r0, 80090d0 <_printf_i+0x1bc>
 80090cc:	1b40      	subs	r0, r0, r5
 80090ce:	6060      	str	r0, [r4, #4]
 80090d0:	6863      	ldr	r3, [r4, #4]
 80090d2:	6123      	str	r3, [r4, #16]
 80090d4:	2300      	movs	r3, #0
 80090d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090da:	e7a7      	b.n	800902c <_printf_i+0x118>
 80090dc:	6923      	ldr	r3, [r4, #16]
 80090de:	462a      	mov	r2, r5
 80090e0:	4639      	mov	r1, r7
 80090e2:	4630      	mov	r0, r6
 80090e4:	47c0      	blx	r8
 80090e6:	3001      	adds	r0, #1
 80090e8:	d0aa      	beq.n	8009040 <_printf_i+0x12c>
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	079b      	lsls	r3, r3, #30
 80090ee:	d413      	bmi.n	8009118 <_printf_i+0x204>
 80090f0:	68e0      	ldr	r0, [r4, #12]
 80090f2:	9b03      	ldr	r3, [sp, #12]
 80090f4:	4298      	cmp	r0, r3
 80090f6:	bfb8      	it	lt
 80090f8:	4618      	movlt	r0, r3
 80090fa:	e7a3      	b.n	8009044 <_printf_i+0x130>
 80090fc:	2301      	movs	r3, #1
 80090fe:	464a      	mov	r2, r9
 8009100:	4639      	mov	r1, r7
 8009102:	4630      	mov	r0, r6
 8009104:	47c0      	blx	r8
 8009106:	3001      	adds	r0, #1
 8009108:	d09a      	beq.n	8009040 <_printf_i+0x12c>
 800910a:	3501      	adds	r5, #1
 800910c:	68e3      	ldr	r3, [r4, #12]
 800910e:	9a03      	ldr	r2, [sp, #12]
 8009110:	1a9b      	subs	r3, r3, r2
 8009112:	42ab      	cmp	r3, r5
 8009114:	dcf2      	bgt.n	80090fc <_printf_i+0x1e8>
 8009116:	e7eb      	b.n	80090f0 <_printf_i+0x1dc>
 8009118:	2500      	movs	r5, #0
 800911a:	f104 0919 	add.w	r9, r4, #25
 800911e:	e7f5      	b.n	800910c <_printf_i+0x1f8>
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1ac      	bne.n	800907e <_printf_i+0x16a>
 8009124:	7803      	ldrb	r3, [r0, #0]
 8009126:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800912a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800912e:	e76c      	b.n	800900a <_printf_i+0xf6>
 8009130:	080177c6 	.word	0x080177c6
 8009134:	080177d7 	.word	0x080177d7

08009138 <_sbrk_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	4c06      	ldr	r4, [pc, #24]	; (8009154 <_sbrk_r+0x1c>)
 800913c:	2300      	movs	r3, #0
 800913e:	4605      	mov	r5, r0
 8009140:	4608      	mov	r0, r1
 8009142:	6023      	str	r3, [r4, #0]
 8009144:	f7f9 fcf6 	bl	8002b34 <_sbrk>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d102      	bne.n	8009152 <_sbrk_r+0x1a>
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	b103      	cbz	r3, 8009152 <_sbrk_r+0x1a>
 8009150:	602b      	str	r3, [r5, #0]
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	20002580 	.word	0x20002580

08009158 <siprintf>:
 8009158:	b40e      	push	{r1, r2, r3}
 800915a:	b500      	push	{lr}
 800915c:	b09c      	sub	sp, #112	; 0x70
 800915e:	ab1d      	add	r3, sp, #116	; 0x74
 8009160:	9002      	str	r0, [sp, #8]
 8009162:	9006      	str	r0, [sp, #24]
 8009164:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009168:	4809      	ldr	r0, [pc, #36]	; (8009190 <siprintf+0x38>)
 800916a:	9107      	str	r1, [sp, #28]
 800916c:	9104      	str	r1, [sp, #16]
 800916e:	4909      	ldr	r1, [pc, #36]	; (8009194 <siprintf+0x3c>)
 8009170:	f853 2b04 	ldr.w	r2, [r3], #4
 8009174:	9105      	str	r1, [sp, #20]
 8009176:	6800      	ldr	r0, [r0, #0]
 8009178:	9301      	str	r3, [sp, #4]
 800917a:	a902      	add	r1, sp, #8
 800917c:	f001 f9a0 	bl	800a4c0 <_svfiprintf_r>
 8009180:	9b02      	ldr	r3, [sp, #8]
 8009182:	2200      	movs	r2, #0
 8009184:	701a      	strb	r2, [r3, #0]
 8009186:	b01c      	add	sp, #112	; 0x70
 8009188:	f85d eb04 	ldr.w	lr, [sp], #4
 800918c:	b003      	add	sp, #12
 800918e:	4770      	bx	lr
 8009190:	200000fc 	.word	0x200000fc
 8009194:	ffff0208 	.word	0xffff0208

08009198 <quorem>:
 8009198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800919c:	6903      	ldr	r3, [r0, #16]
 800919e:	690c      	ldr	r4, [r1, #16]
 80091a0:	42a3      	cmp	r3, r4
 80091a2:	4680      	mov	r8, r0
 80091a4:	f2c0 8082 	blt.w	80092ac <quorem+0x114>
 80091a8:	3c01      	subs	r4, #1
 80091aa:	f101 0714 	add.w	r7, r1, #20
 80091ae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80091b2:	f100 0614 	add.w	r6, r0, #20
 80091b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80091ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80091be:	eb06 030c 	add.w	r3, r6, ip
 80091c2:	3501      	adds	r5, #1
 80091c4:	eb07 090c 	add.w	r9, r7, ip
 80091c8:	9301      	str	r3, [sp, #4]
 80091ca:	fbb0 f5f5 	udiv	r5, r0, r5
 80091ce:	b395      	cbz	r5, 8009236 <quorem+0x9e>
 80091d0:	f04f 0a00 	mov.w	sl, #0
 80091d4:	4638      	mov	r0, r7
 80091d6:	46b6      	mov	lr, r6
 80091d8:	46d3      	mov	fp, sl
 80091da:	f850 2b04 	ldr.w	r2, [r0], #4
 80091de:	b293      	uxth	r3, r2
 80091e0:	fb05 a303 	mla	r3, r5, r3, sl
 80091e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	ebab 0303 	sub.w	r3, fp, r3
 80091ee:	0c12      	lsrs	r2, r2, #16
 80091f0:	f8de b000 	ldr.w	fp, [lr]
 80091f4:	fb05 a202 	mla	r2, r5, r2, sl
 80091f8:	fa13 f38b 	uxtah	r3, r3, fp
 80091fc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009200:	fa1f fb82 	uxth.w	fp, r2
 8009204:	f8de 2000 	ldr.w	r2, [lr]
 8009208:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800920c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009210:	b29b      	uxth	r3, r3
 8009212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009216:	4581      	cmp	r9, r0
 8009218:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800921c:	f84e 3b04 	str.w	r3, [lr], #4
 8009220:	d2db      	bcs.n	80091da <quorem+0x42>
 8009222:	f856 300c 	ldr.w	r3, [r6, ip]
 8009226:	b933      	cbnz	r3, 8009236 <quorem+0x9e>
 8009228:	9b01      	ldr	r3, [sp, #4]
 800922a:	3b04      	subs	r3, #4
 800922c:	429e      	cmp	r6, r3
 800922e:	461a      	mov	r2, r3
 8009230:	d330      	bcc.n	8009294 <quorem+0xfc>
 8009232:	f8c8 4010 	str.w	r4, [r8, #16]
 8009236:	4640      	mov	r0, r8
 8009238:	f001 f822 	bl	800a280 <__mcmp>
 800923c:	2800      	cmp	r0, #0
 800923e:	db25      	blt.n	800928c <quorem+0xf4>
 8009240:	3501      	adds	r5, #1
 8009242:	4630      	mov	r0, r6
 8009244:	f04f 0c00 	mov.w	ip, #0
 8009248:	f857 2b04 	ldr.w	r2, [r7], #4
 800924c:	f8d0 e000 	ldr.w	lr, [r0]
 8009250:	b293      	uxth	r3, r2
 8009252:	ebac 0303 	sub.w	r3, ip, r3
 8009256:	0c12      	lsrs	r2, r2, #16
 8009258:	fa13 f38e 	uxtah	r3, r3, lr
 800925c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009264:	b29b      	uxth	r3, r3
 8009266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800926a:	45b9      	cmp	r9, r7
 800926c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009270:	f840 3b04 	str.w	r3, [r0], #4
 8009274:	d2e8      	bcs.n	8009248 <quorem+0xb0>
 8009276:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800927a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800927e:	b92a      	cbnz	r2, 800928c <quorem+0xf4>
 8009280:	3b04      	subs	r3, #4
 8009282:	429e      	cmp	r6, r3
 8009284:	461a      	mov	r2, r3
 8009286:	d30b      	bcc.n	80092a0 <quorem+0x108>
 8009288:	f8c8 4010 	str.w	r4, [r8, #16]
 800928c:	4628      	mov	r0, r5
 800928e:	b003      	add	sp, #12
 8009290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009294:	6812      	ldr	r2, [r2, #0]
 8009296:	3b04      	subs	r3, #4
 8009298:	2a00      	cmp	r2, #0
 800929a:	d1ca      	bne.n	8009232 <quorem+0x9a>
 800929c:	3c01      	subs	r4, #1
 800929e:	e7c5      	b.n	800922c <quorem+0x94>
 80092a0:	6812      	ldr	r2, [r2, #0]
 80092a2:	3b04      	subs	r3, #4
 80092a4:	2a00      	cmp	r2, #0
 80092a6:	d1ef      	bne.n	8009288 <quorem+0xf0>
 80092a8:	3c01      	subs	r4, #1
 80092aa:	e7ea      	b.n	8009282 <quorem+0xea>
 80092ac:	2000      	movs	r0, #0
 80092ae:	e7ee      	b.n	800928e <quorem+0xf6>

080092b0 <_dtoa_r>:
 80092b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	ec57 6b10 	vmov	r6, r7, d0
 80092b8:	b097      	sub	sp, #92	; 0x5c
 80092ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80092bc:	9106      	str	r1, [sp, #24]
 80092be:	4604      	mov	r4, r0
 80092c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80092c2:	9312      	str	r3, [sp, #72]	; 0x48
 80092c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80092c8:	e9cd 6700 	strd	r6, r7, [sp]
 80092cc:	b93d      	cbnz	r5, 80092de <_dtoa_r+0x2e>
 80092ce:	2010      	movs	r0, #16
 80092d0:	f7ff fa08 	bl	80086e4 <malloc>
 80092d4:	6260      	str	r0, [r4, #36]	; 0x24
 80092d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80092da:	6005      	str	r5, [r0, #0]
 80092dc:	60c5      	str	r5, [r0, #12]
 80092de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092e0:	6819      	ldr	r1, [r3, #0]
 80092e2:	b151      	cbz	r1, 80092fa <_dtoa_r+0x4a>
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	604a      	str	r2, [r1, #4]
 80092e8:	2301      	movs	r3, #1
 80092ea:	4093      	lsls	r3, r2
 80092ec:	608b      	str	r3, [r1, #8]
 80092ee:	4620      	mov	r0, r4
 80092f0:	f000 fde5 	bl	8009ebe <_Bfree>
 80092f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092f6:	2200      	movs	r2, #0
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	1e3b      	subs	r3, r7, #0
 80092fc:	bfbb      	ittet	lt
 80092fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009302:	9301      	strlt	r3, [sp, #4]
 8009304:	2300      	movge	r3, #0
 8009306:	2201      	movlt	r2, #1
 8009308:	bfac      	ite	ge
 800930a:	f8c8 3000 	strge.w	r3, [r8]
 800930e:	f8c8 2000 	strlt.w	r2, [r8]
 8009312:	4baf      	ldr	r3, [pc, #700]	; (80095d0 <_dtoa_r+0x320>)
 8009314:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009318:	ea33 0308 	bics.w	r3, r3, r8
 800931c:	d114      	bne.n	8009348 <_dtoa_r+0x98>
 800931e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009320:	f242 730f 	movw	r3, #9999	; 0x270f
 8009324:	6013      	str	r3, [r2, #0]
 8009326:	9b00      	ldr	r3, [sp, #0]
 8009328:	b923      	cbnz	r3, 8009334 <_dtoa_r+0x84>
 800932a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800932e:	2800      	cmp	r0, #0
 8009330:	f000 8542 	beq.w	8009db8 <_dtoa_r+0xb08>
 8009334:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009336:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80095e4 <_dtoa_r+0x334>
 800933a:	2b00      	cmp	r3, #0
 800933c:	f000 8544 	beq.w	8009dc8 <_dtoa_r+0xb18>
 8009340:	f10b 0303 	add.w	r3, fp, #3
 8009344:	f000 bd3e 	b.w	8009dc4 <_dtoa_r+0xb14>
 8009348:	e9dd 6700 	ldrd	r6, r7, [sp]
 800934c:	2200      	movs	r2, #0
 800934e:	2300      	movs	r3, #0
 8009350:	4630      	mov	r0, r6
 8009352:	4639      	mov	r1, r7
 8009354:	f7f7 fbd8 	bl	8000b08 <__aeabi_dcmpeq>
 8009358:	4681      	mov	r9, r0
 800935a:	b168      	cbz	r0, 8009378 <_dtoa_r+0xc8>
 800935c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800935e:	2301      	movs	r3, #1
 8009360:	6013      	str	r3, [r2, #0]
 8009362:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 8524 	beq.w	8009db2 <_dtoa_r+0xb02>
 800936a:	4b9a      	ldr	r3, [pc, #616]	; (80095d4 <_dtoa_r+0x324>)
 800936c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800936e:	f103 3bff 	add.w	fp, r3, #4294967295
 8009372:	6013      	str	r3, [r2, #0]
 8009374:	f000 bd28 	b.w	8009dc8 <_dtoa_r+0xb18>
 8009378:	aa14      	add	r2, sp, #80	; 0x50
 800937a:	a915      	add	r1, sp, #84	; 0x54
 800937c:	ec47 6b10 	vmov	d0, r6, r7
 8009380:	4620      	mov	r0, r4
 8009382:	f000 fff4 	bl	800a36e <__d2b>
 8009386:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800938a:	9004      	str	r0, [sp, #16]
 800938c:	2d00      	cmp	r5, #0
 800938e:	d07c      	beq.n	800948a <_dtoa_r+0x1da>
 8009390:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009394:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009398:	46b2      	mov	sl, r6
 800939a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800939e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80093a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80093a6:	2200      	movs	r2, #0
 80093a8:	4b8b      	ldr	r3, [pc, #556]	; (80095d8 <_dtoa_r+0x328>)
 80093aa:	4650      	mov	r0, sl
 80093ac:	4659      	mov	r1, fp
 80093ae:	f7f6 ff8b 	bl	80002c8 <__aeabi_dsub>
 80093b2:	a381      	add	r3, pc, #516	; (adr r3, 80095b8 <_dtoa_r+0x308>)
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	f7f7 f93e 	bl	8000638 <__aeabi_dmul>
 80093bc:	a380      	add	r3, pc, #512	; (adr r3, 80095c0 <_dtoa_r+0x310>)
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	f7f6 ff83 	bl	80002cc <__adddf3>
 80093c6:	4606      	mov	r6, r0
 80093c8:	4628      	mov	r0, r5
 80093ca:	460f      	mov	r7, r1
 80093cc:	f7f7 f8ca 	bl	8000564 <__aeabi_i2d>
 80093d0:	a37d      	add	r3, pc, #500	; (adr r3, 80095c8 <_dtoa_r+0x318>)
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	f7f7 f92f 	bl	8000638 <__aeabi_dmul>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4630      	mov	r0, r6
 80093e0:	4639      	mov	r1, r7
 80093e2:	f7f6 ff73 	bl	80002cc <__adddf3>
 80093e6:	4606      	mov	r6, r0
 80093e8:	460f      	mov	r7, r1
 80093ea:	f7f7 fbd5 	bl	8000b98 <__aeabi_d2iz>
 80093ee:	2200      	movs	r2, #0
 80093f0:	4682      	mov	sl, r0
 80093f2:	2300      	movs	r3, #0
 80093f4:	4630      	mov	r0, r6
 80093f6:	4639      	mov	r1, r7
 80093f8:	f7f7 fb90 	bl	8000b1c <__aeabi_dcmplt>
 80093fc:	b148      	cbz	r0, 8009412 <_dtoa_r+0x162>
 80093fe:	4650      	mov	r0, sl
 8009400:	f7f7 f8b0 	bl	8000564 <__aeabi_i2d>
 8009404:	4632      	mov	r2, r6
 8009406:	463b      	mov	r3, r7
 8009408:	f7f7 fb7e 	bl	8000b08 <__aeabi_dcmpeq>
 800940c:	b908      	cbnz	r0, 8009412 <_dtoa_r+0x162>
 800940e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009412:	f1ba 0f16 	cmp.w	sl, #22
 8009416:	d859      	bhi.n	80094cc <_dtoa_r+0x21c>
 8009418:	4970      	ldr	r1, [pc, #448]	; (80095dc <_dtoa_r+0x32c>)
 800941a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800941e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009422:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009426:	f7f7 fb97 	bl	8000b58 <__aeabi_dcmpgt>
 800942a:	2800      	cmp	r0, #0
 800942c:	d050      	beq.n	80094d0 <_dtoa_r+0x220>
 800942e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009432:	2300      	movs	r3, #0
 8009434:	930f      	str	r3, [sp, #60]	; 0x3c
 8009436:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009438:	1b5d      	subs	r5, r3, r5
 800943a:	f1b5 0801 	subs.w	r8, r5, #1
 800943e:	bf49      	itett	mi
 8009440:	f1c5 0301 	rsbmi	r3, r5, #1
 8009444:	2300      	movpl	r3, #0
 8009446:	9305      	strmi	r3, [sp, #20]
 8009448:	f04f 0800 	movmi.w	r8, #0
 800944c:	bf58      	it	pl
 800944e:	9305      	strpl	r3, [sp, #20]
 8009450:	f1ba 0f00 	cmp.w	sl, #0
 8009454:	db3e      	blt.n	80094d4 <_dtoa_r+0x224>
 8009456:	2300      	movs	r3, #0
 8009458:	44d0      	add	r8, sl
 800945a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800945e:	9307      	str	r3, [sp, #28]
 8009460:	9b06      	ldr	r3, [sp, #24]
 8009462:	2b09      	cmp	r3, #9
 8009464:	f200 8090 	bhi.w	8009588 <_dtoa_r+0x2d8>
 8009468:	2b05      	cmp	r3, #5
 800946a:	bfc4      	itt	gt
 800946c:	3b04      	subgt	r3, #4
 800946e:	9306      	strgt	r3, [sp, #24]
 8009470:	9b06      	ldr	r3, [sp, #24]
 8009472:	f1a3 0302 	sub.w	r3, r3, #2
 8009476:	bfcc      	ite	gt
 8009478:	2500      	movgt	r5, #0
 800947a:	2501      	movle	r5, #1
 800947c:	2b03      	cmp	r3, #3
 800947e:	f200 808f 	bhi.w	80095a0 <_dtoa_r+0x2f0>
 8009482:	e8df f003 	tbb	[pc, r3]
 8009486:	7f7d      	.short	0x7f7d
 8009488:	7131      	.short	0x7131
 800948a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800948e:	441d      	add	r5, r3
 8009490:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009494:	2820      	cmp	r0, #32
 8009496:	dd13      	ble.n	80094c0 <_dtoa_r+0x210>
 8009498:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800949c:	9b00      	ldr	r3, [sp, #0]
 800949e:	fa08 f800 	lsl.w	r8, r8, r0
 80094a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80094a6:	fa23 f000 	lsr.w	r0, r3, r0
 80094aa:	ea48 0000 	orr.w	r0, r8, r0
 80094ae:	f7f7 f849 	bl	8000544 <__aeabi_ui2d>
 80094b2:	2301      	movs	r3, #1
 80094b4:	4682      	mov	sl, r0
 80094b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80094ba:	3d01      	subs	r5, #1
 80094bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80094be:	e772      	b.n	80093a6 <_dtoa_r+0xf6>
 80094c0:	9b00      	ldr	r3, [sp, #0]
 80094c2:	f1c0 0020 	rsb	r0, r0, #32
 80094c6:	fa03 f000 	lsl.w	r0, r3, r0
 80094ca:	e7f0      	b.n	80094ae <_dtoa_r+0x1fe>
 80094cc:	2301      	movs	r3, #1
 80094ce:	e7b1      	b.n	8009434 <_dtoa_r+0x184>
 80094d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80094d2:	e7b0      	b.n	8009436 <_dtoa_r+0x186>
 80094d4:	9b05      	ldr	r3, [sp, #20]
 80094d6:	eba3 030a 	sub.w	r3, r3, sl
 80094da:	9305      	str	r3, [sp, #20]
 80094dc:	f1ca 0300 	rsb	r3, sl, #0
 80094e0:	9307      	str	r3, [sp, #28]
 80094e2:	2300      	movs	r3, #0
 80094e4:	930e      	str	r3, [sp, #56]	; 0x38
 80094e6:	e7bb      	b.n	8009460 <_dtoa_r+0x1b0>
 80094e8:	2301      	movs	r3, #1
 80094ea:	930a      	str	r3, [sp, #40]	; 0x28
 80094ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	dd59      	ble.n	80095a6 <_dtoa_r+0x2f6>
 80094f2:	9302      	str	r3, [sp, #8]
 80094f4:	4699      	mov	r9, r3
 80094f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80094f8:	2200      	movs	r2, #0
 80094fa:	6072      	str	r2, [r6, #4]
 80094fc:	2204      	movs	r2, #4
 80094fe:	f102 0014 	add.w	r0, r2, #20
 8009502:	4298      	cmp	r0, r3
 8009504:	6871      	ldr	r1, [r6, #4]
 8009506:	d953      	bls.n	80095b0 <_dtoa_r+0x300>
 8009508:	4620      	mov	r0, r4
 800950a:	f000 fca4 	bl	8009e56 <_Balloc>
 800950e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009510:	6030      	str	r0, [r6, #0]
 8009512:	f1b9 0f0e 	cmp.w	r9, #14
 8009516:	f8d3 b000 	ldr.w	fp, [r3]
 800951a:	f200 80e6 	bhi.w	80096ea <_dtoa_r+0x43a>
 800951e:	2d00      	cmp	r5, #0
 8009520:	f000 80e3 	beq.w	80096ea <_dtoa_r+0x43a>
 8009524:	ed9d 7b00 	vldr	d7, [sp]
 8009528:	f1ba 0f00 	cmp.w	sl, #0
 800952c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009530:	dd74      	ble.n	800961c <_dtoa_r+0x36c>
 8009532:	4a2a      	ldr	r2, [pc, #168]	; (80095dc <_dtoa_r+0x32c>)
 8009534:	f00a 030f 	and.w	r3, sl, #15
 8009538:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800953c:	ed93 7b00 	vldr	d7, [r3]
 8009540:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009544:	06f0      	lsls	r0, r6, #27
 8009546:	ed8d 7b08 	vstr	d7, [sp, #32]
 800954a:	d565      	bpl.n	8009618 <_dtoa_r+0x368>
 800954c:	4b24      	ldr	r3, [pc, #144]	; (80095e0 <_dtoa_r+0x330>)
 800954e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009552:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009556:	f7f7 f999 	bl	800088c <__aeabi_ddiv>
 800955a:	e9cd 0100 	strd	r0, r1, [sp]
 800955e:	f006 060f 	and.w	r6, r6, #15
 8009562:	2503      	movs	r5, #3
 8009564:	4f1e      	ldr	r7, [pc, #120]	; (80095e0 <_dtoa_r+0x330>)
 8009566:	e04c      	b.n	8009602 <_dtoa_r+0x352>
 8009568:	2301      	movs	r3, #1
 800956a:	930a      	str	r3, [sp, #40]	; 0x28
 800956c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800956e:	4453      	add	r3, sl
 8009570:	f103 0901 	add.w	r9, r3, #1
 8009574:	9302      	str	r3, [sp, #8]
 8009576:	464b      	mov	r3, r9
 8009578:	2b01      	cmp	r3, #1
 800957a:	bfb8      	it	lt
 800957c:	2301      	movlt	r3, #1
 800957e:	e7ba      	b.n	80094f6 <_dtoa_r+0x246>
 8009580:	2300      	movs	r3, #0
 8009582:	e7b2      	b.n	80094ea <_dtoa_r+0x23a>
 8009584:	2300      	movs	r3, #0
 8009586:	e7f0      	b.n	800956a <_dtoa_r+0x2ba>
 8009588:	2501      	movs	r5, #1
 800958a:	2300      	movs	r3, #0
 800958c:	9306      	str	r3, [sp, #24]
 800958e:	950a      	str	r5, [sp, #40]	; 0x28
 8009590:	f04f 33ff 	mov.w	r3, #4294967295
 8009594:	9302      	str	r3, [sp, #8]
 8009596:	4699      	mov	r9, r3
 8009598:	2200      	movs	r2, #0
 800959a:	2312      	movs	r3, #18
 800959c:	920b      	str	r2, [sp, #44]	; 0x2c
 800959e:	e7aa      	b.n	80094f6 <_dtoa_r+0x246>
 80095a0:	2301      	movs	r3, #1
 80095a2:	930a      	str	r3, [sp, #40]	; 0x28
 80095a4:	e7f4      	b.n	8009590 <_dtoa_r+0x2e0>
 80095a6:	2301      	movs	r3, #1
 80095a8:	9302      	str	r3, [sp, #8]
 80095aa:	4699      	mov	r9, r3
 80095ac:	461a      	mov	r2, r3
 80095ae:	e7f5      	b.n	800959c <_dtoa_r+0x2ec>
 80095b0:	3101      	adds	r1, #1
 80095b2:	6071      	str	r1, [r6, #4]
 80095b4:	0052      	lsls	r2, r2, #1
 80095b6:	e7a2      	b.n	80094fe <_dtoa_r+0x24e>
 80095b8:	636f4361 	.word	0x636f4361
 80095bc:	3fd287a7 	.word	0x3fd287a7
 80095c0:	8b60c8b3 	.word	0x8b60c8b3
 80095c4:	3fc68a28 	.word	0x3fc68a28
 80095c8:	509f79fb 	.word	0x509f79fb
 80095cc:	3fd34413 	.word	0x3fd34413
 80095d0:	7ff00000 	.word	0x7ff00000
 80095d4:	080177c5 	.word	0x080177c5
 80095d8:	3ff80000 	.word	0x3ff80000
 80095dc:	08017820 	.word	0x08017820
 80095e0:	080177f8 	.word	0x080177f8
 80095e4:	080177f1 	.word	0x080177f1
 80095e8:	07f1      	lsls	r1, r6, #31
 80095ea:	d508      	bpl.n	80095fe <_dtoa_r+0x34e>
 80095ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095f4:	f7f7 f820 	bl	8000638 <__aeabi_dmul>
 80095f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80095fc:	3501      	adds	r5, #1
 80095fe:	1076      	asrs	r6, r6, #1
 8009600:	3708      	adds	r7, #8
 8009602:	2e00      	cmp	r6, #0
 8009604:	d1f0      	bne.n	80095e8 <_dtoa_r+0x338>
 8009606:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800960a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800960e:	f7f7 f93d 	bl	800088c <__aeabi_ddiv>
 8009612:	e9cd 0100 	strd	r0, r1, [sp]
 8009616:	e01a      	b.n	800964e <_dtoa_r+0x39e>
 8009618:	2502      	movs	r5, #2
 800961a:	e7a3      	b.n	8009564 <_dtoa_r+0x2b4>
 800961c:	f000 80a0 	beq.w	8009760 <_dtoa_r+0x4b0>
 8009620:	f1ca 0600 	rsb	r6, sl, #0
 8009624:	4b9f      	ldr	r3, [pc, #636]	; (80098a4 <_dtoa_r+0x5f4>)
 8009626:	4fa0      	ldr	r7, [pc, #640]	; (80098a8 <_dtoa_r+0x5f8>)
 8009628:	f006 020f 	and.w	r2, r6, #15
 800962c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009634:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009638:	f7f6 fffe 	bl	8000638 <__aeabi_dmul>
 800963c:	e9cd 0100 	strd	r0, r1, [sp]
 8009640:	1136      	asrs	r6, r6, #4
 8009642:	2300      	movs	r3, #0
 8009644:	2502      	movs	r5, #2
 8009646:	2e00      	cmp	r6, #0
 8009648:	d17f      	bne.n	800974a <_dtoa_r+0x49a>
 800964a:	2b00      	cmp	r3, #0
 800964c:	d1e1      	bne.n	8009612 <_dtoa_r+0x362>
 800964e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 8087 	beq.w	8009764 <_dtoa_r+0x4b4>
 8009656:	e9dd 6700 	ldrd	r6, r7, [sp]
 800965a:	2200      	movs	r2, #0
 800965c:	4b93      	ldr	r3, [pc, #588]	; (80098ac <_dtoa_r+0x5fc>)
 800965e:	4630      	mov	r0, r6
 8009660:	4639      	mov	r1, r7
 8009662:	f7f7 fa5b 	bl	8000b1c <__aeabi_dcmplt>
 8009666:	2800      	cmp	r0, #0
 8009668:	d07c      	beq.n	8009764 <_dtoa_r+0x4b4>
 800966a:	f1b9 0f00 	cmp.w	r9, #0
 800966e:	d079      	beq.n	8009764 <_dtoa_r+0x4b4>
 8009670:	9b02      	ldr	r3, [sp, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	dd35      	ble.n	80096e2 <_dtoa_r+0x432>
 8009676:	f10a 33ff 	add.w	r3, sl, #4294967295
 800967a:	9308      	str	r3, [sp, #32]
 800967c:	4639      	mov	r1, r7
 800967e:	2200      	movs	r2, #0
 8009680:	4b8b      	ldr	r3, [pc, #556]	; (80098b0 <_dtoa_r+0x600>)
 8009682:	4630      	mov	r0, r6
 8009684:	f7f6 ffd8 	bl	8000638 <__aeabi_dmul>
 8009688:	e9cd 0100 	strd	r0, r1, [sp]
 800968c:	9f02      	ldr	r7, [sp, #8]
 800968e:	3501      	adds	r5, #1
 8009690:	4628      	mov	r0, r5
 8009692:	f7f6 ff67 	bl	8000564 <__aeabi_i2d>
 8009696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800969a:	f7f6 ffcd 	bl	8000638 <__aeabi_dmul>
 800969e:	2200      	movs	r2, #0
 80096a0:	4b84      	ldr	r3, [pc, #528]	; (80098b4 <_dtoa_r+0x604>)
 80096a2:	f7f6 fe13 	bl	80002cc <__adddf3>
 80096a6:	4605      	mov	r5, r0
 80096a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80096ac:	2f00      	cmp	r7, #0
 80096ae:	d15d      	bne.n	800976c <_dtoa_r+0x4bc>
 80096b0:	2200      	movs	r2, #0
 80096b2:	4b81      	ldr	r3, [pc, #516]	; (80098b8 <_dtoa_r+0x608>)
 80096b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096b8:	f7f6 fe06 	bl	80002c8 <__aeabi_dsub>
 80096bc:	462a      	mov	r2, r5
 80096be:	4633      	mov	r3, r6
 80096c0:	e9cd 0100 	strd	r0, r1, [sp]
 80096c4:	f7f7 fa48 	bl	8000b58 <__aeabi_dcmpgt>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	f040 8288 	bne.w	8009bde <_dtoa_r+0x92e>
 80096ce:	462a      	mov	r2, r5
 80096d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80096d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096d8:	f7f7 fa20 	bl	8000b1c <__aeabi_dcmplt>
 80096dc:	2800      	cmp	r0, #0
 80096de:	f040 827c 	bne.w	8009bda <_dtoa_r+0x92a>
 80096e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80096e6:	e9cd 2300 	strd	r2, r3, [sp]
 80096ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f2c0 8150 	blt.w	8009992 <_dtoa_r+0x6e2>
 80096f2:	f1ba 0f0e 	cmp.w	sl, #14
 80096f6:	f300 814c 	bgt.w	8009992 <_dtoa_r+0x6e2>
 80096fa:	4b6a      	ldr	r3, [pc, #424]	; (80098a4 <_dtoa_r+0x5f4>)
 80096fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009700:	ed93 7b00 	vldr	d7, [r3]
 8009704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009706:	2b00      	cmp	r3, #0
 8009708:	ed8d 7b02 	vstr	d7, [sp, #8]
 800970c:	f280 80d8 	bge.w	80098c0 <_dtoa_r+0x610>
 8009710:	f1b9 0f00 	cmp.w	r9, #0
 8009714:	f300 80d4 	bgt.w	80098c0 <_dtoa_r+0x610>
 8009718:	f040 825e 	bne.w	8009bd8 <_dtoa_r+0x928>
 800971c:	2200      	movs	r2, #0
 800971e:	4b66      	ldr	r3, [pc, #408]	; (80098b8 <_dtoa_r+0x608>)
 8009720:	ec51 0b17 	vmov	r0, r1, d7
 8009724:	f7f6 ff88 	bl	8000638 <__aeabi_dmul>
 8009728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800972c:	f7f7 fa0a 	bl	8000b44 <__aeabi_dcmpge>
 8009730:	464f      	mov	r7, r9
 8009732:	464e      	mov	r6, r9
 8009734:	2800      	cmp	r0, #0
 8009736:	f040 8234 	bne.w	8009ba2 <_dtoa_r+0x8f2>
 800973a:	2331      	movs	r3, #49	; 0x31
 800973c:	f10b 0501 	add.w	r5, fp, #1
 8009740:	f88b 3000 	strb.w	r3, [fp]
 8009744:	f10a 0a01 	add.w	sl, sl, #1
 8009748:	e22f      	b.n	8009baa <_dtoa_r+0x8fa>
 800974a:	07f2      	lsls	r2, r6, #31
 800974c:	d505      	bpl.n	800975a <_dtoa_r+0x4aa>
 800974e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009752:	f7f6 ff71 	bl	8000638 <__aeabi_dmul>
 8009756:	3501      	adds	r5, #1
 8009758:	2301      	movs	r3, #1
 800975a:	1076      	asrs	r6, r6, #1
 800975c:	3708      	adds	r7, #8
 800975e:	e772      	b.n	8009646 <_dtoa_r+0x396>
 8009760:	2502      	movs	r5, #2
 8009762:	e774      	b.n	800964e <_dtoa_r+0x39e>
 8009764:	f8cd a020 	str.w	sl, [sp, #32]
 8009768:	464f      	mov	r7, r9
 800976a:	e791      	b.n	8009690 <_dtoa_r+0x3e0>
 800976c:	4b4d      	ldr	r3, [pc, #308]	; (80098a4 <_dtoa_r+0x5f4>)
 800976e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009772:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009778:	2b00      	cmp	r3, #0
 800977a:	d047      	beq.n	800980c <_dtoa_r+0x55c>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	2000      	movs	r0, #0
 8009782:	494e      	ldr	r1, [pc, #312]	; (80098bc <_dtoa_r+0x60c>)
 8009784:	f7f7 f882 	bl	800088c <__aeabi_ddiv>
 8009788:	462a      	mov	r2, r5
 800978a:	4633      	mov	r3, r6
 800978c:	f7f6 fd9c 	bl	80002c8 <__aeabi_dsub>
 8009790:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009794:	465d      	mov	r5, fp
 8009796:	e9dd 0100 	ldrd	r0, r1, [sp]
 800979a:	f7f7 f9fd 	bl	8000b98 <__aeabi_d2iz>
 800979e:	4606      	mov	r6, r0
 80097a0:	f7f6 fee0 	bl	8000564 <__aeabi_i2d>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097ac:	f7f6 fd8c 	bl	80002c8 <__aeabi_dsub>
 80097b0:	3630      	adds	r6, #48	; 0x30
 80097b2:	f805 6b01 	strb.w	r6, [r5], #1
 80097b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80097ba:	e9cd 0100 	strd	r0, r1, [sp]
 80097be:	f7f7 f9ad 	bl	8000b1c <__aeabi_dcmplt>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d163      	bne.n	800988e <_dtoa_r+0x5de>
 80097c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097ca:	2000      	movs	r0, #0
 80097cc:	4937      	ldr	r1, [pc, #220]	; (80098ac <_dtoa_r+0x5fc>)
 80097ce:	f7f6 fd7b 	bl	80002c8 <__aeabi_dsub>
 80097d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80097d6:	f7f7 f9a1 	bl	8000b1c <__aeabi_dcmplt>
 80097da:	2800      	cmp	r0, #0
 80097dc:	f040 80b7 	bne.w	800994e <_dtoa_r+0x69e>
 80097e0:	eba5 030b 	sub.w	r3, r5, fp
 80097e4:	429f      	cmp	r7, r3
 80097e6:	f77f af7c 	ble.w	80096e2 <_dtoa_r+0x432>
 80097ea:	2200      	movs	r2, #0
 80097ec:	4b30      	ldr	r3, [pc, #192]	; (80098b0 <_dtoa_r+0x600>)
 80097ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097f2:	f7f6 ff21 	bl	8000638 <__aeabi_dmul>
 80097f6:	2200      	movs	r2, #0
 80097f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80097fc:	4b2c      	ldr	r3, [pc, #176]	; (80098b0 <_dtoa_r+0x600>)
 80097fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009802:	f7f6 ff19 	bl	8000638 <__aeabi_dmul>
 8009806:	e9cd 0100 	strd	r0, r1, [sp]
 800980a:	e7c4      	b.n	8009796 <_dtoa_r+0x4e6>
 800980c:	462a      	mov	r2, r5
 800980e:	4633      	mov	r3, r6
 8009810:	f7f6 ff12 	bl	8000638 <__aeabi_dmul>
 8009814:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009818:	eb0b 0507 	add.w	r5, fp, r7
 800981c:	465e      	mov	r6, fp
 800981e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009822:	f7f7 f9b9 	bl	8000b98 <__aeabi_d2iz>
 8009826:	4607      	mov	r7, r0
 8009828:	f7f6 fe9c 	bl	8000564 <__aeabi_i2d>
 800982c:	3730      	adds	r7, #48	; 0x30
 800982e:	4602      	mov	r2, r0
 8009830:	460b      	mov	r3, r1
 8009832:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009836:	f7f6 fd47 	bl	80002c8 <__aeabi_dsub>
 800983a:	f806 7b01 	strb.w	r7, [r6], #1
 800983e:	42ae      	cmp	r6, r5
 8009840:	e9cd 0100 	strd	r0, r1, [sp]
 8009844:	f04f 0200 	mov.w	r2, #0
 8009848:	d126      	bne.n	8009898 <_dtoa_r+0x5e8>
 800984a:	4b1c      	ldr	r3, [pc, #112]	; (80098bc <_dtoa_r+0x60c>)
 800984c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009850:	f7f6 fd3c 	bl	80002cc <__adddf3>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	e9dd 0100 	ldrd	r0, r1, [sp]
 800985c:	f7f7 f97c 	bl	8000b58 <__aeabi_dcmpgt>
 8009860:	2800      	cmp	r0, #0
 8009862:	d174      	bne.n	800994e <_dtoa_r+0x69e>
 8009864:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009868:	2000      	movs	r0, #0
 800986a:	4914      	ldr	r1, [pc, #80]	; (80098bc <_dtoa_r+0x60c>)
 800986c:	f7f6 fd2c 	bl	80002c8 <__aeabi_dsub>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009878:	f7f7 f950 	bl	8000b1c <__aeabi_dcmplt>
 800987c:	2800      	cmp	r0, #0
 800987e:	f43f af30 	beq.w	80096e2 <_dtoa_r+0x432>
 8009882:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009886:	2b30      	cmp	r3, #48	; 0x30
 8009888:	f105 32ff 	add.w	r2, r5, #4294967295
 800988c:	d002      	beq.n	8009894 <_dtoa_r+0x5e4>
 800988e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009892:	e04a      	b.n	800992a <_dtoa_r+0x67a>
 8009894:	4615      	mov	r5, r2
 8009896:	e7f4      	b.n	8009882 <_dtoa_r+0x5d2>
 8009898:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <_dtoa_r+0x600>)
 800989a:	f7f6 fecd 	bl	8000638 <__aeabi_dmul>
 800989e:	e9cd 0100 	strd	r0, r1, [sp]
 80098a2:	e7bc      	b.n	800981e <_dtoa_r+0x56e>
 80098a4:	08017820 	.word	0x08017820
 80098a8:	080177f8 	.word	0x080177f8
 80098ac:	3ff00000 	.word	0x3ff00000
 80098b0:	40240000 	.word	0x40240000
 80098b4:	401c0000 	.word	0x401c0000
 80098b8:	40140000 	.word	0x40140000
 80098bc:	3fe00000 	.word	0x3fe00000
 80098c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80098c4:	465d      	mov	r5, fp
 80098c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098ca:	4630      	mov	r0, r6
 80098cc:	4639      	mov	r1, r7
 80098ce:	f7f6 ffdd 	bl	800088c <__aeabi_ddiv>
 80098d2:	f7f7 f961 	bl	8000b98 <__aeabi_d2iz>
 80098d6:	4680      	mov	r8, r0
 80098d8:	f7f6 fe44 	bl	8000564 <__aeabi_i2d>
 80098dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098e0:	f7f6 feaa 	bl	8000638 <__aeabi_dmul>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4630      	mov	r0, r6
 80098ea:	4639      	mov	r1, r7
 80098ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80098f0:	f7f6 fcea 	bl	80002c8 <__aeabi_dsub>
 80098f4:	f805 6b01 	strb.w	r6, [r5], #1
 80098f8:	eba5 060b 	sub.w	r6, r5, fp
 80098fc:	45b1      	cmp	r9, r6
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	d139      	bne.n	8009978 <_dtoa_r+0x6c8>
 8009904:	f7f6 fce2 	bl	80002cc <__adddf3>
 8009908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800990c:	4606      	mov	r6, r0
 800990e:	460f      	mov	r7, r1
 8009910:	f7f7 f922 	bl	8000b58 <__aeabi_dcmpgt>
 8009914:	b9c8      	cbnz	r0, 800994a <_dtoa_r+0x69a>
 8009916:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800991a:	4630      	mov	r0, r6
 800991c:	4639      	mov	r1, r7
 800991e:	f7f7 f8f3 	bl	8000b08 <__aeabi_dcmpeq>
 8009922:	b110      	cbz	r0, 800992a <_dtoa_r+0x67a>
 8009924:	f018 0f01 	tst.w	r8, #1
 8009928:	d10f      	bne.n	800994a <_dtoa_r+0x69a>
 800992a:	9904      	ldr	r1, [sp, #16]
 800992c:	4620      	mov	r0, r4
 800992e:	f000 fac6 	bl	8009ebe <_Bfree>
 8009932:	2300      	movs	r3, #0
 8009934:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009936:	702b      	strb	r3, [r5, #0]
 8009938:	f10a 0301 	add.w	r3, sl, #1
 800993c:	6013      	str	r3, [r2, #0]
 800993e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 8241 	beq.w	8009dc8 <_dtoa_r+0xb18>
 8009946:	601d      	str	r5, [r3, #0]
 8009948:	e23e      	b.n	8009dc8 <_dtoa_r+0xb18>
 800994a:	f8cd a020 	str.w	sl, [sp, #32]
 800994e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009952:	2a39      	cmp	r2, #57	; 0x39
 8009954:	f105 33ff 	add.w	r3, r5, #4294967295
 8009958:	d108      	bne.n	800996c <_dtoa_r+0x6bc>
 800995a:	459b      	cmp	fp, r3
 800995c:	d10a      	bne.n	8009974 <_dtoa_r+0x6c4>
 800995e:	9b08      	ldr	r3, [sp, #32]
 8009960:	3301      	adds	r3, #1
 8009962:	9308      	str	r3, [sp, #32]
 8009964:	2330      	movs	r3, #48	; 0x30
 8009966:	f88b 3000 	strb.w	r3, [fp]
 800996a:	465b      	mov	r3, fp
 800996c:	781a      	ldrb	r2, [r3, #0]
 800996e:	3201      	adds	r2, #1
 8009970:	701a      	strb	r2, [r3, #0]
 8009972:	e78c      	b.n	800988e <_dtoa_r+0x5de>
 8009974:	461d      	mov	r5, r3
 8009976:	e7ea      	b.n	800994e <_dtoa_r+0x69e>
 8009978:	2200      	movs	r2, #0
 800997a:	4b9b      	ldr	r3, [pc, #620]	; (8009be8 <_dtoa_r+0x938>)
 800997c:	f7f6 fe5c 	bl	8000638 <__aeabi_dmul>
 8009980:	2200      	movs	r2, #0
 8009982:	2300      	movs	r3, #0
 8009984:	4606      	mov	r6, r0
 8009986:	460f      	mov	r7, r1
 8009988:	f7f7 f8be 	bl	8000b08 <__aeabi_dcmpeq>
 800998c:	2800      	cmp	r0, #0
 800998e:	d09a      	beq.n	80098c6 <_dtoa_r+0x616>
 8009990:	e7cb      	b.n	800992a <_dtoa_r+0x67a>
 8009992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009994:	2a00      	cmp	r2, #0
 8009996:	f000 808b 	beq.w	8009ab0 <_dtoa_r+0x800>
 800999a:	9a06      	ldr	r2, [sp, #24]
 800999c:	2a01      	cmp	r2, #1
 800999e:	dc6e      	bgt.n	8009a7e <_dtoa_r+0x7ce>
 80099a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80099a2:	2a00      	cmp	r2, #0
 80099a4:	d067      	beq.n	8009a76 <_dtoa_r+0x7c6>
 80099a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80099aa:	9f07      	ldr	r7, [sp, #28]
 80099ac:	9d05      	ldr	r5, [sp, #20]
 80099ae:	9a05      	ldr	r2, [sp, #20]
 80099b0:	2101      	movs	r1, #1
 80099b2:	441a      	add	r2, r3
 80099b4:	4620      	mov	r0, r4
 80099b6:	9205      	str	r2, [sp, #20]
 80099b8:	4498      	add	r8, r3
 80099ba:	f000 fb20 	bl	8009ffe <__i2b>
 80099be:	4606      	mov	r6, r0
 80099c0:	2d00      	cmp	r5, #0
 80099c2:	dd0c      	ble.n	80099de <_dtoa_r+0x72e>
 80099c4:	f1b8 0f00 	cmp.w	r8, #0
 80099c8:	dd09      	ble.n	80099de <_dtoa_r+0x72e>
 80099ca:	4545      	cmp	r5, r8
 80099cc:	9a05      	ldr	r2, [sp, #20]
 80099ce:	462b      	mov	r3, r5
 80099d0:	bfa8      	it	ge
 80099d2:	4643      	movge	r3, r8
 80099d4:	1ad2      	subs	r2, r2, r3
 80099d6:	9205      	str	r2, [sp, #20]
 80099d8:	1aed      	subs	r5, r5, r3
 80099da:	eba8 0803 	sub.w	r8, r8, r3
 80099de:	9b07      	ldr	r3, [sp, #28]
 80099e0:	b1eb      	cbz	r3, 8009a1e <_dtoa_r+0x76e>
 80099e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d067      	beq.n	8009ab8 <_dtoa_r+0x808>
 80099e8:	b18f      	cbz	r7, 8009a0e <_dtoa_r+0x75e>
 80099ea:	4631      	mov	r1, r6
 80099ec:	463a      	mov	r2, r7
 80099ee:	4620      	mov	r0, r4
 80099f0:	f000 fba4 	bl	800a13c <__pow5mult>
 80099f4:	9a04      	ldr	r2, [sp, #16]
 80099f6:	4601      	mov	r1, r0
 80099f8:	4606      	mov	r6, r0
 80099fa:	4620      	mov	r0, r4
 80099fc:	f000 fb08 	bl	800a010 <__multiply>
 8009a00:	9904      	ldr	r1, [sp, #16]
 8009a02:	9008      	str	r0, [sp, #32]
 8009a04:	4620      	mov	r0, r4
 8009a06:	f000 fa5a 	bl	8009ebe <_Bfree>
 8009a0a:	9b08      	ldr	r3, [sp, #32]
 8009a0c:	9304      	str	r3, [sp, #16]
 8009a0e:	9b07      	ldr	r3, [sp, #28]
 8009a10:	1bda      	subs	r2, r3, r7
 8009a12:	d004      	beq.n	8009a1e <_dtoa_r+0x76e>
 8009a14:	9904      	ldr	r1, [sp, #16]
 8009a16:	4620      	mov	r0, r4
 8009a18:	f000 fb90 	bl	800a13c <__pow5mult>
 8009a1c:	9004      	str	r0, [sp, #16]
 8009a1e:	2101      	movs	r1, #1
 8009a20:	4620      	mov	r0, r4
 8009a22:	f000 faec 	bl	8009ffe <__i2b>
 8009a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a28:	4607      	mov	r7, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 81d0 	beq.w	8009dd0 <_dtoa_r+0xb20>
 8009a30:	461a      	mov	r2, r3
 8009a32:	4601      	mov	r1, r0
 8009a34:	4620      	mov	r0, r4
 8009a36:	f000 fb81 	bl	800a13c <__pow5mult>
 8009a3a:	9b06      	ldr	r3, [sp, #24]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	4607      	mov	r7, r0
 8009a40:	dc40      	bgt.n	8009ac4 <_dtoa_r+0x814>
 8009a42:	9b00      	ldr	r3, [sp, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d139      	bne.n	8009abc <_dtoa_r+0x80c>
 8009a48:	9b01      	ldr	r3, [sp, #4]
 8009a4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d136      	bne.n	8009ac0 <_dtoa_r+0x810>
 8009a52:	9b01      	ldr	r3, [sp, #4]
 8009a54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a58:	0d1b      	lsrs	r3, r3, #20
 8009a5a:	051b      	lsls	r3, r3, #20
 8009a5c:	b12b      	cbz	r3, 8009a6a <_dtoa_r+0x7ba>
 8009a5e:	9b05      	ldr	r3, [sp, #20]
 8009a60:	3301      	adds	r3, #1
 8009a62:	9305      	str	r3, [sp, #20]
 8009a64:	f108 0801 	add.w	r8, r8, #1
 8009a68:	2301      	movs	r3, #1
 8009a6a:	9307      	str	r3, [sp, #28]
 8009a6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d12a      	bne.n	8009ac8 <_dtoa_r+0x818>
 8009a72:	2001      	movs	r0, #1
 8009a74:	e030      	b.n	8009ad8 <_dtoa_r+0x828>
 8009a76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a78:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a7c:	e795      	b.n	80099aa <_dtoa_r+0x6fa>
 8009a7e:	9b07      	ldr	r3, [sp, #28]
 8009a80:	f109 37ff 	add.w	r7, r9, #4294967295
 8009a84:	42bb      	cmp	r3, r7
 8009a86:	bfbf      	itttt	lt
 8009a88:	9b07      	ldrlt	r3, [sp, #28]
 8009a8a:	9707      	strlt	r7, [sp, #28]
 8009a8c:	1afa      	sublt	r2, r7, r3
 8009a8e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009a90:	bfbb      	ittet	lt
 8009a92:	189b      	addlt	r3, r3, r2
 8009a94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009a96:	1bdf      	subge	r7, r3, r7
 8009a98:	2700      	movlt	r7, #0
 8009a9a:	f1b9 0f00 	cmp.w	r9, #0
 8009a9e:	bfb5      	itete	lt
 8009aa0:	9b05      	ldrlt	r3, [sp, #20]
 8009aa2:	9d05      	ldrge	r5, [sp, #20]
 8009aa4:	eba3 0509 	sublt.w	r5, r3, r9
 8009aa8:	464b      	movge	r3, r9
 8009aaa:	bfb8      	it	lt
 8009aac:	2300      	movlt	r3, #0
 8009aae:	e77e      	b.n	80099ae <_dtoa_r+0x6fe>
 8009ab0:	9f07      	ldr	r7, [sp, #28]
 8009ab2:	9d05      	ldr	r5, [sp, #20]
 8009ab4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009ab6:	e783      	b.n	80099c0 <_dtoa_r+0x710>
 8009ab8:	9a07      	ldr	r2, [sp, #28]
 8009aba:	e7ab      	b.n	8009a14 <_dtoa_r+0x764>
 8009abc:	2300      	movs	r3, #0
 8009abe:	e7d4      	b.n	8009a6a <_dtoa_r+0x7ba>
 8009ac0:	9b00      	ldr	r3, [sp, #0]
 8009ac2:	e7d2      	b.n	8009a6a <_dtoa_r+0x7ba>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	9307      	str	r3, [sp, #28]
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009ace:	6918      	ldr	r0, [r3, #16]
 8009ad0:	f000 fa47 	bl	8009f62 <__hi0bits>
 8009ad4:	f1c0 0020 	rsb	r0, r0, #32
 8009ad8:	4440      	add	r0, r8
 8009ada:	f010 001f 	ands.w	r0, r0, #31
 8009ade:	d047      	beq.n	8009b70 <_dtoa_r+0x8c0>
 8009ae0:	f1c0 0320 	rsb	r3, r0, #32
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	dd3b      	ble.n	8009b60 <_dtoa_r+0x8b0>
 8009ae8:	9b05      	ldr	r3, [sp, #20]
 8009aea:	f1c0 001c 	rsb	r0, r0, #28
 8009aee:	4403      	add	r3, r0
 8009af0:	9305      	str	r3, [sp, #20]
 8009af2:	4405      	add	r5, r0
 8009af4:	4480      	add	r8, r0
 8009af6:	9b05      	ldr	r3, [sp, #20]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	dd05      	ble.n	8009b08 <_dtoa_r+0x858>
 8009afc:	461a      	mov	r2, r3
 8009afe:	9904      	ldr	r1, [sp, #16]
 8009b00:	4620      	mov	r0, r4
 8009b02:	f000 fb69 	bl	800a1d8 <__lshift>
 8009b06:	9004      	str	r0, [sp, #16]
 8009b08:	f1b8 0f00 	cmp.w	r8, #0
 8009b0c:	dd05      	ble.n	8009b1a <_dtoa_r+0x86a>
 8009b0e:	4639      	mov	r1, r7
 8009b10:	4642      	mov	r2, r8
 8009b12:	4620      	mov	r0, r4
 8009b14:	f000 fb60 	bl	800a1d8 <__lshift>
 8009b18:	4607      	mov	r7, r0
 8009b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b1c:	b353      	cbz	r3, 8009b74 <_dtoa_r+0x8c4>
 8009b1e:	4639      	mov	r1, r7
 8009b20:	9804      	ldr	r0, [sp, #16]
 8009b22:	f000 fbad 	bl	800a280 <__mcmp>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	da24      	bge.n	8009b74 <_dtoa_r+0x8c4>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	220a      	movs	r2, #10
 8009b2e:	9904      	ldr	r1, [sp, #16]
 8009b30:	4620      	mov	r0, r4
 8009b32:	f000 f9db 	bl	8009eec <__multadd>
 8009b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b38:	9004      	str	r0, [sp, #16]
 8009b3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 814d 	beq.w	8009dde <_dtoa_r+0xb2e>
 8009b44:	2300      	movs	r3, #0
 8009b46:	4631      	mov	r1, r6
 8009b48:	220a      	movs	r2, #10
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f000 f9ce 	bl	8009eec <__multadd>
 8009b50:	9b02      	ldr	r3, [sp, #8]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	4606      	mov	r6, r0
 8009b56:	dc4f      	bgt.n	8009bf8 <_dtoa_r+0x948>
 8009b58:	9b06      	ldr	r3, [sp, #24]
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	dd4c      	ble.n	8009bf8 <_dtoa_r+0x948>
 8009b5e:	e011      	b.n	8009b84 <_dtoa_r+0x8d4>
 8009b60:	d0c9      	beq.n	8009af6 <_dtoa_r+0x846>
 8009b62:	9a05      	ldr	r2, [sp, #20]
 8009b64:	331c      	adds	r3, #28
 8009b66:	441a      	add	r2, r3
 8009b68:	9205      	str	r2, [sp, #20]
 8009b6a:	441d      	add	r5, r3
 8009b6c:	4498      	add	r8, r3
 8009b6e:	e7c2      	b.n	8009af6 <_dtoa_r+0x846>
 8009b70:	4603      	mov	r3, r0
 8009b72:	e7f6      	b.n	8009b62 <_dtoa_r+0x8b2>
 8009b74:	f1b9 0f00 	cmp.w	r9, #0
 8009b78:	dc38      	bgt.n	8009bec <_dtoa_r+0x93c>
 8009b7a:	9b06      	ldr	r3, [sp, #24]
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	dd35      	ble.n	8009bec <_dtoa_r+0x93c>
 8009b80:	f8cd 9008 	str.w	r9, [sp, #8]
 8009b84:	9b02      	ldr	r3, [sp, #8]
 8009b86:	b963      	cbnz	r3, 8009ba2 <_dtoa_r+0x8f2>
 8009b88:	4639      	mov	r1, r7
 8009b8a:	2205      	movs	r2, #5
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f000 f9ad 	bl	8009eec <__multadd>
 8009b92:	4601      	mov	r1, r0
 8009b94:	4607      	mov	r7, r0
 8009b96:	9804      	ldr	r0, [sp, #16]
 8009b98:	f000 fb72 	bl	800a280 <__mcmp>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	f73f adcc 	bgt.w	800973a <_dtoa_r+0x48a>
 8009ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ba4:	465d      	mov	r5, fp
 8009ba6:	ea6f 0a03 	mvn.w	sl, r3
 8009baa:	f04f 0900 	mov.w	r9, #0
 8009bae:	4639      	mov	r1, r7
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	f000 f984 	bl	8009ebe <_Bfree>
 8009bb6:	2e00      	cmp	r6, #0
 8009bb8:	f43f aeb7 	beq.w	800992a <_dtoa_r+0x67a>
 8009bbc:	f1b9 0f00 	cmp.w	r9, #0
 8009bc0:	d005      	beq.n	8009bce <_dtoa_r+0x91e>
 8009bc2:	45b1      	cmp	r9, r6
 8009bc4:	d003      	beq.n	8009bce <_dtoa_r+0x91e>
 8009bc6:	4649      	mov	r1, r9
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 f978 	bl	8009ebe <_Bfree>
 8009bce:	4631      	mov	r1, r6
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f000 f974 	bl	8009ebe <_Bfree>
 8009bd6:	e6a8      	b.n	800992a <_dtoa_r+0x67a>
 8009bd8:	2700      	movs	r7, #0
 8009bda:	463e      	mov	r6, r7
 8009bdc:	e7e1      	b.n	8009ba2 <_dtoa_r+0x8f2>
 8009bde:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009be2:	463e      	mov	r6, r7
 8009be4:	e5a9      	b.n	800973a <_dtoa_r+0x48a>
 8009be6:	bf00      	nop
 8009be8:	40240000 	.word	0x40240000
 8009bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bee:	f8cd 9008 	str.w	r9, [sp, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 80fa 	beq.w	8009dec <_dtoa_r+0xb3c>
 8009bf8:	2d00      	cmp	r5, #0
 8009bfa:	dd05      	ble.n	8009c08 <_dtoa_r+0x958>
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	462a      	mov	r2, r5
 8009c00:	4620      	mov	r0, r4
 8009c02:	f000 fae9 	bl	800a1d8 <__lshift>
 8009c06:	4606      	mov	r6, r0
 8009c08:	9b07      	ldr	r3, [sp, #28]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d04c      	beq.n	8009ca8 <_dtoa_r+0x9f8>
 8009c0e:	6871      	ldr	r1, [r6, #4]
 8009c10:	4620      	mov	r0, r4
 8009c12:	f000 f920 	bl	8009e56 <_Balloc>
 8009c16:	6932      	ldr	r2, [r6, #16]
 8009c18:	3202      	adds	r2, #2
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	0092      	lsls	r2, r2, #2
 8009c1e:	f106 010c 	add.w	r1, r6, #12
 8009c22:	300c      	adds	r0, #12
 8009c24:	f000 f90a 	bl	8009e3c <memcpy>
 8009c28:	2201      	movs	r2, #1
 8009c2a:	4629      	mov	r1, r5
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	f000 fad3 	bl	800a1d8 <__lshift>
 8009c32:	9b00      	ldr	r3, [sp, #0]
 8009c34:	f8cd b014 	str.w	fp, [sp, #20]
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	46b1      	mov	r9, r6
 8009c3e:	9307      	str	r3, [sp, #28]
 8009c40:	4606      	mov	r6, r0
 8009c42:	4639      	mov	r1, r7
 8009c44:	9804      	ldr	r0, [sp, #16]
 8009c46:	f7ff faa7 	bl	8009198 <quorem>
 8009c4a:	4649      	mov	r1, r9
 8009c4c:	4605      	mov	r5, r0
 8009c4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009c52:	9804      	ldr	r0, [sp, #16]
 8009c54:	f000 fb14 	bl	800a280 <__mcmp>
 8009c58:	4632      	mov	r2, r6
 8009c5a:	9000      	str	r0, [sp, #0]
 8009c5c:	4639      	mov	r1, r7
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f000 fb28 	bl	800a2b4 <__mdiff>
 8009c64:	68c3      	ldr	r3, [r0, #12]
 8009c66:	4602      	mov	r2, r0
 8009c68:	bb03      	cbnz	r3, 8009cac <_dtoa_r+0x9fc>
 8009c6a:	4601      	mov	r1, r0
 8009c6c:	9008      	str	r0, [sp, #32]
 8009c6e:	9804      	ldr	r0, [sp, #16]
 8009c70:	f000 fb06 	bl	800a280 <__mcmp>
 8009c74:	9a08      	ldr	r2, [sp, #32]
 8009c76:	4603      	mov	r3, r0
 8009c78:	4611      	mov	r1, r2
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	9308      	str	r3, [sp, #32]
 8009c7e:	f000 f91e 	bl	8009ebe <_Bfree>
 8009c82:	9b08      	ldr	r3, [sp, #32]
 8009c84:	b9a3      	cbnz	r3, 8009cb0 <_dtoa_r+0xa00>
 8009c86:	9a06      	ldr	r2, [sp, #24]
 8009c88:	b992      	cbnz	r2, 8009cb0 <_dtoa_r+0xa00>
 8009c8a:	9a07      	ldr	r2, [sp, #28]
 8009c8c:	b982      	cbnz	r2, 8009cb0 <_dtoa_r+0xa00>
 8009c8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009c92:	d029      	beq.n	8009ce8 <_dtoa_r+0xa38>
 8009c94:	9b00      	ldr	r3, [sp, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	dd01      	ble.n	8009c9e <_dtoa_r+0x9ee>
 8009c9a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009c9e:	9b05      	ldr	r3, [sp, #20]
 8009ca0:	1c5d      	adds	r5, r3, #1
 8009ca2:	f883 8000 	strb.w	r8, [r3]
 8009ca6:	e782      	b.n	8009bae <_dtoa_r+0x8fe>
 8009ca8:	4630      	mov	r0, r6
 8009caa:	e7c2      	b.n	8009c32 <_dtoa_r+0x982>
 8009cac:	2301      	movs	r3, #1
 8009cae:	e7e3      	b.n	8009c78 <_dtoa_r+0x9c8>
 8009cb0:	9a00      	ldr	r2, [sp, #0]
 8009cb2:	2a00      	cmp	r2, #0
 8009cb4:	db04      	blt.n	8009cc0 <_dtoa_r+0xa10>
 8009cb6:	d125      	bne.n	8009d04 <_dtoa_r+0xa54>
 8009cb8:	9a06      	ldr	r2, [sp, #24]
 8009cba:	bb1a      	cbnz	r2, 8009d04 <_dtoa_r+0xa54>
 8009cbc:	9a07      	ldr	r2, [sp, #28]
 8009cbe:	bb0a      	cbnz	r2, 8009d04 <_dtoa_r+0xa54>
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	ddec      	ble.n	8009c9e <_dtoa_r+0x9ee>
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	9904      	ldr	r1, [sp, #16]
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f000 fa85 	bl	800a1d8 <__lshift>
 8009cce:	4639      	mov	r1, r7
 8009cd0:	9004      	str	r0, [sp, #16]
 8009cd2:	f000 fad5 	bl	800a280 <__mcmp>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	dc03      	bgt.n	8009ce2 <_dtoa_r+0xa32>
 8009cda:	d1e0      	bne.n	8009c9e <_dtoa_r+0x9ee>
 8009cdc:	f018 0f01 	tst.w	r8, #1
 8009ce0:	d0dd      	beq.n	8009c9e <_dtoa_r+0x9ee>
 8009ce2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009ce6:	d1d8      	bne.n	8009c9a <_dtoa_r+0x9ea>
 8009ce8:	9b05      	ldr	r3, [sp, #20]
 8009cea:	9a05      	ldr	r2, [sp, #20]
 8009cec:	1c5d      	adds	r5, r3, #1
 8009cee:	2339      	movs	r3, #57	; 0x39
 8009cf0:	7013      	strb	r3, [r2, #0]
 8009cf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009cf6:	2b39      	cmp	r3, #57	; 0x39
 8009cf8:	f105 32ff 	add.w	r2, r5, #4294967295
 8009cfc:	d04f      	beq.n	8009d9e <_dtoa_r+0xaee>
 8009cfe:	3301      	adds	r3, #1
 8009d00:	7013      	strb	r3, [r2, #0]
 8009d02:	e754      	b.n	8009bae <_dtoa_r+0x8fe>
 8009d04:	9a05      	ldr	r2, [sp, #20]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f102 0501 	add.w	r5, r2, #1
 8009d0c:	dd06      	ble.n	8009d1c <_dtoa_r+0xa6c>
 8009d0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009d12:	d0e9      	beq.n	8009ce8 <_dtoa_r+0xa38>
 8009d14:	f108 0801 	add.w	r8, r8, #1
 8009d18:	9b05      	ldr	r3, [sp, #20]
 8009d1a:	e7c2      	b.n	8009ca2 <_dtoa_r+0x9f2>
 8009d1c:	9a02      	ldr	r2, [sp, #8]
 8009d1e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009d22:	eba5 030b 	sub.w	r3, r5, fp
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d021      	beq.n	8009d6e <_dtoa_r+0xabe>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	220a      	movs	r2, #10
 8009d2e:	9904      	ldr	r1, [sp, #16]
 8009d30:	4620      	mov	r0, r4
 8009d32:	f000 f8db 	bl	8009eec <__multadd>
 8009d36:	45b1      	cmp	r9, r6
 8009d38:	9004      	str	r0, [sp, #16]
 8009d3a:	f04f 0300 	mov.w	r3, #0
 8009d3e:	f04f 020a 	mov.w	r2, #10
 8009d42:	4649      	mov	r1, r9
 8009d44:	4620      	mov	r0, r4
 8009d46:	d105      	bne.n	8009d54 <_dtoa_r+0xaa4>
 8009d48:	f000 f8d0 	bl	8009eec <__multadd>
 8009d4c:	4681      	mov	r9, r0
 8009d4e:	4606      	mov	r6, r0
 8009d50:	9505      	str	r5, [sp, #20]
 8009d52:	e776      	b.n	8009c42 <_dtoa_r+0x992>
 8009d54:	f000 f8ca 	bl	8009eec <__multadd>
 8009d58:	4631      	mov	r1, r6
 8009d5a:	4681      	mov	r9, r0
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	220a      	movs	r2, #10
 8009d60:	4620      	mov	r0, r4
 8009d62:	f000 f8c3 	bl	8009eec <__multadd>
 8009d66:	4606      	mov	r6, r0
 8009d68:	e7f2      	b.n	8009d50 <_dtoa_r+0xaa0>
 8009d6a:	f04f 0900 	mov.w	r9, #0
 8009d6e:	2201      	movs	r2, #1
 8009d70:	9904      	ldr	r1, [sp, #16]
 8009d72:	4620      	mov	r0, r4
 8009d74:	f000 fa30 	bl	800a1d8 <__lshift>
 8009d78:	4639      	mov	r1, r7
 8009d7a:	9004      	str	r0, [sp, #16]
 8009d7c:	f000 fa80 	bl	800a280 <__mcmp>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	dcb6      	bgt.n	8009cf2 <_dtoa_r+0xa42>
 8009d84:	d102      	bne.n	8009d8c <_dtoa_r+0xadc>
 8009d86:	f018 0f01 	tst.w	r8, #1
 8009d8a:	d1b2      	bne.n	8009cf2 <_dtoa_r+0xa42>
 8009d8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d90:	2b30      	cmp	r3, #48	; 0x30
 8009d92:	f105 32ff 	add.w	r2, r5, #4294967295
 8009d96:	f47f af0a 	bne.w	8009bae <_dtoa_r+0x8fe>
 8009d9a:	4615      	mov	r5, r2
 8009d9c:	e7f6      	b.n	8009d8c <_dtoa_r+0xadc>
 8009d9e:	4593      	cmp	fp, r2
 8009da0:	d105      	bne.n	8009dae <_dtoa_r+0xafe>
 8009da2:	2331      	movs	r3, #49	; 0x31
 8009da4:	f10a 0a01 	add.w	sl, sl, #1
 8009da8:	f88b 3000 	strb.w	r3, [fp]
 8009dac:	e6ff      	b.n	8009bae <_dtoa_r+0x8fe>
 8009dae:	4615      	mov	r5, r2
 8009db0:	e79f      	b.n	8009cf2 <_dtoa_r+0xa42>
 8009db2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009e18 <_dtoa_r+0xb68>
 8009db6:	e007      	b.n	8009dc8 <_dtoa_r+0xb18>
 8009db8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dba:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009e1c <_dtoa_r+0xb6c>
 8009dbe:	b11b      	cbz	r3, 8009dc8 <_dtoa_r+0xb18>
 8009dc0:	f10b 0308 	add.w	r3, fp, #8
 8009dc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009dc6:	6013      	str	r3, [r2, #0]
 8009dc8:	4658      	mov	r0, fp
 8009dca:	b017      	add	sp, #92	; 0x5c
 8009dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd0:	9b06      	ldr	r3, [sp, #24]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	f77f ae35 	ble.w	8009a42 <_dtoa_r+0x792>
 8009dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dda:	9307      	str	r3, [sp, #28]
 8009ddc:	e649      	b.n	8009a72 <_dtoa_r+0x7c2>
 8009dde:	9b02      	ldr	r3, [sp, #8]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	dc03      	bgt.n	8009dec <_dtoa_r+0xb3c>
 8009de4:	9b06      	ldr	r3, [sp, #24]
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	f73f aecc 	bgt.w	8009b84 <_dtoa_r+0x8d4>
 8009dec:	465d      	mov	r5, fp
 8009dee:	4639      	mov	r1, r7
 8009df0:	9804      	ldr	r0, [sp, #16]
 8009df2:	f7ff f9d1 	bl	8009198 <quorem>
 8009df6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009dfa:	f805 8b01 	strb.w	r8, [r5], #1
 8009dfe:	9a02      	ldr	r2, [sp, #8]
 8009e00:	eba5 030b 	sub.w	r3, r5, fp
 8009e04:	429a      	cmp	r2, r3
 8009e06:	ddb0      	ble.n	8009d6a <_dtoa_r+0xaba>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	220a      	movs	r2, #10
 8009e0c:	9904      	ldr	r1, [sp, #16]
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f000 f86c 	bl	8009eec <__multadd>
 8009e14:	9004      	str	r0, [sp, #16]
 8009e16:	e7ea      	b.n	8009dee <_dtoa_r+0xb3e>
 8009e18:	080177c4 	.word	0x080177c4
 8009e1c:	080177e8 	.word	0x080177e8

08009e20 <_localeconv_r>:
 8009e20:	4b04      	ldr	r3, [pc, #16]	; (8009e34 <_localeconv_r+0x14>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	6a18      	ldr	r0, [r3, #32]
 8009e26:	4b04      	ldr	r3, [pc, #16]	; (8009e38 <_localeconv_r+0x18>)
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	bf08      	it	eq
 8009e2c:	4618      	moveq	r0, r3
 8009e2e:	30f0      	adds	r0, #240	; 0xf0
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	200000fc 	.word	0x200000fc
 8009e38:	20000160 	.word	0x20000160

08009e3c <memcpy>:
 8009e3c:	b510      	push	{r4, lr}
 8009e3e:	1e43      	subs	r3, r0, #1
 8009e40:	440a      	add	r2, r1
 8009e42:	4291      	cmp	r1, r2
 8009e44:	d100      	bne.n	8009e48 <memcpy+0xc>
 8009e46:	bd10      	pop	{r4, pc}
 8009e48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e50:	e7f7      	b.n	8009e42 <memcpy+0x6>

08009e52 <__malloc_lock>:
 8009e52:	4770      	bx	lr

08009e54 <__malloc_unlock>:
 8009e54:	4770      	bx	lr

08009e56 <_Balloc>:
 8009e56:	b570      	push	{r4, r5, r6, lr}
 8009e58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	460e      	mov	r6, r1
 8009e5e:	b93d      	cbnz	r5, 8009e70 <_Balloc+0x1a>
 8009e60:	2010      	movs	r0, #16
 8009e62:	f7fe fc3f 	bl	80086e4 <malloc>
 8009e66:	6260      	str	r0, [r4, #36]	; 0x24
 8009e68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e6c:	6005      	str	r5, [r0, #0]
 8009e6e:	60c5      	str	r5, [r0, #12]
 8009e70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009e72:	68eb      	ldr	r3, [r5, #12]
 8009e74:	b183      	cbz	r3, 8009e98 <_Balloc+0x42>
 8009e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009e7e:	b9b8      	cbnz	r0, 8009eb0 <_Balloc+0x5a>
 8009e80:	2101      	movs	r1, #1
 8009e82:	fa01 f506 	lsl.w	r5, r1, r6
 8009e86:	1d6a      	adds	r2, r5, #5
 8009e88:	0092      	lsls	r2, r2, #2
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f7fe fc42 	bl	8008714 <_calloc_r>
 8009e90:	b160      	cbz	r0, 8009eac <_Balloc+0x56>
 8009e92:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009e96:	e00e      	b.n	8009eb6 <_Balloc+0x60>
 8009e98:	2221      	movs	r2, #33	; 0x21
 8009e9a:	2104      	movs	r1, #4
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f7fe fc39 	bl	8008714 <_calloc_r>
 8009ea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ea4:	60e8      	str	r0, [r5, #12]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1e4      	bne.n	8009e76 <_Balloc+0x20>
 8009eac:	2000      	movs	r0, #0
 8009eae:	bd70      	pop	{r4, r5, r6, pc}
 8009eb0:	6802      	ldr	r2, [r0, #0]
 8009eb2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ebc:	e7f7      	b.n	8009eae <_Balloc+0x58>

08009ebe <_Bfree>:
 8009ebe:	b570      	push	{r4, r5, r6, lr}
 8009ec0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009ec2:	4606      	mov	r6, r0
 8009ec4:	460d      	mov	r5, r1
 8009ec6:	b93c      	cbnz	r4, 8009ed8 <_Bfree+0x1a>
 8009ec8:	2010      	movs	r0, #16
 8009eca:	f7fe fc0b 	bl	80086e4 <malloc>
 8009ece:	6270      	str	r0, [r6, #36]	; 0x24
 8009ed0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ed4:	6004      	str	r4, [r0, #0]
 8009ed6:	60c4      	str	r4, [r0, #12]
 8009ed8:	b13d      	cbz	r5, 8009eea <_Bfree+0x2c>
 8009eda:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009edc:	686a      	ldr	r2, [r5, #4]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ee4:	6029      	str	r1, [r5, #0]
 8009ee6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009eea:	bd70      	pop	{r4, r5, r6, pc}

08009eec <__multadd>:
 8009eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef0:	690d      	ldr	r5, [r1, #16]
 8009ef2:	461f      	mov	r7, r3
 8009ef4:	4606      	mov	r6, r0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	f101 0c14 	add.w	ip, r1, #20
 8009efc:	2300      	movs	r3, #0
 8009efe:	f8dc 0000 	ldr.w	r0, [ip]
 8009f02:	b281      	uxth	r1, r0
 8009f04:	fb02 7101 	mla	r1, r2, r1, r7
 8009f08:	0c0f      	lsrs	r7, r1, #16
 8009f0a:	0c00      	lsrs	r0, r0, #16
 8009f0c:	fb02 7000 	mla	r0, r2, r0, r7
 8009f10:	b289      	uxth	r1, r1
 8009f12:	3301      	adds	r3, #1
 8009f14:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009f18:	429d      	cmp	r5, r3
 8009f1a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009f1e:	f84c 1b04 	str.w	r1, [ip], #4
 8009f22:	dcec      	bgt.n	8009efe <__multadd+0x12>
 8009f24:	b1d7      	cbz	r7, 8009f5c <__multadd+0x70>
 8009f26:	68a3      	ldr	r3, [r4, #8]
 8009f28:	42ab      	cmp	r3, r5
 8009f2a:	dc12      	bgt.n	8009f52 <__multadd+0x66>
 8009f2c:	6861      	ldr	r1, [r4, #4]
 8009f2e:	4630      	mov	r0, r6
 8009f30:	3101      	adds	r1, #1
 8009f32:	f7ff ff90 	bl	8009e56 <_Balloc>
 8009f36:	6922      	ldr	r2, [r4, #16]
 8009f38:	3202      	adds	r2, #2
 8009f3a:	f104 010c 	add.w	r1, r4, #12
 8009f3e:	4680      	mov	r8, r0
 8009f40:	0092      	lsls	r2, r2, #2
 8009f42:	300c      	adds	r0, #12
 8009f44:	f7ff ff7a 	bl	8009e3c <memcpy>
 8009f48:	4621      	mov	r1, r4
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f7ff ffb7 	bl	8009ebe <_Bfree>
 8009f50:	4644      	mov	r4, r8
 8009f52:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f56:	3501      	adds	r5, #1
 8009f58:	615f      	str	r7, [r3, #20]
 8009f5a:	6125      	str	r5, [r4, #16]
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009f62 <__hi0bits>:
 8009f62:	0c02      	lsrs	r2, r0, #16
 8009f64:	0412      	lsls	r2, r2, #16
 8009f66:	4603      	mov	r3, r0
 8009f68:	b9b2      	cbnz	r2, 8009f98 <__hi0bits+0x36>
 8009f6a:	0403      	lsls	r3, r0, #16
 8009f6c:	2010      	movs	r0, #16
 8009f6e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009f72:	bf04      	itt	eq
 8009f74:	021b      	lsleq	r3, r3, #8
 8009f76:	3008      	addeq	r0, #8
 8009f78:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009f7c:	bf04      	itt	eq
 8009f7e:	011b      	lsleq	r3, r3, #4
 8009f80:	3004      	addeq	r0, #4
 8009f82:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009f86:	bf04      	itt	eq
 8009f88:	009b      	lsleq	r3, r3, #2
 8009f8a:	3002      	addeq	r0, #2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	db06      	blt.n	8009f9e <__hi0bits+0x3c>
 8009f90:	005b      	lsls	r3, r3, #1
 8009f92:	d503      	bpl.n	8009f9c <__hi0bits+0x3a>
 8009f94:	3001      	adds	r0, #1
 8009f96:	4770      	bx	lr
 8009f98:	2000      	movs	r0, #0
 8009f9a:	e7e8      	b.n	8009f6e <__hi0bits+0xc>
 8009f9c:	2020      	movs	r0, #32
 8009f9e:	4770      	bx	lr

08009fa0 <__lo0bits>:
 8009fa0:	6803      	ldr	r3, [r0, #0]
 8009fa2:	f013 0207 	ands.w	r2, r3, #7
 8009fa6:	4601      	mov	r1, r0
 8009fa8:	d00b      	beq.n	8009fc2 <__lo0bits+0x22>
 8009faa:	07da      	lsls	r2, r3, #31
 8009fac:	d423      	bmi.n	8009ff6 <__lo0bits+0x56>
 8009fae:	0798      	lsls	r0, r3, #30
 8009fb0:	bf49      	itett	mi
 8009fb2:	085b      	lsrmi	r3, r3, #1
 8009fb4:	089b      	lsrpl	r3, r3, #2
 8009fb6:	2001      	movmi	r0, #1
 8009fb8:	600b      	strmi	r3, [r1, #0]
 8009fba:	bf5c      	itt	pl
 8009fbc:	600b      	strpl	r3, [r1, #0]
 8009fbe:	2002      	movpl	r0, #2
 8009fc0:	4770      	bx	lr
 8009fc2:	b298      	uxth	r0, r3
 8009fc4:	b9a8      	cbnz	r0, 8009ff2 <__lo0bits+0x52>
 8009fc6:	0c1b      	lsrs	r3, r3, #16
 8009fc8:	2010      	movs	r0, #16
 8009fca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009fce:	bf04      	itt	eq
 8009fd0:	0a1b      	lsreq	r3, r3, #8
 8009fd2:	3008      	addeq	r0, #8
 8009fd4:	071a      	lsls	r2, r3, #28
 8009fd6:	bf04      	itt	eq
 8009fd8:	091b      	lsreq	r3, r3, #4
 8009fda:	3004      	addeq	r0, #4
 8009fdc:	079a      	lsls	r2, r3, #30
 8009fde:	bf04      	itt	eq
 8009fe0:	089b      	lsreq	r3, r3, #2
 8009fe2:	3002      	addeq	r0, #2
 8009fe4:	07da      	lsls	r2, r3, #31
 8009fe6:	d402      	bmi.n	8009fee <__lo0bits+0x4e>
 8009fe8:	085b      	lsrs	r3, r3, #1
 8009fea:	d006      	beq.n	8009ffa <__lo0bits+0x5a>
 8009fec:	3001      	adds	r0, #1
 8009fee:	600b      	str	r3, [r1, #0]
 8009ff0:	4770      	bx	lr
 8009ff2:	4610      	mov	r0, r2
 8009ff4:	e7e9      	b.n	8009fca <__lo0bits+0x2a>
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	4770      	bx	lr
 8009ffa:	2020      	movs	r0, #32
 8009ffc:	4770      	bx	lr

08009ffe <__i2b>:
 8009ffe:	b510      	push	{r4, lr}
 800a000:	460c      	mov	r4, r1
 800a002:	2101      	movs	r1, #1
 800a004:	f7ff ff27 	bl	8009e56 <_Balloc>
 800a008:	2201      	movs	r2, #1
 800a00a:	6144      	str	r4, [r0, #20]
 800a00c:	6102      	str	r2, [r0, #16]
 800a00e:	bd10      	pop	{r4, pc}

0800a010 <__multiply>:
 800a010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a014:	4614      	mov	r4, r2
 800a016:	690a      	ldr	r2, [r1, #16]
 800a018:	6923      	ldr	r3, [r4, #16]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	bfb8      	it	lt
 800a01e:	460b      	movlt	r3, r1
 800a020:	4688      	mov	r8, r1
 800a022:	bfbc      	itt	lt
 800a024:	46a0      	movlt	r8, r4
 800a026:	461c      	movlt	r4, r3
 800a028:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a02c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a030:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a034:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a038:	eb07 0609 	add.w	r6, r7, r9
 800a03c:	42b3      	cmp	r3, r6
 800a03e:	bfb8      	it	lt
 800a040:	3101      	addlt	r1, #1
 800a042:	f7ff ff08 	bl	8009e56 <_Balloc>
 800a046:	f100 0514 	add.w	r5, r0, #20
 800a04a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a04e:	462b      	mov	r3, r5
 800a050:	2200      	movs	r2, #0
 800a052:	4573      	cmp	r3, lr
 800a054:	d316      	bcc.n	800a084 <__multiply+0x74>
 800a056:	f104 0214 	add.w	r2, r4, #20
 800a05a:	f108 0114 	add.w	r1, r8, #20
 800a05e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a062:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	9b00      	ldr	r3, [sp, #0]
 800a06a:	9201      	str	r2, [sp, #4]
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d80c      	bhi.n	800a08a <__multiply+0x7a>
 800a070:	2e00      	cmp	r6, #0
 800a072:	dd03      	ble.n	800a07c <__multiply+0x6c>
 800a074:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d05d      	beq.n	800a138 <__multiply+0x128>
 800a07c:	6106      	str	r6, [r0, #16]
 800a07e:	b003      	add	sp, #12
 800a080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a084:	f843 2b04 	str.w	r2, [r3], #4
 800a088:	e7e3      	b.n	800a052 <__multiply+0x42>
 800a08a:	f8b2 b000 	ldrh.w	fp, [r2]
 800a08e:	f1bb 0f00 	cmp.w	fp, #0
 800a092:	d023      	beq.n	800a0dc <__multiply+0xcc>
 800a094:	4689      	mov	r9, r1
 800a096:	46ac      	mov	ip, r5
 800a098:	f04f 0800 	mov.w	r8, #0
 800a09c:	f859 4b04 	ldr.w	r4, [r9], #4
 800a0a0:	f8dc a000 	ldr.w	sl, [ip]
 800a0a4:	b2a3      	uxth	r3, r4
 800a0a6:	fa1f fa8a 	uxth.w	sl, sl
 800a0aa:	fb0b a303 	mla	r3, fp, r3, sl
 800a0ae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a0b2:	f8dc 4000 	ldr.w	r4, [ip]
 800a0b6:	4443      	add	r3, r8
 800a0b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a0bc:	fb0b 840a 	mla	r4, fp, sl, r8
 800a0c0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a0c4:	46e2      	mov	sl, ip
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a0cc:	454f      	cmp	r7, r9
 800a0ce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a0d2:	f84a 3b04 	str.w	r3, [sl], #4
 800a0d6:	d82b      	bhi.n	800a130 <__multiply+0x120>
 800a0d8:	f8cc 8004 	str.w	r8, [ip, #4]
 800a0dc:	9b01      	ldr	r3, [sp, #4]
 800a0de:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a0e2:	3204      	adds	r2, #4
 800a0e4:	f1ba 0f00 	cmp.w	sl, #0
 800a0e8:	d020      	beq.n	800a12c <__multiply+0x11c>
 800a0ea:	682b      	ldr	r3, [r5, #0]
 800a0ec:	4689      	mov	r9, r1
 800a0ee:	46a8      	mov	r8, r5
 800a0f0:	f04f 0b00 	mov.w	fp, #0
 800a0f4:	f8b9 c000 	ldrh.w	ip, [r9]
 800a0f8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a0fc:	fb0a 440c 	mla	r4, sl, ip, r4
 800a100:	445c      	add	r4, fp
 800a102:	46c4      	mov	ip, r8
 800a104:	b29b      	uxth	r3, r3
 800a106:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a10a:	f84c 3b04 	str.w	r3, [ip], #4
 800a10e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a112:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a116:	0c1b      	lsrs	r3, r3, #16
 800a118:	fb0a b303 	mla	r3, sl, r3, fp
 800a11c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a120:	454f      	cmp	r7, r9
 800a122:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a126:	d805      	bhi.n	800a134 <__multiply+0x124>
 800a128:	f8c8 3004 	str.w	r3, [r8, #4]
 800a12c:	3504      	adds	r5, #4
 800a12e:	e79b      	b.n	800a068 <__multiply+0x58>
 800a130:	46d4      	mov	ip, sl
 800a132:	e7b3      	b.n	800a09c <__multiply+0x8c>
 800a134:	46e0      	mov	r8, ip
 800a136:	e7dd      	b.n	800a0f4 <__multiply+0xe4>
 800a138:	3e01      	subs	r6, #1
 800a13a:	e799      	b.n	800a070 <__multiply+0x60>

0800a13c <__pow5mult>:
 800a13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a140:	4615      	mov	r5, r2
 800a142:	f012 0203 	ands.w	r2, r2, #3
 800a146:	4606      	mov	r6, r0
 800a148:	460f      	mov	r7, r1
 800a14a:	d007      	beq.n	800a15c <__pow5mult+0x20>
 800a14c:	3a01      	subs	r2, #1
 800a14e:	4c21      	ldr	r4, [pc, #132]	; (800a1d4 <__pow5mult+0x98>)
 800a150:	2300      	movs	r3, #0
 800a152:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a156:	f7ff fec9 	bl	8009eec <__multadd>
 800a15a:	4607      	mov	r7, r0
 800a15c:	10ad      	asrs	r5, r5, #2
 800a15e:	d035      	beq.n	800a1cc <__pow5mult+0x90>
 800a160:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a162:	b93c      	cbnz	r4, 800a174 <__pow5mult+0x38>
 800a164:	2010      	movs	r0, #16
 800a166:	f7fe fabd 	bl	80086e4 <malloc>
 800a16a:	6270      	str	r0, [r6, #36]	; 0x24
 800a16c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a170:	6004      	str	r4, [r0, #0]
 800a172:	60c4      	str	r4, [r0, #12]
 800a174:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a17c:	b94c      	cbnz	r4, 800a192 <__pow5mult+0x56>
 800a17e:	f240 2171 	movw	r1, #625	; 0x271
 800a182:	4630      	mov	r0, r6
 800a184:	f7ff ff3b 	bl	8009ffe <__i2b>
 800a188:	2300      	movs	r3, #0
 800a18a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a18e:	4604      	mov	r4, r0
 800a190:	6003      	str	r3, [r0, #0]
 800a192:	f04f 0800 	mov.w	r8, #0
 800a196:	07eb      	lsls	r3, r5, #31
 800a198:	d50a      	bpl.n	800a1b0 <__pow5mult+0x74>
 800a19a:	4639      	mov	r1, r7
 800a19c:	4622      	mov	r2, r4
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f7ff ff36 	bl	800a010 <__multiply>
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	4681      	mov	r9, r0
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	f7ff fe88 	bl	8009ebe <_Bfree>
 800a1ae:	464f      	mov	r7, r9
 800a1b0:	106d      	asrs	r5, r5, #1
 800a1b2:	d00b      	beq.n	800a1cc <__pow5mult+0x90>
 800a1b4:	6820      	ldr	r0, [r4, #0]
 800a1b6:	b938      	cbnz	r0, 800a1c8 <__pow5mult+0x8c>
 800a1b8:	4622      	mov	r2, r4
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f7ff ff27 	bl	800a010 <__multiply>
 800a1c2:	6020      	str	r0, [r4, #0]
 800a1c4:	f8c0 8000 	str.w	r8, [r0]
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	e7e4      	b.n	800a196 <__pow5mult+0x5a>
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1d2:	bf00      	nop
 800a1d4:	080178e8 	.word	0x080178e8

0800a1d8 <__lshift>:
 800a1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1dc:	460c      	mov	r4, r1
 800a1de:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1e2:	6923      	ldr	r3, [r4, #16]
 800a1e4:	6849      	ldr	r1, [r1, #4]
 800a1e6:	eb0a 0903 	add.w	r9, sl, r3
 800a1ea:	68a3      	ldr	r3, [r4, #8]
 800a1ec:	4607      	mov	r7, r0
 800a1ee:	4616      	mov	r6, r2
 800a1f0:	f109 0501 	add.w	r5, r9, #1
 800a1f4:	42ab      	cmp	r3, r5
 800a1f6:	db32      	blt.n	800a25e <__lshift+0x86>
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	f7ff fe2c 	bl	8009e56 <_Balloc>
 800a1fe:	2300      	movs	r3, #0
 800a200:	4680      	mov	r8, r0
 800a202:	f100 0114 	add.w	r1, r0, #20
 800a206:	461a      	mov	r2, r3
 800a208:	4553      	cmp	r3, sl
 800a20a:	db2b      	blt.n	800a264 <__lshift+0x8c>
 800a20c:	6920      	ldr	r0, [r4, #16]
 800a20e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a212:	f104 0314 	add.w	r3, r4, #20
 800a216:	f016 021f 	ands.w	r2, r6, #31
 800a21a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a21e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a222:	d025      	beq.n	800a270 <__lshift+0x98>
 800a224:	f1c2 0e20 	rsb	lr, r2, #32
 800a228:	2000      	movs	r0, #0
 800a22a:	681e      	ldr	r6, [r3, #0]
 800a22c:	468a      	mov	sl, r1
 800a22e:	4096      	lsls	r6, r2
 800a230:	4330      	orrs	r0, r6
 800a232:	f84a 0b04 	str.w	r0, [sl], #4
 800a236:	f853 0b04 	ldr.w	r0, [r3], #4
 800a23a:	459c      	cmp	ip, r3
 800a23c:	fa20 f00e 	lsr.w	r0, r0, lr
 800a240:	d814      	bhi.n	800a26c <__lshift+0x94>
 800a242:	6048      	str	r0, [r1, #4]
 800a244:	b108      	cbz	r0, 800a24a <__lshift+0x72>
 800a246:	f109 0502 	add.w	r5, r9, #2
 800a24a:	3d01      	subs	r5, #1
 800a24c:	4638      	mov	r0, r7
 800a24e:	f8c8 5010 	str.w	r5, [r8, #16]
 800a252:	4621      	mov	r1, r4
 800a254:	f7ff fe33 	bl	8009ebe <_Bfree>
 800a258:	4640      	mov	r0, r8
 800a25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a25e:	3101      	adds	r1, #1
 800a260:	005b      	lsls	r3, r3, #1
 800a262:	e7c7      	b.n	800a1f4 <__lshift+0x1c>
 800a264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a268:	3301      	adds	r3, #1
 800a26a:	e7cd      	b.n	800a208 <__lshift+0x30>
 800a26c:	4651      	mov	r1, sl
 800a26e:	e7dc      	b.n	800a22a <__lshift+0x52>
 800a270:	3904      	subs	r1, #4
 800a272:	f853 2b04 	ldr.w	r2, [r3], #4
 800a276:	f841 2f04 	str.w	r2, [r1, #4]!
 800a27a:	459c      	cmp	ip, r3
 800a27c:	d8f9      	bhi.n	800a272 <__lshift+0x9a>
 800a27e:	e7e4      	b.n	800a24a <__lshift+0x72>

0800a280 <__mcmp>:
 800a280:	6903      	ldr	r3, [r0, #16]
 800a282:	690a      	ldr	r2, [r1, #16]
 800a284:	1a9b      	subs	r3, r3, r2
 800a286:	b530      	push	{r4, r5, lr}
 800a288:	d10c      	bne.n	800a2a4 <__mcmp+0x24>
 800a28a:	0092      	lsls	r2, r2, #2
 800a28c:	3014      	adds	r0, #20
 800a28e:	3114      	adds	r1, #20
 800a290:	1884      	adds	r4, r0, r2
 800a292:	4411      	add	r1, r2
 800a294:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a298:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a29c:	4295      	cmp	r5, r2
 800a29e:	d003      	beq.n	800a2a8 <__mcmp+0x28>
 800a2a0:	d305      	bcc.n	800a2ae <__mcmp+0x2e>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	bd30      	pop	{r4, r5, pc}
 800a2a8:	42a0      	cmp	r0, r4
 800a2aa:	d3f3      	bcc.n	800a294 <__mcmp+0x14>
 800a2ac:	e7fa      	b.n	800a2a4 <__mcmp+0x24>
 800a2ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b2:	e7f7      	b.n	800a2a4 <__mcmp+0x24>

0800a2b4 <__mdiff>:
 800a2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b8:	460d      	mov	r5, r1
 800a2ba:	4607      	mov	r7, r0
 800a2bc:	4611      	mov	r1, r2
 800a2be:	4628      	mov	r0, r5
 800a2c0:	4614      	mov	r4, r2
 800a2c2:	f7ff ffdd 	bl	800a280 <__mcmp>
 800a2c6:	1e06      	subs	r6, r0, #0
 800a2c8:	d108      	bne.n	800a2dc <__mdiff+0x28>
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	4638      	mov	r0, r7
 800a2ce:	f7ff fdc2 	bl	8009e56 <_Balloc>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2dc:	bfa4      	itt	ge
 800a2de:	4623      	movge	r3, r4
 800a2e0:	462c      	movge	r4, r5
 800a2e2:	4638      	mov	r0, r7
 800a2e4:	6861      	ldr	r1, [r4, #4]
 800a2e6:	bfa6      	itte	ge
 800a2e8:	461d      	movge	r5, r3
 800a2ea:	2600      	movge	r6, #0
 800a2ec:	2601      	movlt	r6, #1
 800a2ee:	f7ff fdb2 	bl	8009e56 <_Balloc>
 800a2f2:	692b      	ldr	r3, [r5, #16]
 800a2f4:	60c6      	str	r6, [r0, #12]
 800a2f6:	6926      	ldr	r6, [r4, #16]
 800a2f8:	f105 0914 	add.w	r9, r5, #20
 800a2fc:	f104 0214 	add.w	r2, r4, #20
 800a300:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a304:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a308:	f100 0514 	add.w	r5, r0, #20
 800a30c:	f04f 0e00 	mov.w	lr, #0
 800a310:	f852 ab04 	ldr.w	sl, [r2], #4
 800a314:	f859 4b04 	ldr.w	r4, [r9], #4
 800a318:	fa1e f18a 	uxtah	r1, lr, sl
 800a31c:	b2a3      	uxth	r3, r4
 800a31e:	1ac9      	subs	r1, r1, r3
 800a320:	0c23      	lsrs	r3, r4, #16
 800a322:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a326:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a32a:	b289      	uxth	r1, r1
 800a32c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a330:	45c8      	cmp	r8, r9
 800a332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a336:	4694      	mov	ip, r2
 800a338:	f845 3b04 	str.w	r3, [r5], #4
 800a33c:	d8e8      	bhi.n	800a310 <__mdiff+0x5c>
 800a33e:	45bc      	cmp	ip, r7
 800a340:	d304      	bcc.n	800a34c <__mdiff+0x98>
 800a342:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a346:	b183      	cbz	r3, 800a36a <__mdiff+0xb6>
 800a348:	6106      	str	r6, [r0, #16]
 800a34a:	e7c5      	b.n	800a2d8 <__mdiff+0x24>
 800a34c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a350:	fa1e f381 	uxtah	r3, lr, r1
 800a354:	141a      	asrs	r2, r3, #16
 800a356:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a360:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a364:	f845 3b04 	str.w	r3, [r5], #4
 800a368:	e7e9      	b.n	800a33e <__mdiff+0x8a>
 800a36a:	3e01      	subs	r6, #1
 800a36c:	e7e9      	b.n	800a342 <__mdiff+0x8e>

0800a36e <__d2b>:
 800a36e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a372:	460e      	mov	r6, r1
 800a374:	2101      	movs	r1, #1
 800a376:	ec59 8b10 	vmov	r8, r9, d0
 800a37a:	4615      	mov	r5, r2
 800a37c:	f7ff fd6b 	bl	8009e56 <_Balloc>
 800a380:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a384:	4607      	mov	r7, r0
 800a386:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a38a:	bb34      	cbnz	r4, 800a3da <__d2b+0x6c>
 800a38c:	9301      	str	r3, [sp, #4]
 800a38e:	f1b8 0300 	subs.w	r3, r8, #0
 800a392:	d027      	beq.n	800a3e4 <__d2b+0x76>
 800a394:	a802      	add	r0, sp, #8
 800a396:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a39a:	f7ff fe01 	bl	8009fa0 <__lo0bits>
 800a39e:	9900      	ldr	r1, [sp, #0]
 800a3a0:	b1f0      	cbz	r0, 800a3e0 <__d2b+0x72>
 800a3a2:	9a01      	ldr	r2, [sp, #4]
 800a3a4:	f1c0 0320 	rsb	r3, r0, #32
 800a3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ac:	430b      	orrs	r3, r1
 800a3ae:	40c2      	lsrs	r2, r0
 800a3b0:	617b      	str	r3, [r7, #20]
 800a3b2:	9201      	str	r2, [sp, #4]
 800a3b4:	9b01      	ldr	r3, [sp, #4]
 800a3b6:	61bb      	str	r3, [r7, #24]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	bf14      	ite	ne
 800a3bc:	2102      	movne	r1, #2
 800a3be:	2101      	moveq	r1, #1
 800a3c0:	6139      	str	r1, [r7, #16]
 800a3c2:	b1c4      	cbz	r4, 800a3f6 <__d2b+0x88>
 800a3c4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a3c8:	4404      	add	r4, r0
 800a3ca:	6034      	str	r4, [r6, #0]
 800a3cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a3d0:	6028      	str	r0, [r5, #0]
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	b003      	add	sp, #12
 800a3d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3de:	e7d5      	b.n	800a38c <__d2b+0x1e>
 800a3e0:	6179      	str	r1, [r7, #20]
 800a3e2:	e7e7      	b.n	800a3b4 <__d2b+0x46>
 800a3e4:	a801      	add	r0, sp, #4
 800a3e6:	f7ff fddb 	bl	8009fa0 <__lo0bits>
 800a3ea:	9b01      	ldr	r3, [sp, #4]
 800a3ec:	617b      	str	r3, [r7, #20]
 800a3ee:	2101      	movs	r1, #1
 800a3f0:	6139      	str	r1, [r7, #16]
 800a3f2:	3020      	adds	r0, #32
 800a3f4:	e7e5      	b.n	800a3c2 <__d2b+0x54>
 800a3f6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a3fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3fe:	6030      	str	r0, [r6, #0]
 800a400:	6918      	ldr	r0, [r3, #16]
 800a402:	f7ff fdae 	bl	8009f62 <__hi0bits>
 800a406:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a40a:	e7e1      	b.n	800a3d0 <__d2b+0x62>

0800a40c <__ssputs_r>:
 800a40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a410:	688e      	ldr	r6, [r1, #8]
 800a412:	429e      	cmp	r6, r3
 800a414:	4682      	mov	sl, r0
 800a416:	460c      	mov	r4, r1
 800a418:	4690      	mov	r8, r2
 800a41a:	4699      	mov	r9, r3
 800a41c:	d837      	bhi.n	800a48e <__ssputs_r+0x82>
 800a41e:	898a      	ldrh	r2, [r1, #12]
 800a420:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a424:	d031      	beq.n	800a48a <__ssputs_r+0x7e>
 800a426:	6825      	ldr	r5, [r4, #0]
 800a428:	6909      	ldr	r1, [r1, #16]
 800a42a:	1a6f      	subs	r7, r5, r1
 800a42c:	6965      	ldr	r5, [r4, #20]
 800a42e:	2302      	movs	r3, #2
 800a430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a434:	fb95 f5f3 	sdiv	r5, r5, r3
 800a438:	f109 0301 	add.w	r3, r9, #1
 800a43c:	443b      	add	r3, r7
 800a43e:	429d      	cmp	r5, r3
 800a440:	bf38      	it	cc
 800a442:	461d      	movcc	r5, r3
 800a444:	0553      	lsls	r3, r2, #21
 800a446:	d530      	bpl.n	800a4aa <__ssputs_r+0x9e>
 800a448:	4629      	mov	r1, r5
 800a44a:	f7fe f9bf 	bl	80087cc <_malloc_r>
 800a44e:	4606      	mov	r6, r0
 800a450:	b950      	cbnz	r0, 800a468 <__ssputs_r+0x5c>
 800a452:	230c      	movs	r3, #12
 800a454:	f8ca 3000 	str.w	r3, [sl]
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a45e:	81a3      	strh	r3, [r4, #12]
 800a460:	f04f 30ff 	mov.w	r0, #4294967295
 800a464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a468:	463a      	mov	r2, r7
 800a46a:	6921      	ldr	r1, [r4, #16]
 800a46c:	f7ff fce6 	bl	8009e3c <memcpy>
 800a470:	89a3      	ldrh	r3, [r4, #12]
 800a472:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a47a:	81a3      	strh	r3, [r4, #12]
 800a47c:	6126      	str	r6, [r4, #16]
 800a47e:	6165      	str	r5, [r4, #20]
 800a480:	443e      	add	r6, r7
 800a482:	1bed      	subs	r5, r5, r7
 800a484:	6026      	str	r6, [r4, #0]
 800a486:	60a5      	str	r5, [r4, #8]
 800a488:	464e      	mov	r6, r9
 800a48a:	454e      	cmp	r6, r9
 800a48c:	d900      	bls.n	800a490 <__ssputs_r+0x84>
 800a48e:	464e      	mov	r6, r9
 800a490:	4632      	mov	r2, r6
 800a492:	4641      	mov	r1, r8
 800a494:	6820      	ldr	r0, [r4, #0]
 800a496:	f000 f91d 	bl	800a6d4 <memmove>
 800a49a:	68a3      	ldr	r3, [r4, #8]
 800a49c:	1b9b      	subs	r3, r3, r6
 800a49e:	60a3      	str	r3, [r4, #8]
 800a4a0:	6823      	ldr	r3, [r4, #0]
 800a4a2:	441e      	add	r6, r3
 800a4a4:	6026      	str	r6, [r4, #0]
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	e7dc      	b.n	800a464 <__ssputs_r+0x58>
 800a4aa:	462a      	mov	r2, r5
 800a4ac:	f000 f92b 	bl	800a706 <_realloc_r>
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d1e2      	bne.n	800a47c <__ssputs_r+0x70>
 800a4b6:	6921      	ldr	r1, [r4, #16]
 800a4b8:	4650      	mov	r0, sl
 800a4ba:	f7fe f939 	bl	8008730 <_free_r>
 800a4be:	e7c8      	b.n	800a452 <__ssputs_r+0x46>

0800a4c0 <_svfiprintf_r>:
 800a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c4:	461d      	mov	r5, r3
 800a4c6:	898b      	ldrh	r3, [r1, #12]
 800a4c8:	061f      	lsls	r7, r3, #24
 800a4ca:	b09d      	sub	sp, #116	; 0x74
 800a4cc:	4680      	mov	r8, r0
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	4616      	mov	r6, r2
 800a4d2:	d50f      	bpl.n	800a4f4 <_svfiprintf_r+0x34>
 800a4d4:	690b      	ldr	r3, [r1, #16]
 800a4d6:	b96b      	cbnz	r3, 800a4f4 <_svfiprintf_r+0x34>
 800a4d8:	2140      	movs	r1, #64	; 0x40
 800a4da:	f7fe f977 	bl	80087cc <_malloc_r>
 800a4de:	6020      	str	r0, [r4, #0]
 800a4e0:	6120      	str	r0, [r4, #16]
 800a4e2:	b928      	cbnz	r0, 800a4f0 <_svfiprintf_r+0x30>
 800a4e4:	230c      	movs	r3, #12
 800a4e6:	f8c8 3000 	str.w	r3, [r8]
 800a4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ee:	e0c8      	b.n	800a682 <_svfiprintf_r+0x1c2>
 800a4f0:	2340      	movs	r3, #64	; 0x40
 800a4f2:	6163      	str	r3, [r4, #20]
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f8:	2320      	movs	r3, #32
 800a4fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4fe:	2330      	movs	r3, #48	; 0x30
 800a500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a504:	9503      	str	r5, [sp, #12]
 800a506:	f04f 0b01 	mov.w	fp, #1
 800a50a:	4637      	mov	r7, r6
 800a50c:	463d      	mov	r5, r7
 800a50e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a512:	b10b      	cbz	r3, 800a518 <_svfiprintf_r+0x58>
 800a514:	2b25      	cmp	r3, #37	; 0x25
 800a516:	d13e      	bne.n	800a596 <_svfiprintf_r+0xd6>
 800a518:	ebb7 0a06 	subs.w	sl, r7, r6
 800a51c:	d00b      	beq.n	800a536 <_svfiprintf_r+0x76>
 800a51e:	4653      	mov	r3, sl
 800a520:	4632      	mov	r2, r6
 800a522:	4621      	mov	r1, r4
 800a524:	4640      	mov	r0, r8
 800a526:	f7ff ff71 	bl	800a40c <__ssputs_r>
 800a52a:	3001      	adds	r0, #1
 800a52c:	f000 80a4 	beq.w	800a678 <_svfiprintf_r+0x1b8>
 800a530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a532:	4453      	add	r3, sl
 800a534:	9309      	str	r3, [sp, #36]	; 0x24
 800a536:	783b      	ldrb	r3, [r7, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f000 809d 	beq.w	800a678 <_svfiprintf_r+0x1b8>
 800a53e:	2300      	movs	r3, #0
 800a540:	f04f 32ff 	mov.w	r2, #4294967295
 800a544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a548:	9304      	str	r3, [sp, #16]
 800a54a:	9307      	str	r3, [sp, #28]
 800a54c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a550:	931a      	str	r3, [sp, #104]	; 0x68
 800a552:	462f      	mov	r7, r5
 800a554:	2205      	movs	r2, #5
 800a556:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a55a:	4850      	ldr	r0, [pc, #320]	; (800a69c <_svfiprintf_r+0x1dc>)
 800a55c:	f7f5 fe60 	bl	8000220 <memchr>
 800a560:	9b04      	ldr	r3, [sp, #16]
 800a562:	b9d0      	cbnz	r0, 800a59a <_svfiprintf_r+0xda>
 800a564:	06d9      	lsls	r1, r3, #27
 800a566:	bf44      	itt	mi
 800a568:	2220      	movmi	r2, #32
 800a56a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a56e:	071a      	lsls	r2, r3, #28
 800a570:	bf44      	itt	mi
 800a572:	222b      	movmi	r2, #43	; 0x2b
 800a574:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a578:	782a      	ldrb	r2, [r5, #0]
 800a57a:	2a2a      	cmp	r2, #42	; 0x2a
 800a57c:	d015      	beq.n	800a5aa <_svfiprintf_r+0xea>
 800a57e:	9a07      	ldr	r2, [sp, #28]
 800a580:	462f      	mov	r7, r5
 800a582:	2000      	movs	r0, #0
 800a584:	250a      	movs	r5, #10
 800a586:	4639      	mov	r1, r7
 800a588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a58c:	3b30      	subs	r3, #48	; 0x30
 800a58e:	2b09      	cmp	r3, #9
 800a590:	d94d      	bls.n	800a62e <_svfiprintf_r+0x16e>
 800a592:	b1b8      	cbz	r0, 800a5c4 <_svfiprintf_r+0x104>
 800a594:	e00f      	b.n	800a5b6 <_svfiprintf_r+0xf6>
 800a596:	462f      	mov	r7, r5
 800a598:	e7b8      	b.n	800a50c <_svfiprintf_r+0x4c>
 800a59a:	4a40      	ldr	r2, [pc, #256]	; (800a69c <_svfiprintf_r+0x1dc>)
 800a59c:	1a80      	subs	r0, r0, r2
 800a59e:	fa0b f000 	lsl.w	r0, fp, r0
 800a5a2:	4318      	orrs	r0, r3
 800a5a4:	9004      	str	r0, [sp, #16]
 800a5a6:	463d      	mov	r5, r7
 800a5a8:	e7d3      	b.n	800a552 <_svfiprintf_r+0x92>
 800a5aa:	9a03      	ldr	r2, [sp, #12]
 800a5ac:	1d11      	adds	r1, r2, #4
 800a5ae:	6812      	ldr	r2, [r2, #0]
 800a5b0:	9103      	str	r1, [sp, #12]
 800a5b2:	2a00      	cmp	r2, #0
 800a5b4:	db01      	blt.n	800a5ba <_svfiprintf_r+0xfa>
 800a5b6:	9207      	str	r2, [sp, #28]
 800a5b8:	e004      	b.n	800a5c4 <_svfiprintf_r+0x104>
 800a5ba:	4252      	negs	r2, r2
 800a5bc:	f043 0302 	orr.w	r3, r3, #2
 800a5c0:	9207      	str	r2, [sp, #28]
 800a5c2:	9304      	str	r3, [sp, #16]
 800a5c4:	783b      	ldrb	r3, [r7, #0]
 800a5c6:	2b2e      	cmp	r3, #46	; 0x2e
 800a5c8:	d10c      	bne.n	800a5e4 <_svfiprintf_r+0x124>
 800a5ca:	787b      	ldrb	r3, [r7, #1]
 800a5cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a5ce:	d133      	bne.n	800a638 <_svfiprintf_r+0x178>
 800a5d0:	9b03      	ldr	r3, [sp, #12]
 800a5d2:	1d1a      	adds	r2, r3, #4
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	9203      	str	r2, [sp, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	bfb8      	it	lt
 800a5dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5e0:	3702      	adds	r7, #2
 800a5e2:	9305      	str	r3, [sp, #20]
 800a5e4:	4d2e      	ldr	r5, [pc, #184]	; (800a6a0 <_svfiprintf_r+0x1e0>)
 800a5e6:	7839      	ldrb	r1, [r7, #0]
 800a5e8:	2203      	movs	r2, #3
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	f7f5 fe18 	bl	8000220 <memchr>
 800a5f0:	b138      	cbz	r0, 800a602 <_svfiprintf_r+0x142>
 800a5f2:	2340      	movs	r3, #64	; 0x40
 800a5f4:	1b40      	subs	r0, r0, r5
 800a5f6:	fa03 f000 	lsl.w	r0, r3, r0
 800a5fa:	9b04      	ldr	r3, [sp, #16]
 800a5fc:	4303      	orrs	r3, r0
 800a5fe:	3701      	adds	r7, #1
 800a600:	9304      	str	r3, [sp, #16]
 800a602:	7839      	ldrb	r1, [r7, #0]
 800a604:	4827      	ldr	r0, [pc, #156]	; (800a6a4 <_svfiprintf_r+0x1e4>)
 800a606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a60a:	2206      	movs	r2, #6
 800a60c:	1c7e      	adds	r6, r7, #1
 800a60e:	f7f5 fe07 	bl	8000220 <memchr>
 800a612:	2800      	cmp	r0, #0
 800a614:	d038      	beq.n	800a688 <_svfiprintf_r+0x1c8>
 800a616:	4b24      	ldr	r3, [pc, #144]	; (800a6a8 <_svfiprintf_r+0x1e8>)
 800a618:	bb13      	cbnz	r3, 800a660 <_svfiprintf_r+0x1a0>
 800a61a:	9b03      	ldr	r3, [sp, #12]
 800a61c:	3307      	adds	r3, #7
 800a61e:	f023 0307 	bic.w	r3, r3, #7
 800a622:	3308      	adds	r3, #8
 800a624:	9303      	str	r3, [sp, #12]
 800a626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a628:	444b      	add	r3, r9
 800a62a:	9309      	str	r3, [sp, #36]	; 0x24
 800a62c:	e76d      	b.n	800a50a <_svfiprintf_r+0x4a>
 800a62e:	fb05 3202 	mla	r2, r5, r2, r3
 800a632:	2001      	movs	r0, #1
 800a634:	460f      	mov	r7, r1
 800a636:	e7a6      	b.n	800a586 <_svfiprintf_r+0xc6>
 800a638:	2300      	movs	r3, #0
 800a63a:	3701      	adds	r7, #1
 800a63c:	9305      	str	r3, [sp, #20]
 800a63e:	4619      	mov	r1, r3
 800a640:	250a      	movs	r5, #10
 800a642:	4638      	mov	r0, r7
 800a644:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a648:	3a30      	subs	r2, #48	; 0x30
 800a64a:	2a09      	cmp	r2, #9
 800a64c:	d903      	bls.n	800a656 <_svfiprintf_r+0x196>
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d0c8      	beq.n	800a5e4 <_svfiprintf_r+0x124>
 800a652:	9105      	str	r1, [sp, #20]
 800a654:	e7c6      	b.n	800a5e4 <_svfiprintf_r+0x124>
 800a656:	fb05 2101 	mla	r1, r5, r1, r2
 800a65a:	2301      	movs	r3, #1
 800a65c:	4607      	mov	r7, r0
 800a65e:	e7f0      	b.n	800a642 <_svfiprintf_r+0x182>
 800a660:	ab03      	add	r3, sp, #12
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	4622      	mov	r2, r4
 800a666:	4b11      	ldr	r3, [pc, #68]	; (800a6ac <_svfiprintf_r+0x1ec>)
 800a668:	a904      	add	r1, sp, #16
 800a66a:	4640      	mov	r0, r8
 800a66c:	f7fe f99c 	bl	80089a8 <_printf_float>
 800a670:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a674:	4681      	mov	r9, r0
 800a676:	d1d6      	bne.n	800a626 <_svfiprintf_r+0x166>
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	065b      	lsls	r3, r3, #25
 800a67c:	f53f af35 	bmi.w	800a4ea <_svfiprintf_r+0x2a>
 800a680:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a682:	b01d      	add	sp, #116	; 0x74
 800a684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a688:	ab03      	add	r3, sp, #12
 800a68a:	9300      	str	r3, [sp, #0]
 800a68c:	4622      	mov	r2, r4
 800a68e:	4b07      	ldr	r3, [pc, #28]	; (800a6ac <_svfiprintf_r+0x1ec>)
 800a690:	a904      	add	r1, sp, #16
 800a692:	4640      	mov	r0, r8
 800a694:	f7fe fc3e 	bl	8008f14 <_printf_i>
 800a698:	e7ea      	b.n	800a670 <_svfiprintf_r+0x1b0>
 800a69a:	bf00      	nop
 800a69c:	080178f4 	.word	0x080178f4
 800a6a0:	080178fa 	.word	0x080178fa
 800a6a4:	080178fe 	.word	0x080178fe
 800a6a8:	080089a9 	.word	0x080089a9
 800a6ac:	0800a40d 	.word	0x0800a40d

0800a6b0 <__ascii_mbtowc>:
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	b901      	cbnz	r1, 800a6b6 <__ascii_mbtowc+0x6>
 800a6b4:	a901      	add	r1, sp, #4
 800a6b6:	b142      	cbz	r2, 800a6ca <__ascii_mbtowc+0x1a>
 800a6b8:	b14b      	cbz	r3, 800a6ce <__ascii_mbtowc+0x1e>
 800a6ba:	7813      	ldrb	r3, [r2, #0]
 800a6bc:	600b      	str	r3, [r1, #0]
 800a6be:	7812      	ldrb	r2, [r2, #0]
 800a6c0:	1c10      	adds	r0, r2, #0
 800a6c2:	bf18      	it	ne
 800a6c4:	2001      	movne	r0, #1
 800a6c6:	b002      	add	sp, #8
 800a6c8:	4770      	bx	lr
 800a6ca:	4610      	mov	r0, r2
 800a6cc:	e7fb      	b.n	800a6c6 <__ascii_mbtowc+0x16>
 800a6ce:	f06f 0001 	mvn.w	r0, #1
 800a6d2:	e7f8      	b.n	800a6c6 <__ascii_mbtowc+0x16>

0800a6d4 <memmove>:
 800a6d4:	4288      	cmp	r0, r1
 800a6d6:	b510      	push	{r4, lr}
 800a6d8:	eb01 0302 	add.w	r3, r1, r2
 800a6dc:	d807      	bhi.n	800a6ee <memmove+0x1a>
 800a6de:	1e42      	subs	r2, r0, #1
 800a6e0:	4299      	cmp	r1, r3
 800a6e2:	d00a      	beq.n	800a6fa <memmove+0x26>
 800a6e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a6ec:	e7f8      	b.n	800a6e0 <memmove+0xc>
 800a6ee:	4283      	cmp	r3, r0
 800a6f0:	d9f5      	bls.n	800a6de <memmove+0xa>
 800a6f2:	1881      	adds	r1, r0, r2
 800a6f4:	1ad2      	subs	r2, r2, r3
 800a6f6:	42d3      	cmn	r3, r2
 800a6f8:	d100      	bne.n	800a6fc <memmove+0x28>
 800a6fa:	bd10      	pop	{r4, pc}
 800a6fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a700:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a704:	e7f7      	b.n	800a6f6 <memmove+0x22>

0800a706 <_realloc_r>:
 800a706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a708:	4607      	mov	r7, r0
 800a70a:	4614      	mov	r4, r2
 800a70c:	460e      	mov	r6, r1
 800a70e:	b921      	cbnz	r1, 800a71a <_realloc_r+0x14>
 800a710:	4611      	mov	r1, r2
 800a712:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a716:	f7fe b859 	b.w	80087cc <_malloc_r>
 800a71a:	b922      	cbnz	r2, 800a726 <_realloc_r+0x20>
 800a71c:	f7fe f808 	bl	8008730 <_free_r>
 800a720:	4625      	mov	r5, r4
 800a722:	4628      	mov	r0, r5
 800a724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a726:	f000 f821 	bl	800a76c <_malloc_usable_size_r>
 800a72a:	42a0      	cmp	r0, r4
 800a72c:	d20f      	bcs.n	800a74e <_realloc_r+0x48>
 800a72e:	4621      	mov	r1, r4
 800a730:	4638      	mov	r0, r7
 800a732:	f7fe f84b 	bl	80087cc <_malloc_r>
 800a736:	4605      	mov	r5, r0
 800a738:	2800      	cmp	r0, #0
 800a73a:	d0f2      	beq.n	800a722 <_realloc_r+0x1c>
 800a73c:	4631      	mov	r1, r6
 800a73e:	4622      	mov	r2, r4
 800a740:	f7ff fb7c 	bl	8009e3c <memcpy>
 800a744:	4631      	mov	r1, r6
 800a746:	4638      	mov	r0, r7
 800a748:	f7fd fff2 	bl	8008730 <_free_r>
 800a74c:	e7e9      	b.n	800a722 <_realloc_r+0x1c>
 800a74e:	4635      	mov	r5, r6
 800a750:	e7e7      	b.n	800a722 <_realloc_r+0x1c>

0800a752 <__ascii_wctomb>:
 800a752:	b149      	cbz	r1, 800a768 <__ascii_wctomb+0x16>
 800a754:	2aff      	cmp	r2, #255	; 0xff
 800a756:	bf85      	ittet	hi
 800a758:	238a      	movhi	r3, #138	; 0x8a
 800a75a:	6003      	strhi	r3, [r0, #0]
 800a75c:	700a      	strbls	r2, [r1, #0]
 800a75e:	f04f 30ff 	movhi.w	r0, #4294967295
 800a762:	bf98      	it	ls
 800a764:	2001      	movls	r0, #1
 800a766:	4770      	bx	lr
 800a768:	4608      	mov	r0, r1
 800a76a:	4770      	bx	lr

0800a76c <_malloc_usable_size_r>:
 800a76c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a770:	1f18      	subs	r0, r3, #4
 800a772:	2b00      	cmp	r3, #0
 800a774:	bfbc      	itt	lt
 800a776:	580b      	ldrlt	r3, [r1, r0]
 800a778:	18c0      	addlt	r0, r0, r3
 800a77a:	4770      	bx	lr

0800a77c <_init>:
 800a77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77e:	bf00      	nop
 800a780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a782:	bc08      	pop	{r3}
 800a784:	469e      	mov	lr, r3
 800a786:	4770      	bx	lr

0800a788 <_fini>:
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	bf00      	nop
 800a78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a78e:	bc08      	pop	{r3}
 800a790:	469e      	mov	lr, r3
 800a792:	4770      	bx	lr
